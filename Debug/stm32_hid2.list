
stm32_hid2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d504  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb8  0800d7a4  0800d7a4  0000e7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e45c  0800e45c  0000f45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e464  0800e464  0000f464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e468  0800e468  0000f468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001c0  24000000  0800e46c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDescripSection 00000060  240001c0  0800e62c  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDescripSection 00000060  24000220  0800e68c  00010220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .tyjRamFunc   00000000  00000000  00000000  00011018  2**0
                  CONTENTS
 10 .bss          0000192c  24000280  24000280  00010280  2**2
                  ALLOC
 11 ._user_heap   00001004  24001bac  24001bac  00010280  2**0
                  ALLOC
 12 .RAM_D2       00000018  30000000  30000000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .RAM_D3       00000000  38000000  38000000  00011018  2**0
                  CONTENTS
 14 .tyjDTCM      00000000  20000000  20000000  00011018  2**0
                  CONTENTS
 15 ._user_stack  00001000  20000000  20000000  00011000  2**0
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  00011018  2**0
                  CONTENTS, READONLY
 17 .debug_info   00047b37  00000000  00000000  00011046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008e8a  00000000  00000000  00058b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000190d7  00000000  00000000  00061a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000023a8  00000000  00000000  0007aae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00001cb3  00000000  00000000  0007ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00049fb3  00000000  00000000  0007eb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00047ac3  00000000  00000000  000c8aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    00198821  00000000  00000000  001105b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000043  00000000  00000000  002a8dd2  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00006318  00000000  00000000  002a8e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000062  00000000  00000000  002af130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000280 	.word	0x24000280
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d78c 	.word	0x0800d78c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000284 	.word	0x24000284
 80002dc:	0800d78c 	.word	0x0800d78c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <bsp_init_scd>:
// RAM_D2 是没有cache加速的，所以才能与DMA配合使用
uint8_t scd_rev_2buffer[2][USART_REV_BUFF_SIZE] __attribute__((section(".RAM_D2")));
uint8_t scd_send_2buffer[2][USART_SEND_BUFF_SIZE] __attribute__((section(".RAM_D2")));

void bsp_init_scd()
{
 80006ac:	b538      	push	{r3, r4, r5, lr}
    // uart debug output
    scd_init_1();
 80006ae:	f001 fb6d 	bl	8001d8c <scd_init_1>

    // fill the send buffer
    for (int j = 0; j < 2; j++)
 80006b2:	2500      	movs	r5, #0
 80006b4:	e00a      	b.n	80006cc <bsp_init_scd+0x20>
    {
        for (int i = 0; i < USART_SEND_BUFF_SIZE; i++)
        {
            scd_send_2buffer[j][i] = scd_send1Byte(&scd_1);
 80006b6:	482d      	ldr	r0, [pc, #180]	@ (800076c <bsp_init_scd+0xc0>)
 80006b8:	f001 fb24 	bl	8001d04 <scd_send1Byte>
 80006bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000770 <bsp_init_scd+0xc4>)
 80006be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80006c2:	5518      	strb	r0, [r3, r4]
        for (int i = 0; i < USART_SEND_BUFF_SIZE; i++)
 80006c4:	3401      	adds	r4, #1
 80006c6:	2c07      	cmp	r4, #7
 80006c8:	ddf5      	ble.n	80006b6 <bsp_init_scd+0xa>
    for (int j = 0; j < 2; j++)
 80006ca:	3501      	adds	r5, #1
 80006cc:	2d01      	cmp	r5, #1
 80006ce:	dc01      	bgt.n	80006d4 <bsp_init_scd+0x28>
        for (int i = 0; i < USART_SEND_BUFF_SIZE; i++)
 80006d0:	2400      	movs	r4, #0
 80006d2:	e7f8      	b.n	80006c6 <bsp_init_scd+0x1a>
  */
__STATIC_INLINE void LL_DMA_EnableDoubleBufferMode(const DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DBM);
 80006d4:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <bsp_init_scd+0xc8>)
 80006d6:	691a      	ldr	r2, [r3, #16]
 80006d8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80006dc:	611a      	str	r2, [r3, #16]
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 80006de:	4a26      	ldr	r2, [pc, #152]	@ (8000778 <bsp_init_scd+0xcc>)
 80006e0:	619a      	str	r2, [r3, #24]
    }

    // rev 2 buff dma config
    LL_DMA_EnableDoubleBufferMode(DMA1, LL_DMA_STREAM_0);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_0, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_0, (uint32_t)scd_rev_2buffer[0]);
 80006e2:	4a26      	ldr	r2, [pc, #152]	@ (800077c <bsp_init_scd+0xd0>)
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 80006e4:	61da      	str	r2, [r3, #28]
    LL_DMA_SetMemory1Address(DMA1, LL_DMA_STREAM_0, (uint32_t)scd_rev_2buffer[1]);
 80006e6:	3204      	adds	r2, #4
  */
__STATIC_INLINE void LL_DMA_SetMemory1Address(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Address)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M1AR, DMA_SxM1AR_M1A, Address);
 80006e8:	6a19      	ldr	r1, [r3, #32]
 80006ea:	621a      	str	r2, [r3, #32]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	4924      	ldr	r1, [pc, #144]	@ (8000780 <bsp_init_scd+0xd4>)
 80006f0:	400a      	ands	r2, r1
 80006f2:	f042 0204 	orr.w	r2, r2, #4
 80006f6:	615a      	str	r2, [r3, #20]
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80006f8:	691a      	ldr	r2, [r3, #16]
 80006fa:	f042 0210 	orr.w	r2, r2, #16
 80006fe:	611a      	str	r2, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DBM);
 8000700:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000702:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8000708:	4a1e      	ldr	r2, [pc, #120]	@ (8000784 <bsp_init_scd+0xd8>)
 800070a:	631a      	str	r2, [r3, #48]	@ 0x30
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_0);

    // send 2 buff dma config
    LL_DMA_EnableDoubleBufferMode(DMA1, LL_DMA_STREAM_1);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT));
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)scd_send_2buffer[0]);
 800070c:	4a18      	ldr	r2, [pc, #96]	@ (8000770 <bsp_init_scd+0xc4>)
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
    LL_DMA_SetMemory1Address(DMA1, LL_DMA_STREAM_1, (uint32_t)scd_send_2buffer[1]);
 8000710:	3208      	adds	r2, #8
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M1AR, DMA_SxM1AR_M1A, Address);
 8000712:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8000716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000718:	400a      	ands	r2, r1
 800071a:	f042 0208 	orr.w	r2, r2, #8
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8000720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000722:	f042 0210 	orr.w	r2, r2, #16
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000728:	4a17      	ldr	r2, [pc, #92]	@ (8000788 <bsp_init_scd+0xdc>)
 800072a:	f102 0308 	add.w	r3, r2, #8
 800072e:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000736:	3208      	adds	r2, #8
 8000738:	e842 3100 	strex	r1, r3, [r2]
 800073c:	2900      	cmp	r1, #0
 800073e:	d1f3      	bne.n	8000728 <bsp_init_scd+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000740:	4a11      	ldr	r2, [pc, #68]	@ (8000788 <bsp_init_scd+0xdc>)
 8000742:	f102 0308 	add.w	r3, r2, #8
 8000746:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800074a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800074e:	3208      	adds	r2, #8
 8000750:	e842 3100 	strex	r1, r3, [r2]
 8000754:	2900      	cmp	r1, #0
 8000756:	d1f3      	bne.n	8000740 <bsp_init_scd+0x94>
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <bsp_init_scd+0xc8>)
 800075a:	691a      	ldr	r2, [r3, #16]
 800075c:	f042 0201 	orr.w	r2, r2, #1
 8000760:	611a      	str	r2, [r3, #16]
 8000762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000764:	f042 0201 	orr.w	r2, r2, #1
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28

    // enable dma stream
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_0);
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
    return;
}
 800076a:	bd38      	pop	{r3, r4, r5, pc}
 800076c:	2400053c 	.word	0x2400053c
 8000770:	30000000 	.word	0x30000000
 8000774:	40020000 	.word	0x40020000
 8000778:	40011024 	.word	0x40011024
 800077c:	30000010 	.word	0x30000010
 8000780:	ffff0000 	.word	0xffff0000
 8000784:	40011028 	.word	0x40011028
 8000788:	40011000 	.word	0x40011000

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000792:	f1c0 0c07 	rsb	ip, r0, #7
 8000796:	f1bc 0f04 	cmp.w	ip, #4
 800079a:	bf28      	it	cs
 800079c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a0:	1d03      	adds	r3, r0, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d90f      	bls.n	80007c6 <NVIC_EncodePriority+0x3a>
 80007a6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	f04f 3eff 	mov.w	lr, #4294967295
 80007ac:	fa0e f00c 	lsl.w	r0, lr, ip
 80007b0:	ea21 0100 	bic.w	r1, r1, r0
 80007b4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b6:	fa0e fe03 	lsl.w	lr, lr, r3
 80007ba:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80007be:	ea41 0002 	orr.w	r0, r1, r2
 80007c2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	2300      	movs	r3, #0
 80007c8:	e7ee      	b.n	80007a8 <NVIC_EncodePriority+0x1c>
	...

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007cc:	b530      	push	{r4, r5, lr}
 80007ce:	b083      	sub	sp, #12
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <MX_DMA_Init+0x60>)
 80007d2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80007d6:	f042 0201 	orr.w	r2, r2, #1
 80007da:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007e8:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ea:	4d11      	ldr	r5, [pc, #68]	@ (8000830 <MX_DMA_Init+0x64>)
 80007ec:	68e8      	ldr	r0, [r5, #12]
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),13, 0));
 80007ee:	2200      	movs	r2, #0
 80007f0:	210d      	movs	r1, #13
 80007f2:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80007f6:	f7ff ffc9 	bl	800078c <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	0100      	lsls	r0, r0, #4
 80007fc:	b2c0      	uxtb	r0, r0
 80007fe:	4c0d      	ldr	r4, [pc, #52]	@ (8000834 <MX_DMA_Init+0x68>)
 8000800:	f884 030b 	strb.w	r0, [r4, #779]	@ 0x30b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000804:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000808:	6023      	str	r3, [r4, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080a:	68e8      	ldr	r0, [r5, #12]
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),14, 0));
 800080c:	2200      	movs	r2, #0
 800080e:	210e      	movs	r1, #14
 8000810:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000814:	f7ff ffba 	bl	800078c <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	0100      	lsls	r0, r0, #4
 800081a:	b2c0      	uxtb	r0, r0
 800081c:	f884 030c 	strb.w	r0, [r4, #780]	@ 0x30c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000824:	6023      	str	r3, [r4, #0]
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);

}
 8000826:	b003      	add	sp, #12
 8000828:	bd30      	pop	{r4, r5, pc}
 800082a:	bf00      	nop
 800082c:	58024400 	.word	0x58024400
 8000830:	e000ed00 	.word	0xe000ed00
 8000834:	e000e100 	.word	0xe000e100

08000838 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000838:	b510      	push	{r4, lr}
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800083a:	4816      	ldr	r0, [pc, #88]	@ (8000894 <MX_ETH_Init+0x5c>)
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_ETH_Init+0x60>)
 800083e:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0xD8;
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_ETH_Init+0x64>)
 8000842:	22d8      	movs	r2, #216	@ 0xd8
 8000844:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0xBB;
 8000846:	22bb      	movs	r2, #187	@ 0xbb
 8000848:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xCE;
 800084a:	22ce      	movs	r2, #206	@ 0xce
 800084c:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x11;
 800084e:	2211      	movs	r2, #17
 8000850:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x45;
 8000852:	2245      	movs	r2, #69	@ 0x45
 8000854:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x14;
 8000856:	2214      	movs	r2, #20
 8000858:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800085a:	6043      	str	r3, [r0, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800085c:	2301      	movs	r3, #1
 800085e:	7203      	strb	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_ETH_Init+0x68>)
 8000862:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_ETH_Init+0x6c>)
 8000866:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1536;
 8000868:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800086c:	6143      	str	r3, [r0, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800086e:	f002 faf9 	bl	8002e64 <HAL_ETH_Init>
 8000872:	b958      	cbnz	r0, 800088c <MX_ETH_Init+0x54>
  {
    Error_Handler();
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000874:	4c0c      	ldr	r4, [pc, #48]	@ (80008a8 <MX_ETH_Init+0x70>)
 8000876:	2238      	movs	r2, #56	@ 0x38
 8000878:	2100      	movs	r1, #0
 800087a:	4620      	mov	r0, r4
 800087c:	f00c fa70 	bl	800cd60 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000880:	2321      	movs	r3, #33	@ 0x21
 8000882:	6023      	str	r3, [r4, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000884:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000888:	6163      	str	r3, [r4, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800088a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800088c:	f000 fa5d 	bl	8000d4a <Error_Handler>
 8000890:	e7f0      	b.n	8000874 <MX_ETH_Init+0x3c>
 8000892:	bf00      	nop
 8000894:	240002a4 	.word	0x240002a4
 8000898:	40028000 	.word	0x40028000
 800089c:	2400029c 	.word	0x2400029c
 80008a0:	240001c0 	.word	0x240001c0
 80008a4:	24000220 	.word	0x24000220
 80008a8:	24000354 	.word	0x24000354

080008ac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	b08d      	sub	sp, #52	@ 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	2300      	movs	r3, #0
 80008b2:	9307      	str	r3, [sp, #28]
 80008b4:	9308      	str	r3, [sp, #32]
 80008b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80008b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80008ba:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(ethHandle->Instance==ETH)
 80008bc:	6802      	ldr	r2, [r0, #0]
 80008be:	4b3c      	ldr	r3, [pc, #240]	@ (80009b0 <HAL_ETH_MspInit+0x104>)
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d001      	beq.n	80008c8 <HAL_ETH_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008c4:	b00d      	add	sp, #52	@ 0x34
 80008c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80008c8:	4b3a      	ldr	r3, [pc, #232]	@ (80009b4 <HAL_ETH_MspInit+0x108>)
 80008ca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80008ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80008d2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80008d6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80008da:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80008de:	9201      	str	r2, [sp, #4]
 80008e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80008e2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80008e6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80008ea:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80008ee:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80008f2:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 80008f6:	9202      	str	r2, [sp, #8]
 80008f8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80008fa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80008fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000902:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000906:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800090a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800090e:	9203      	str	r2, [sp, #12]
 8000910:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000916:	f042 0204 	orr.w	r2, r2, #4
 800091a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800091e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000922:	f002 0204 	and.w	r2, r2, #4
 8000926:	9204      	str	r2, [sp, #16]
 8000928:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800092e:	f042 0201 	orr.w	r2, r2, #1
 8000932:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000936:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800093a:	f002 0201 	and.w	r2, r2, #1
 800093e:	9205      	str	r2, [sp, #20]
 8000940:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000946:	f042 0202 	orr.w	r2, r2, #2
 800094a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	9306      	str	r3, [sp, #24]
 8000958:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800095a:	2332      	movs	r3, #50	@ 0x32
 800095c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2702      	movs	r7, #2
 8000960:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2603      	movs	r6, #3
 8000964:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000966:	240b      	movs	r4, #11
 8000968:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	a907      	add	r1, sp, #28
 800096c:	4812      	ldr	r0, [pc, #72]	@ (80009b8 <HAL_ETH_MspInit+0x10c>)
 800096e:	f002 fd63 	bl	8003438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000972:	2386      	movs	r3, #134	@ 0x86
 8000974:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2500      	movs	r5, #0
 800097a:	9509      	str	r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800097e:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	a907      	add	r1, sp, #28
 8000982:	480e      	ldr	r0, [pc, #56]	@ (80009bc <HAL_ETH_MspInit+0x110>)
 8000984:	f002 fd58 	bl	8003438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000988:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800098c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	9509      	str	r5, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	960a      	str	r6, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000994:	940b      	str	r4, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	a907      	add	r1, sp, #28
 8000998:	4809      	ldr	r0, [pc, #36]	@ (80009c0 <HAL_ETH_MspInit+0x114>)
 800099a:	f002 fd4d 	bl	8003438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 11, 0);
 800099e:	462a      	mov	r2, r5
 80009a0:	4621      	mov	r1, r4
 80009a2:	203d      	movs	r0, #61	@ 0x3d
 80009a4:	f001 ff04 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80009a8:	203d      	movs	r0, #61	@ 0x3d
 80009aa:	f001 ff11 	bl	80027d0 <HAL_NVIC_EnableIRQ>
}
 80009ae:	e789      	b.n	80008c4 <HAL_ETH_MspInit+0x18>
 80009b0:	40028000 	.word	0x40028000
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020800 	.word	0x58020800
 80009bc:	58020000 	.word	0x58020000
 80009c0:	58020400 	.word	0x58020400

080009c4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80009c4:	b508      	push	{r3, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009c6:	4814      	ldr	r0, [pc, #80]	@ (8000a18 <MX_FDCAN1_Init+0x54>)
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_FDCAN1_Init+0x58>)
 80009ca:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009cc:	2300      	movs	r3, #0
 80009ce:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009d0:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80009d2:	2201      	movs	r2, #1
 80009d4:	7402      	strb	r2, [r0, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80009d6:	7442      	strb	r2, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009d8:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80009da:	2110      	movs	r1, #16
 80009dc:	6141      	str	r1, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009de:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80009e0:	61c2      	str	r2, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80009e2:	6202      	str	r2, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009e4:	6242      	str	r2, [r0, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009e6:	6282      	str	r2, [r0, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009e8:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009ea:	6302      	str	r2, [r0, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009ec:	6343      	str	r3, [r0, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80009ee:	6383      	str	r3, [r0, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009f0:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80009f2:	6403      	str	r3, [r0, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009f4:	2204      	movs	r2, #4
 80009f6:	6442      	str	r2, [r0, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009f8:	6483      	str	r3, [r0, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009fa:	64c2      	str	r2, [r0, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009fc:	6503      	str	r3, [r0, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009fe:	6542      	str	r2, [r0, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a00:	6583      	str	r3, [r0, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a02:	65c3      	str	r3, [r0, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000a04:	6603      	str	r3, [r0, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a06:	6643      	str	r3, [r0, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a08:	6682      	str	r2, [r0, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a0a:	f002 fbcb 	bl	80031a4 <HAL_FDCAN_Init>
 8000a0e:	b900      	cbnz	r0, 8000a12 <MX_FDCAN1_Init+0x4e>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a10:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a12:	f000 f99a 	bl	8000d4a <Error_Handler>
}
 8000a16:	e7fb      	b.n	8000a10 <MX_FDCAN1_Init+0x4c>
 8000a18:	2400038c 	.word	0x2400038c
 8000a1c:	4000a000 	.word	0x4000a000

08000a20 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000a20:	b510      	push	{r4, lr}
 8000a22:	b0b8      	sub	sp, #224	@ 0xe0
 8000a24:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	2100      	movs	r1, #0
 8000a28:	9133      	str	r1, [sp, #204]	@ 0xcc
 8000a2a:	9134      	str	r1, [sp, #208]	@ 0xd0
 8000a2c:	9135      	str	r1, [sp, #212]	@ 0xd4
 8000a2e:	9136      	str	r1, [sp, #216]	@ 0xd8
 8000a30:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a32:	22c0      	movs	r2, #192	@ 0xc0
 8000a34:	a802      	add	r0, sp, #8
 8000a36:	f00c f993 	bl	800cd60 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000a3a:	6822      	ldr	r2, [r4, #0]
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <HAL_FDCAN_MspInit+0x98>)
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d001      	beq.n	8000a46 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000a42:	b038      	add	sp, #224	@ 0xe0
 8000a44:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a46:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000a50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a54:	931e      	str	r3, [sp, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a56:	a802      	add	r0, sp, #8
 8000a58:	f005 fc9e 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	bb40      	cbnz	r0, 8000ab0 <HAL_FDCAN_MspInit+0x90>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <HAL_FDCAN_MspInit+0x9c>)
 8000a60:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8000a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a68:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8000a6c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8000a70:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a7c:	f042 0202 	orr.w	r2, r2, #2
 8000a80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	9301      	str	r3, [sp, #4]
 8000a8e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a94:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000aa2:	2309      	movs	r3, #9
 8000aa4:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	a933      	add	r1, sp, #204	@ 0xcc
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <HAL_FDCAN_MspInit+0xa0>)
 8000aaa:	f002 fcc5 	bl	8003438 <HAL_GPIO_Init>
}
 8000aae:	e7c8      	b.n	8000a42 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 8000ab0:	f000 f94b 	bl	8000d4a <Error_Handler>
 8000ab4:	e7d3      	b.n	8000a5e <HAL_FDCAN_MspInit+0x3e>
 8000ab6:	bf00      	nop
 8000ab8:	4000a000 	.word	0x4000a000
 8000abc:	58024400 	.word	0x58024400
 8000ac0:	58020400 	.word	0x58020400

08000ac4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	b08c      	sub	sp, #48	@ 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	2500      	movs	r5, #0
 8000acc:	9507      	str	r5, [sp, #28]
 8000ace:	9508      	str	r5, [sp, #32]
 8000ad0:	9509      	str	r5, [sp, #36]	@ 0x24
 8000ad2:	950a      	str	r5, [sp, #40]	@ 0x28
 8000ad4:	950b      	str	r5, [sp, #44]	@ 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8000c8c <MX_GPIO_Init+0x1c8>)
 8000ad8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000adc:	f042 0210 	orr.w	r2, r2, #16
 8000ae0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ae4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ae8:	f002 0210 	and.w	r2, r2, #16
 8000aec:	9201      	str	r2, [sp, #4]
 8000aee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000af4:	f042 0204 	orr.w	r2, r2, #4
 8000af8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000afc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b00:	f002 0204 	and.w	r2, r2, #4
 8000b04:	9202      	str	r2, [sp, #8]
 8000b06:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b18:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000b1c:	9203      	str	r2, [sp, #12]
 8000b1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b24:	f042 0201 	orr.w	r2, r2, #1
 8000b28:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b30:	f002 0201 	and.w	r2, r2, #1
 8000b34:	9204      	str	r2, [sp, #16]
 8000b36:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b3c:	f042 0202 	orr.w	r2, r2, #2
 8000b40:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b48:	f002 0202 	and.w	r2, r2, #2
 8000b4c:	9205      	str	r2, [sp, #20]
 8000b4e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b54:	f042 0208 	orr.w	r2, r2, #8
 8000b58:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	9306      	str	r3, [sp, #24]
 8000b66:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8000b68:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 8000c98 <MX_GPIO_Init+0x1d4>
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2120      	movs	r1, #32
 8000b70:	4650      	mov	r0, sl
 8000b72:	f002 fd71 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8000b76:	4f46      	ldr	r7, [pc, #280]	@ (8000c90 <MX_GPIO_Init+0x1cc>)
 8000b78:	462a      	mov	r2, r5
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4638      	mov	r0, r7
 8000b7e:	f002 fd6b 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_SET);
 8000b82:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 8000c9c <MX_GPIO_Init+0x1d8>
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000b8c:	4640      	mov	r0, r8
 8000b8e:	f002 fd63 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b92:	462a      	mov	r2, r5
 8000b94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b98:	4640      	mov	r0, r8
 8000b9a:	f002 fd5d 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_SCL_GPIO_Port, EEPROM_SCL_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba4:	4638      	mov	r0, r7
 8000ba6:	f002 fd57 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8000baa:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8000ca0 <MX_GPIO_Init+0x1dc>
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4648      	mov	r0, r9
 8000bb4:	f002 fd50 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE7 PE8 PE15 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000bb8:	f248 13fb 	movw	r3, #33275	@ 0x81fb
 8000bbc:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	2603      	movs	r6, #3
 8000bc0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc4:	a907      	add	r1, sp, #28
 8000bc6:	4640      	mov	r0, r8
 8000bc8:	f002 fc36 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC3
                           PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3
 8000bcc:	f242 03cd 	movw	r3, #8397	@ 0x20cd
 8000bd0:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	a907      	add	r1, sp, #28
 8000bd8:	482e      	ldr	r0, [pc, #184]	@ (8000c94 <MX_GPIO_Init+0x1d0>)
 8000bda:	f002 fc2d 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA6
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8000bde:	f248 1359 	movw	r3, #33113	@ 0x8159
 8000be2:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	a907      	add	r1, sp, #28
 8000bea:	4650      	mov	r0, sl
 8000bec:	f002 fc24 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_RST_Pin */
  GPIO_InitStruct.Pin = ETH_RST_Pin;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2401      	movs	r4, #1
 8000bf6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bfa:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(ETH_RST_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	a907      	add	r1, sp, #28
 8000bfe:	4650      	mov	r0, sl
 8000c00:	f002 fc1a 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_0_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin;
 8000c04:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c0a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	a907      	add	r1, sp, #28
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f002 fc12 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000c14:	2382      	movs	r3, #130	@ 0x82
 8000c16:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c18:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	a907      	add	r1, sp, #28
 8000c1e:	4638      	mov	r0, r7
 8000c20:	f002 fc0a 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin;
 8000c24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c28:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c2e:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c30:	a907      	add	r1, sp, #28
 8000c32:	4640      	mov	r0, r8
 8000c34:	f002 fc00 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c42:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	a907      	add	r1, sp, #28
 8000c46:	4640      	mov	r0, r8
 8000c48:	f002 fbf6 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_SCL_Pin */
  GPIO_InitStruct.Pin = EEPROM_SCL_Pin;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c50:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c56:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c58:	a907      	add	r1, sp, #28
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	f002 fbec 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD14
                           PD15 PD0 PD1 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000c60:	f24c 7393 	movw	r3, #51091	@ 0xc793
 8000c64:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6a:	a907      	add	r1, sp, #28
 8000c6c:	4648      	mov	r0, r9
 8000c6e:	f002 fbe3 	bl	8003438 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000c72:	2308      	movs	r3, #8
 8000c74:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c78:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c7a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	a907      	add	r1, sp, #28
 8000c7e:	4648      	mov	r0, r9
 8000c80:	f002 fbda 	bl	8003438 <HAL_GPIO_Init>

}
 8000c84:	b00c      	add	sp, #48	@ 0x30
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	bf00      	nop
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020400 	.word	0x58020400
 8000c94:	58020800 	.word	0x58020800
 8000c98:	58020000 	.word	0x58020000
 8000c9c:	58021000 	.word	0x58021000
 8000ca0:	58020c00 	.word	0x58020c00

08000ca4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ca8:	2400      	movs	r4, #0
 8000caa:	9400      	str	r4, [sp, #0]
 8000cac:	9401      	str	r4, [sp, #4]
 8000cae:	9402      	str	r4, [sp, #8]
 8000cb0:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cb2:	f001 fda5 	bl	8002800 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cb6:	2501      	movs	r5, #1
 8000cb8:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cbc:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cc0:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cc2:	231f      	movs	r3, #31
 8000cc4:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000cc8:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ccc:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000cd0:	2603      	movs	r6, #3
 8000cd2:	f88d 600b 	strb.w	r6, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000cd6:	f88d 400c 	strb.w	r4, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cda:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cde:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ce2:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ce6:	4668      	mov	r0, sp
 8000ce8:	f001 fda8 	bl	800283c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000cec:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000cf0:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000cf4:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000cf6:	2312      	movs	r3, #18
 8000cf8:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000cfc:	f88d 500a 	strb.w	r5, [sp, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d00:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d04:	f88d 500e 	strb.w	r5, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d08:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d0c:	4668      	mov	r0, sp
 8000d0e:	f001 fd95 	bl	800283c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000d18:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000d1c:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000d1e:	2317      	movs	r3, #23
 8000d20:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d24:	4668      	mov	r0, sp
 8000d26:	f001 fd89 	bl	800283c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000d2a:	f88d 6001 	strb.w	r6, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x8000000;
 8000d2e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d32:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000d34:	2310      	movs	r3, #16
 8000d36:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d3a:	4668      	mov	r0, sp
 8000d3c:	f001 fd7e 	bl	800283c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d40:	2004      	movs	r0, #4
 8000d42:	f001 fd6b 	bl	800281c <HAL_MPU_Enable>

}
 8000d46:	b004      	add	sp, #16
 8000d48:	bd70      	pop	{r4, r5, r6, pc}

08000d4a <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x2>
	...

08000d50 <SystemClock_Config>:
{
 8000d50:	b500      	push	{lr}
 8000d52:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d54:	224c      	movs	r2, #76	@ 0x4c
 8000d56:	2100      	movs	r1, #0
 8000d58:	a809      	add	r0, sp, #36	@ 0x24
 8000d5a:	f00c f801 	bl	800cd60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5e:	2220      	movs	r2, #32
 8000d60:	2100      	movs	r1, #0
 8000d62:	a801      	add	r0, sp, #4
 8000d64:	f00b fffc 	bl	800cd60 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f004 fb55 	bl	8005418 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6e:	2300      	movs	r3, #0
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <SystemClock_Config+0xc0>)
 8000d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <SystemClock_Config+0xc4>)
 8000d86:	699a      	ldr	r2, [r3, #24]
 8000d88:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000d8c:	619a      	str	r2, [r3, #24]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d98:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <SystemClock_Config+0xc4>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000da0:	d0fa      	beq.n	8000d98 <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000da2:	2322      	movs	r3, #34	@ 0x22
 8000da4:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2240      	movs	r2, #64	@ 0x40
 8000dac:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dae:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2202      	movs	r2, #2
 8000db2:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db8:	2104      	movs	r1, #4
 8000dba:	9114      	str	r1, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000dbc:	2132      	movs	r1, #50	@ 0x32
 8000dbe:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dc0:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc6:	9218      	str	r2, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dc8:	220c      	movs	r2, #12
 8000dca:	9219      	str	r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dcc:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dce:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	a809      	add	r0, sp, #36	@ 0x24
 8000dd2:	f004 fbf5 	bl	80055c0 <HAL_RCC_OscConfig>
 8000dd6:	b9b0      	cbnz	r0, 8000e06 <SystemClock_Config+0xb6>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	233f      	movs	r3, #63	@ 0x3f
 8000dda:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000de4:	2308      	movs	r3, #8
 8000de6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000de8:	2340      	movs	r3, #64	@ 0x40
 8000dea:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dec:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000df2:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000df4:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	2102      	movs	r1, #2
 8000df8:	a801      	add	r0, sp, #4
 8000dfa:	f005 f835 	bl	8005e68 <HAL_RCC_ClockConfig>
 8000dfe:	b920      	cbnz	r0, 8000e0a <SystemClock_Config+0xba>
}
 8000e00:	b01d      	add	sp, #116	@ 0x74
 8000e02:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e06:	f7ff ffa0 	bl	8000d4a <Error_Handler>
    Error_Handler();
 8000e0a:	f7ff ff9e 	bl	8000d4a <Error_Handler>
 8000e0e:	bf00      	nop
 8000e10:	58000400 	.word	0x58000400
 8000e14:	58024800 	.word	0x58024800

08000e18 <main>:
{
 8000e18:	b508      	push	{r3, lr}
  MPU_Config();
 8000e1a:	f7ff ff43 	bl	8000ca4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f0c <main+0xf4>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e26:	d113      	bne.n	8000e50 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e2c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e30:	4b36      	ldr	r3, [pc, #216]	@ (8000f0c <main+0xf4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e3c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e40:	695a      	ldr	r2, [r3, #20]
 8000e42:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000e46:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e4c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e50:	4b2e      	ldr	r3, [pc, #184]	@ (8000f0c <main+0xf4>)
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000e58:	d127      	bne.n	8000eaa <main+0x92>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <main+0xf4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e62:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e66:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e6a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000e6e:	e000      	b.n	8000e72 <main+0x5a>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000e70:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e72:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e76:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000e7a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000e7e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000e82:	4922      	ldr	r1, [pc, #136]	@ (8000f0c <main+0xf4>)
 8000e84:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8000e88:	4613      	mov	r3, r2
 8000e8a:	3a01      	subs	r2, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f2      	bne.n	8000e76 <main+0x5e>
    } while(sets-- != 0U);
 8000e90:	1e43      	subs	r3, r0, #1
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d1ec      	bne.n	8000e70 <main+0x58>
 8000e96:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e9a:	694b      	ldr	r3, [r1, #20]
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea0:	614b      	str	r3, [r1, #20]
 8000ea2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ea6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000eaa:	f001 fbcb 	bl	8002644 <HAL_Init>
  SystemClock_Config();
 8000eae:	f7ff ff4f 	bl	8000d50 <SystemClock_Config>
  MX_GPIO_Init();
 8000eb2:	f7ff fe07 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb6:	f7ff fc89 	bl	80007cc <MX_DMA_Init>
  MX_QUADSPI_Init();
 8000eba:	f000 f82d 	bl	8000f18 <MX_QUADSPI_Init>
  MX_RAMECC_Init();
 8000ebe:	f000 f8d5 	bl	800106c <MX_RAMECC_Init>
  MX_SPI1_Init();
 8000ec2:	f000 ffab 	bl	8001e1c <MX_SPI1_Init>
  MX_SPI4_Init();
 8000ec6:	f000 ffd5 	bl	8001e74 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000eca:	f001 f9eb 	bl	80022a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ece:	f001 fad5 	bl	800247c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ed2:	f00b f8d9 	bl	800c088 <MX_USB_DEVICE_Init>
  MX_USB_HOST_Init();
 8000ed6:	f00b fb13 	bl	800c500 <MX_USB_HOST_Init>
  MX_FDCAN1_Init();
 8000eda:	f7ff fd73 	bl	80009c4 <MX_FDCAN1_Init>
  MX_ETH_Init();
 8000ede:	f7ff fcab 	bl	8000838 <MX_ETH_Init>
  bsp_init_scd();
 8000ee2:	f7ff fbe3 	bl	80006ac <bsp_init_scd>
  HAL_Delay(1);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f001 fbec 	bl	80026c4 <HAL_Delay>
  printf("init fin!\n");
 8000eec:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <main+0xf8>)
 8000eee:	f00b fe57 	bl	800cba0 <puts>
    printf("%d\n", HAL_GetTick());
 8000ef2:	f001 fbe1 	bl	80026b8 <HAL_GetTick>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <main+0xfc>)
 8000efa:	f00b fde1 	bl	800cac0 <iprintf>
    LL_mDelay(200);
 8000efe:	20c8      	movs	r0, #200	@ 0xc8
 8000f00:	f008 fcc9 	bl	8009896 <LL_mDelay>
    MX_USB_HOST_Process();
 8000f04:	f00b fb1c 	bl	800c540 <MX_USB_HOST_Process>
  while (1)
 8000f08:	e7f3      	b.n	8000ef2 <main+0xda>
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	0800d7f0 	.word	0x0800d7f0
 8000f14:	0800d7fc 	.word	0x0800d7fc

08000f18 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000f18:	b508      	push	{r3, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000f1a:	480a      	ldr	r0, [pc, #40]	@ (8000f44 <MX_QUADSPI_Init+0x2c>)
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <MX_QUADSPI_Init+0x30>)
 8000f1e:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000f20:	23ff      	movs	r3, #255	@ 0xff
 8000f22:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f24:	2201      	movs	r2, #1
 8000f26:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8000f2c:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f2e:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f30:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f32:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f34:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f36:	f004 facd 	bl	80054d4 <HAL_QSPI_Init>
 8000f3a:	b900      	cbnz	r0, 8000f3e <MX_QUADSPI_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f3c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f3e:	f7ff ff04 	bl	8000d4a <Error_Handler>
}
 8000f42:	e7fb      	b.n	8000f3c <MX_QUADSPI_Init+0x24>
 8000f44:	2400042c 	.word	0x2400042c
 8000f48:	52005000 	.word	0x52005000

08000f4c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f50:	b0ba      	sub	sp, #232	@ 0xe8
 8000f52:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	2100      	movs	r1, #0
 8000f56:	9135      	str	r1, [sp, #212]	@ 0xd4
 8000f58:	9136      	str	r1, [sp, #216]	@ 0xd8
 8000f5a:	9137      	str	r1, [sp, #220]	@ 0xdc
 8000f5c:	9138      	str	r1, [sp, #224]	@ 0xe0
 8000f5e:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	22c0      	movs	r2, #192	@ 0xc0
 8000f62:	a804      	add	r0, sp, #16
 8000f64:	f00b fefc 	bl	800cd60 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000f68:	6822      	ldr	r2, [r4, #0]
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001058 <HAL_QSPI_MspInit+0x10c>)
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d002      	beq.n	8000f76 <HAL_QSPI_MspInit+0x2a>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000f70:	b03a      	add	sp, #232	@ 0xe8
 8000f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000f76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f80:	a804      	add	r0, sp, #16
 8000f82:	f005 fa09 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d163      	bne.n	8001052 <HAL_QSPI_MspInit+0x106>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f8a:	4b34      	ldr	r3, [pc, #208]	@ (800105c <HAL_QSPI_MspInit+0x110>)
 8000f8c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000f90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f94:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8000f98:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000f9c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000fa0:	9200      	str	r2, [sp, #0]
 8000fa2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fa8:	f042 0210 	orr.w	r2, r2, #16
 8000fac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fb4:	f002 0210 	and.w	r2, r2, #16
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fc0:	f042 0202 	orr.w	r2, r2, #2
 8000fc4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fcc:	f002 0202 	and.w	r2, r2, #2
 8000fd0:	9202      	str	r2, [sp, #8]
 8000fd2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fd8:	f042 0208 	orr.w	r2, r2, #8
 8000fdc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	9303      	str	r3, [sp, #12]
 8000fea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fec:	f04f 0804 	mov.w	r8, #4
 8000ff0:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2602      	movs	r6, #2
 8000ff6:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2403      	movs	r4, #3
 8000ffe:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001000:	2709      	movs	r7, #9
 8001002:	9739      	str	r7, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001004:	a935      	add	r1, sp, #212	@ 0xd4
 8001006:	4816      	ldr	r0, [pc, #88]	@ (8001060 <HAL_QSPI_MspInit+0x114>)
 8001008:	f002 fa16 	bl	8003438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800100c:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001016:	9739      	str	r7, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8001068 <HAL_QSPI_MspInit+0x11c>
 800101c:	a935      	add	r1, sp, #212	@ 0xd4
 800101e:	4640      	mov	r0, r8
 8001020:	f002 fa0a 	bl	8003438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001024:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001028:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001030:	9739      	str	r7, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001032:	a935      	add	r1, sp, #212	@ 0xd4
 8001034:	480b      	ldr	r0, [pc, #44]	@ (8001064 <HAL_QSPI_MspInit+0x118>)
 8001036:	f002 f9ff 	bl	8003438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800103a:	2340      	movs	r3, #64	@ 0x40
 800103c:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	9438      	str	r4, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001044:	230a      	movs	r3, #10
 8001046:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	a935      	add	r1, sp, #212	@ 0xd4
 800104a:	4640      	mov	r0, r8
 800104c:	f002 f9f4 	bl	8003438 <HAL_GPIO_Init>
}
 8001050:	e78e      	b.n	8000f70 <HAL_QSPI_MspInit+0x24>
      Error_Handler();
 8001052:	f7ff fe7a 	bl	8000d4a <Error_Handler>
 8001056:	e798      	b.n	8000f8a <HAL_QSPI_MspInit+0x3e>
 8001058:	52005000 	.word	0x52005000
 800105c:	58024400 	.word	0x58024400
 8001060:	58021000 	.word	0x58021000
 8001064:	58020c00 	.word	0x58020c00
 8001068:	58020400 	.word	0x58020400

0800106c <MX_RAMECC_Init>:
RAMECC_HandleTypeDef hramecc3_m1;
RAMECC_HandleTypeDef hramecc3_m2;

/* RAMECC init function */
void MX_RAMECC_Init(void)
{
 800106c:	b508      	push	{r3, lr}

  /* USER CODE END RAMECC_Init 1 */

  /** Initialize RAMECC1 M1 : AXI SRAM
  */
  hramecc1_m1.Instance = RAMECC1_Monitor1;
 800106e:	4839      	ldr	r0, [pc, #228]	@ (8001154 <MX_RAMECC_Init+0xe8>)
 8001070:	4b39      	ldr	r3, [pc, #228]	@ (8001158 <MX_RAMECC_Init+0xec>)
 8001072:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc1_m1) != HAL_OK)
 8001074:	f004 fa82 	bl	800557c <HAL_RAMECC_Init>
 8001078:	2800      	cmp	r0, #0
 800107a:	d147      	bne.n	800110c <MX_RAMECC_Init+0xa0>
    Error_Handler();
  }

  /** Initialize RAMECC1 M2 : ITCM-RAM
  */
  hramecc1_m2.Instance = RAMECC1_Monitor2;
 800107c:	4837      	ldr	r0, [pc, #220]	@ (800115c <MX_RAMECC_Init+0xf0>)
 800107e:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <MX_RAMECC_Init+0xf4>)
 8001080:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc1_m2) != HAL_OK)
 8001082:	f004 fa7b 	bl	800557c <HAL_RAMECC_Init>
 8001086:	2800      	cmp	r0, #0
 8001088:	d143      	bne.n	8001112 <MX_RAMECC_Init+0xa6>
    Error_Handler();
  }

  /** Initialize RAMECC1 M3 : D0TCM-RAM
  */
  hramecc1_m3.Instance = RAMECC1_Monitor3;
 800108a:	4836      	ldr	r0, [pc, #216]	@ (8001164 <MX_RAMECC_Init+0xf8>)
 800108c:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <MX_RAMECC_Init+0xfc>)
 800108e:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc1_m3) != HAL_OK)
 8001090:	f004 fa74 	bl	800557c <HAL_RAMECC_Init>
 8001094:	2800      	cmp	r0, #0
 8001096:	d13f      	bne.n	8001118 <MX_RAMECC_Init+0xac>
    Error_Handler();
  }

  /** Initialize RAMECC1 M4 : D1TCM-RAM
  */
  hramecc1_m4.Instance = RAMECC1_Monitor4;
 8001098:	4834      	ldr	r0, [pc, #208]	@ (800116c <MX_RAMECC_Init+0x100>)
 800109a:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <MX_RAMECC_Init+0x104>)
 800109c:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc1_m4) != HAL_OK)
 800109e:	f004 fa6d 	bl	800557c <HAL_RAMECC_Init>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d13b      	bne.n	800111e <MX_RAMECC_Init+0xb2>
    Error_Handler();
  }

  /** Initialize RAMECC1 M5 : ETM RAM
  */
  hramecc1_m5.Instance = RAMECC1_Monitor5;
 80010a6:	4833      	ldr	r0, [pc, #204]	@ (8001174 <MX_RAMECC_Init+0x108>)
 80010a8:	4b33      	ldr	r3, [pc, #204]	@ (8001178 <MX_RAMECC_Init+0x10c>)
 80010aa:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc1_m5) != HAL_OK)
 80010ac:	f004 fa66 	bl	800557c <HAL_RAMECC_Init>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d137      	bne.n	8001124 <MX_RAMECC_Init+0xb8>
    Error_Handler();
  }

  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 80010b4:	4831      	ldr	r0, [pc, #196]	@ (800117c <MX_RAMECC_Init+0x110>)
 80010b6:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <MX_RAMECC_Init+0x114>)
 80010b8:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 80010ba:	f004 fa5f 	bl	800557c <HAL_RAMECC_Init>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d133      	bne.n	800112a <MX_RAMECC_Init+0xbe>
    Error_Handler();
  }

  /** Initialize RAMECC2 M2 SRAM1_1
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 80010c2:	4830      	ldr	r0, [pc, #192]	@ (8001184 <MX_RAMECC_Init+0x118>)
 80010c4:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <MX_RAMECC_Init+0x11c>)
 80010c6:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 80010c8:	f004 fa58 	bl	800557c <HAL_RAMECC_Init>
 80010cc:	bb80      	cbnz	r0, 8001130 <MX_RAMECC_Init+0xc4>
    Error_Handler();
  }

  /** Initialize RAMECC2 M3 : SRAM2_0
  */
  hramecc2_m3.Instance = RAMECC2_Monitor3;
 80010ce:	482f      	ldr	r0, [pc, #188]	@ (800118c <MX_RAMECC_Init+0x120>)
 80010d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <MX_RAMECC_Init+0x124>)
 80010d2:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc2_m3) != HAL_OK)
 80010d4:	f004 fa52 	bl	800557c <HAL_RAMECC_Init>
 80010d8:	bb68      	cbnz	r0, 8001136 <MX_RAMECC_Init+0xca>
    Error_Handler();
  }

  /** Initialize RAMECC2 M4 : SRAM2_1
  */
  hramecc2_m4.Instance = RAMECC2_Monitor4;
 80010da:	482e      	ldr	r0, [pc, #184]	@ (8001194 <MX_RAMECC_Init+0x128>)
 80010dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001198 <MX_RAMECC_Init+0x12c>)
 80010de:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc2_m4) != HAL_OK)
 80010e0:	f004 fa4c 	bl	800557c <HAL_RAMECC_Init>
 80010e4:	bb50      	cbnz	r0, 800113c <MX_RAMECC_Init+0xd0>
    Error_Handler();
  }

  /** Initialize RAMECC2 M5 : SRAM3
  */
  hramecc2_m5.Instance = RAMECC2_Monitor5;
 80010e6:	482d      	ldr	r0, [pc, #180]	@ (800119c <MX_RAMECC_Init+0x130>)
 80010e8:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <MX_RAMECC_Init+0x134>)
 80010ea:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc2_m5) != HAL_OK)
 80010ec:	f004 fa46 	bl	800557c <HAL_RAMECC_Init>
 80010f0:	bb38      	cbnz	r0, 8001142 <MX_RAMECC_Init+0xd6>
    Error_Handler();
  }

  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 80010f2:	482c      	ldr	r0, [pc, #176]	@ (80011a4 <MX_RAMECC_Init+0x138>)
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <MX_RAMECC_Init+0x13c>)
 80010f6:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 80010f8:	f004 fa40 	bl	800557c <HAL_RAMECC_Init>
 80010fc:	bb20      	cbnz	r0, 8001148 <MX_RAMECC_Init+0xdc>
    Error_Handler();
  }

  /** Initialize RAMECC3 M2 : Backup RAM
  */
  hramecc3_m2.Instance = RAMECC3_Monitor2;
 80010fe:	482b      	ldr	r0, [pc, #172]	@ (80011ac <MX_RAMECC_Init+0x140>)
 8001100:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <MX_RAMECC_Init+0x144>)
 8001102:	6003      	str	r3, [r0, #0]
  if (HAL_RAMECC_Init(&hramecc3_m2) != HAL_OK)
 8001104:	f004 fa3a 	bl	800557c <HAL_RAMECC_Init>
 8001108:	bb08      	cbnz	r0, 800114e <MX_RAMECC_Init+0xe2>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */

  /* USER CODE END RAMECC_Init 2 */

}
 800110a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800110c:	f7ff fe1d 	bl	8000d4a <Error_Handler>
 8001110:	e7b4      	b.n	800107c <MX_RAMECC_Init+0x10>
    Error_Handler();
 8001112:	f7ff fe1a 	bl	8000d4a <Error_Handler>
 8001116:	e7b8      	b.n	800108a <MX_RAMECC_Init+0x1e>
    Error_Handler();
 8001118:	f7ff fe17 	bl	8000d4a <Error_Handler>
 800111c:	e7bc      	b.n	8001098 <MX_RAMECC_Init+0x2c>
    Error_Handler();
 800111e:	f7ff fe14 	bl	8000d4a <Error_Handler>
 8001122:	e7c0      	b.n	80010a6 <MX_RAMECC_Init+0x3a>
    Error_Handler();
 8001124:	f7ff fe11 	bl	8000d4a <Error_Handler>
 8001128:	e7c4      	b.n	80010b4 <MX_RAMECC_Init+0x48>
    Error_Handler();
 800112a:	f7ff fe0e 	bl	8000d4a <Error_Handler>
 800112e:	e7c8      	b.n	80010c2 <MX_RAMECC_Init+0x56>
    Error_Handler();
 8001130:	f7ff fe0b 	bl	8000d4a <Error_Handler>
 8001134:	e7cb      	b.n	80010ce <MX_RAMECC_Init+0x62>
    Error_Handler();
 8001136:	f7ff fe08 	bl	8000d4a <Error_Handler>
 800113a:	e7ce      	b.n	80010da <MX_RAMECC_Init+0x6e>
    Error_Handler();
 800113c:	f7ff fe05 	bl	8000d4a <Error_Handler>
 8001140:	e7d1      	b.n	80010e6 <MX_RAMECC_Init+0x7a>
    Error_Handler();
 8001142:	f7ff fe02 	bl	8000d4a <Error_Handler>
 8001146:	e7d4      	b.n	80010f2 <MX_RAMECC_Init+0x86>
    Error_Handler();
 8001148:	f7ff fdff 	bl	8000d4a <Error_Handler>
 800114c:	e7d7      	b.n	80010fe <MX_RAMECC_Init+0x92>
    Error_Handler();
 800114e:	f7ff fdfc 	bl	8000d4a <Error_Handler>
}
 8001152:	e7da      	b.n	800110a <MX_RAMECC_Init+0x9e>
 8001154:	24000528 	.word	0x24000528
 8001158:	52009020 	.word	0x52009020
 800115c:	24000518 	.word	0x24000518
 8001160:	52009040 	.word	0x52009040
 8001164:	24000508 	.word	0x24000508
 8001168:	52009060 	.word	0x52009060
 800116c:	240004f8 	.word	0x240004f8
 8001170:	52009080 	.word	0x52009080
 8001174:	240004e8 	.word	0x240004e8
 8001178:	520090a0 	.word	0x520090a0
 800117c:	240004d8 	.word	0x240004d8
 8001180:	48023020 	.word	0x48023020
 8001184:	240004c8 	.word	0x240004c8
 8001188:	48023040 	.word	0x48023040
 800118c:	240004b8 	.word	0x240004b8
 8001190:	48023060 	.word	0x48023060
 8001194:	240004a8 	.word	0x240004a8
 8001198:	48023080 	.word	0x48023080
 800119c:	24000498 	.word	0x24000498
 80011a0:	480230a0 	.word	0x480230a0
 80011a4:	24000488 	.word	0x24000488
 80011a8:	58027020 	.word	0x58027020
 80011ac:	24000478 	.word	0x24000478
 80011b0:	58027040 	.word	0x58027040

080011b4 <_cz_strtoxl>:
/* istrtoxl */
#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(_cz_strtoxl, MEM_MACRO);
#endif
static uint32_t _cz_strtoxl(const char* nptr, const char** endptr, int ibase, int flags)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	4605      	mov	r5, r0
    uint32_t digval;
    uint32_t maxval;
    uint32_t limit;
    uint32_t maxu32;

    if (endptr != NULL)
 80011b8:	460e      	mov	r6, r1
 80011ba:	b101      	cbz	r1, 80011be <_cz_strtoxl+0xa>
        *endptr = nptr;
 80011bc:	6030      	str	r0, [r6, #0]

    p = nptr;
    number = 0;

    c = *p++;
 80011be:	4629      	mov	r1, r5
 80011c0:	f811 cb01 	ldrb.w	ip, [r1], #1
    while (cz_isspace((int)(unsigned char)c))
 80011c4:	e001      	b.n	80011ca <_cz_strtoxl+0x16>
        c = *p++;
 80011c6:	f811 cb01 	ldrb.w	ip, [r1], #1
    while (cz_isspace((int)(unsigned char)c))
 80011ca:	485e      	ldr	r0, [pc, #376]	@ (8001344 <_cz_strtoxl+0x190>)
 80011cc:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 80011d0:	f010 0008 	ands.w	r0, r0, #8
 80011d4:	d1f7      	bne.n	80011c6 <_cz_strtoxl+0x12>

    if (c == '+')
 80011d6:	f1bc 0f2b 	cmp.w	ip, #43	@ 0x2b
 80011da:	d014      	beq.n	8001206 <_cz_strtoxl+0x52>
        c = *p++;
    if (c == '-')
 80011dc:	f1bc 0f2d 	cmp.w	ip, #45	@ 0x2d
 80011e0:	d014      	beq.n	800120c <_cz_strtoxl+0x58>
    {
        flags |= IFL_NEG;
        c = *p++;
    }

    if (c == '+')
 80011e2:	f1bc 0f2b 	cmp.w	ip, #43	@ 0x2b
 80011e6:	d016      	beq.n	8001216 <_cz_strtoxl+0x62>
        c = *p++;

    if (ibase < 0 || ibase == 1 || ibase > 36)
 80011e8:	2a01      	cmp	r2, #1
 80011ea:	bf14      	ite	ne
 80011ec:	2400      	movne	r4, #0
 80011ee:	2401      	moveq	r4, #1
 80011f0:	ea54 74d2 	orrs.w	r4, r4, r2, lsr #31
 80011f4:	d112      	bne.n	800121c <_cz_strtoxl+0x68>
 80011f6:	2a24      	cmp	r2, #36	@ 0x24
 80011f8:	dc10      	bgt.n	800121c <_cz_strtoxl+0x68>
        if (endptr)
            *endptr = nptr;
        return 0;
    }

    if (ibase == 0)
 80011fa:	bb02      	cbnz	r2, 800123e <_cz_strtoxl+0x8a>
    {
        if (c != '0')
 80011fc:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8001200:	d00f      	beq.n	8001222 <_cz_strtoxl+0x6e>
            ibase = 10;
 8001202:	220a      	movs	r2, #10
 8001204:	e01d      	b.n	8001242 <_cz_strtoxl+0x8e>
        c = *p++;
 8001206:	f811 cb01 	ldrb.w	ip, [r1], #1
 800120a:	e7e7      	b.n	80011dc <_cz_strtoxl+0x28>
        flags |= IFL_NEG;
 800120c:	f043 0301 	orr.w	r3, r3, #1
        c = *p++;
 8001210:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001214:	e7e5      	b.n	80011e2 <_cz_strtoxl+0x2e>
        c = *p++;
 8001216:	f811 cb01 	ldrb.w	ip, [r1], #1
 800121a:	e7e5      	b.n	80011e8 <_cz_strtoxl+0x34>
        if (endptr)
 800121c:	b106      	cbz	r6, 8001220 <_cz_strtoxl+0x6c>
            *endptr = nptr;
 800121e:	6035      	str	r5, [r6, #0]

    if (flags & IFL_NEG)
        number = (uint32_t)(-(int32_t)number);

    return number;
}
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (*p == 'x' || *p == 'X')
 8001222:	780a      	ldrb	r2, [r1, #0]
 8001224:	2a62      	cmp	r2, #98	@ 0x62
 8001226:	d024      	beq.n	8001272 <_cz_strtoxl+0xbe>
 8001228:	d805      	bhi.n	8001236 <_cz_strtoxl+0x82>
 800122a:	2a42      	cmp	r2, #66	@ 0x42
 800122c:	d023      	beq.n	8001276 <_cz_strtoxl+0xc2>
 800122e:	2a58      	cmp	r2, #88	@ 0x58
 8001230:	d010      	beq.n	8001254 <_cz_strtoxl+0xa0>
 8001232:	2208      	movs	r2, #8
 8001234:	e005      	b.n	8001242 <_cz_strtoxl+0x8e>
 8001236:	2a78      	cmp	r2, #120	@ 0x78
 8001238:	d019      	beq.n	800126e <_cz_strtoxl+0xba>
 800123a:	2208      	movs	r2, #8
 800123c:	e001      	b.n	8001242 <_cz_strtoxl+0x8e>
    if (ibase == 16)
 800123e:	2a10      	cmp	r2, #16
 8001240:	d009      	beq.n	8001256 <_cz_strtoxl+0xa2>
    else if (ibase == 2)
 8001242:	2a02      	cmp	r2, #2
 8001244:	d019      	beq.n	800127a <_cz_strtoxl+0xc6>
    maxval = maxu32 / ((uint32_t)ibase);
 8001246:	4617      	mov	r7, r2
 8001248:	f04f 3eff 	mov.w	lr, #4294967295
 800124c:	fbbe fef2 	udiv	lr, lr, r2
    number = 0;
 8001250:	4604      	mov	r4, r0
 8001252:	e02b      	b.n	80012ac <_cz_strtoxl+0xf8>
        else if (*p == 'x' || *p == 'X')
 8001254:	2210      	movs	r2, #16
        if (c == '0' && (*p == 'x' || *p == 'X'))
 8001256:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800125a:	d1f4      	bne.n	8001246 <_cz_strtoxl+0x92>
 800125c:	780c      	ldrb	r4, [r1, #0]
 800125e:	2c58      	cmp	r4, #88	@ 0x58
 8001260:	bf18      	it	ne
 8001262:	2c78      	cmpne	r4, #120	@ 0x78
 8001264:	d1ef      	bne.n	8001246 <_cz_strtoxl+0x92>
            c = *p++;
 8001266:	f891 c001 	ldrb.w	ip, [r1, #1]
 800126a:	3102      	adds	r1, #2
 800126c:	e7eb      	b.n	8001246 <_cz_strtoxl+0x92>
        else if (*p == 'x' || *p == 'X')
 800126e:	2210      	movs	r2, #16
 8001270:	e7f1      	b.n	8001256 <_cz_strtoxl+0xa2>
            ibase = 2;
 8001272:	2202      	movs	r2, #2
 8001274:	e7e5      	b.n	8001242 <_cz_strtoxl+0x8e>
 8001276:	2202      	movs	r2, #2
 8001278:	e7e3      	b.n	8001242 <_cz_strtoxl+0x8e>
        if (c == '0' && (*p == 'b' || *p == 'B'))
 800127a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800127e:	d1e2      	bne.n	8001246 <_cz_strtoxl+0x92>
 8001280:	780c      	ldrb	r4, [r1, #0]
 8001282:	2c42      	cmp	r4, #66	@ 0x42
 8001284:	bf18      	it	ne
 8001286:	2c62      	cmpne	r4, #98	@ 0x62
 8001288:	d1dd      	bne.n	8001246 <_cz_strtoxl+0x92>
            c = *p++;
 800128a:	f891 c001 	ldrb.w	ip, [r1, #1]
 800128e:	3102      	adds	r1, #2
 8001290:	e7d9      	b.n	8001246 <_cz_strtoxl+0x92>
        else if (cz_isalpha((int)(unsigned char)c))
 8001292:	f012 0f03 	tst.w	r2, #3
 8001296:	d01f      	beq.n	80012d8 <_cz_strtoxl+0x124>
            digval = (char)cz_toupper((unsigned char)c) - 'A' + 10;
 8001298:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 800129c:	f1ac 0c37 	sub.w	ip, ip, #55	@ 0x37
 80012a0:	e00c      	b.n	80012bc <_cz_strtoxl+0x108>
            number = number * ((uint32_t)ibase) + digval;
 80012a2:	fb04 c407 	mla	r4, r4, r7, ip
        flags |= IFL_READDIGIT;
 80012a6:	4613      	mov	r3, r2
        c = *p++;
 80012a8:	f811 cb01 	ldrb.w	ip, [r1], #1
        if (cz_isdigit((int)(unsigned char)c))
 80012ac:	4a25      	ldr	r2, [pc, #148]	@ (8001344 <_cz_strtoxl+0x190>)
 80012ae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80012b2:	f012 0f04 	tst.w	r2, #4
 80012b6:	d0ec      	beq.n	8001292 <_cz_strtoxl+0xde>
            digval = c - '0';
 80012b8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
        if (digval >= (uint32_t)ibase)
 80012bc:	4567      	cmp	r7, ip
 80012be:	d90b      	bls.n	80012d8 <_cz_strtoxl+0x124>
        flags |= IFL_READDIGIT;
 80012c0:	f043 0202 	orr.w	r2, r3, #2
        if (number < maxval || (number == maxval &&
 80012c4:	4574      	cmp	r4, lr
 80012c6:	d3ec      	bcc.n	80012a2 <_cz_strtoxl+0xee>
 80012c8:	45f4      	cmp	ip, lr
 80012ca:	bf98      	it	ls
 80012cc:	4574      	cmpls	r4, lr
 80012ce:	d0e8      	beq.n	80012a2 <_cz_strtoxl+0xee>
            flags |= IFL_OVERFLOW;
 80012d0:	f043 0306 	orr.w	r3, r3, #6
            if (endptr == NULL)
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	d1e7      	bne.n	80012a8 <_cz_strtoxl+0xf4>
    --p;
 80012d8:	3901      	subs	r1, #1
    if (!(flags & IFL_READDIGIT))
 80012da:	f013 0f02 	tst.w	r3, #2
 80012de:	d107      	bne.n	80012f0 <_cz_strtoxl+0x13c>
        if (endptr)
 80012e0:	b10e      	cbz	r6, 80012e6 <_cz_strtoxl+0x132>
            *endptr = nptr;
 80012e2:	6035      	str	r5, [r6, #0]
        *endptr = p;
 80012e4:	6031      	str	r1, [r6, #0]
    if (flags & IFL_NEG)
 80012e6:	f013 0f01 	tst.w	r3, #1
 80012ea:	d099      	beq.n	8001220 <_cz_strtoxl+0x6c>
        number = (uint32_t)(-(int32_t)number);
 80012ec:	4240      	negs	r0, r0
 80012ee:	e797      	b.n	8001220 <_cz_strtoxl+0x6c>
    else if ((flags & IFL_UNSIGNED) && (flags & IFL_NEG))
 80012f0:	f003 0209 	and.w	r2, r3, #9
 80012f4:	2a09      	cmp	r2, #9
 80012f6:	d01e      	beq.n	8001336 <_cz_strtoxl+0x182>
    else if ((flags & IFL_OVERFLOW) ||
 80012f8:	f013 0f04 	tst.w	r3, #4
 80012fc:	d10e      	bne.n	800131c <_cz_strtoxl+0x168>
 80012fe:	f013 0f08 	tst.w	r3, #8
 8001302:	d114      	bne.n	800132e <_cz_strtoxl+0x17a>
        (!(flags & IFL_UNSIGNED) &&
 8001304:	f013 0f01 	tst.w	r3, #1
 8001308:	d004      	beq.n	8001314 <_cz_strtoxl+0x160>
            (((flags & IFL_NEG) && (number > limit)) ||
 800130a:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800130e:	d805      	bhi.n	800131c <_cz_strtoxl+0x168>
 8001310:	4620      	mov	r0, r4
 8001312:	e010      	b.n	8001336 <_cz_strtoxl+0x182>
                (!(flags & IFL_NEG) && (number > limit - 1)))))
 8001314:	2c00      	cmp	r4, #0
 8001316:	db01      	blt.n	800131c <_cz_strtoxl+0x168>
 8001318:	4620      	mov	r0, r4
 800131a:	e00c      	b.n	8001336 <_cz_strtoxl+0x182>
        if (flags & IFL_UNSIGNED)
 800131c:	f013 0f08 	tst.w	r3, #8
 8001320:	d107      	bne.n	8001332 <_cz_strtoxl+0x17e>
        else if (flags & IFL_NEG)
 8001322:	f013 0f01 	tst.w	r3, #1
 8001326:	d009      	beq.n	800133c <_cz_strtoxl+0x188>
            number = (uint32_t)CZ_INT32_MIN;
 8001328:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800132c:	e003      	b.n	8001336 <_cz_strtoxl+0x182>
 800132e:	4620      	mov	r0, r4
 8001330:	e001      	b.n	8001336 <_cz_strtoxl+0x182>
            number = maxu32;
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
    if (endptr)
 8001336:	2e00      	cmp	r6, #0
 8001338:	d1d4      	bne.n	80012e4 <_cz_strtoxl+0x130>
 800133a:	e7d4      	b.n	80012e6 <_cz_strtoxl+0x132>
            number = (uint32_t)CZ_INT32_MAX;
 800133c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8001340:	e7f9      	b.n	8001336 <_cz_strtoxl+0x182>
 8001342:	bf00      	nop
 8001344:	0800df88 	.word	0x0800df88

08001348 <cz_atol>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(cz_atol, MEM_MACRO);
#endif
static int32_t cz_atol(const char* nptr)
{
 8001348:	b508      	push	{r3, lr}
    return (int32_t)_cz_strtoxl(nptr, 0, 10, 0);
 800134a:	2300      	movs	r3, #0
 800134c:	220a      	movs	r2, #10
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff ff30 	bl	80011b4 <_cz_strtoxl>
}
 8001354:	bd08      	pop	{r3, pc}
	...

08001358 <_atof_pow10>:
#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(_atof_pow10, MEM_MACRO);
#endif
static float _atof_pow10(float data, int exp)
{
    while (exp > 0)
 8001358:	e004      	b.n	8001364 <_atof_pow10+0xc>
    {
        data *= 10.0f;
 800135a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800135e:	ee20 0a27 	vmul.f32	s0, s0, s15
        --exp;
 8001362:	3801      	subs	r0, #1
    while (exp > 0)
 8001364:	2800      	cmp	r0, #0
 8001366:	dcf8      	bgt.n	800135a <_atof_pow10+0x2>
 8001368:	e004      	b.n	8001374 <_atof_pow10+0x1c>
    }
    while (exp < 0)
    {
        data *= 0.1f;
 800136a:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800137c <_atof_pow10+0x24>
 800136e:	ee20 0a27 	vmul.f32	s0, s0, s15
        ++exp;
 8001372:	3001      	adds	r0, #1
    while (exp < 0)
 8001374:	2800      	cmp	r0, #0
 8001376:	dbf8      	blt.n	800136a <_atof_pow10+0x12>
    }
    return data;
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	3dcccccd 	.word	0x3dcccccd

08001380 <atof_tyj>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(atof_tyj, MEM_MACRO);
#endif
static float atof_tyj(const char* chrIn)
{
 8001380:	b530      	push	{r4, r5, lr}
 8001382:	ed2d 8b02 	vpush	{d8}
 8001386:	b083      	sub	sp, #12
    const char* nextCharPtr = NULL;
 8001388:	2300      	movs	r3, #0
 800138a:	9301      	str	r3, [sp, #4]
    float decPart = 0;
    float ret = 0;
    int ePart = 0;
    int sign = 1;
 800138c:	2401      	movs	r4, #1
    while (!cz_isalnum((int)(unsigned char)(*chrIn)))
 800138e:	e001      	b.n	8001394 <atof_tyj+0x14>
    {
        if (cz_ispunct((int)(unsigned char)(*chrIn)))
        {
            if (*chrIn == '-')
            {
                sign = -sign;
 8001390:	4264      	negs	r4, r4
            {
                //不允许的
                return 0;
            }
        }
        chrIn++;
 8001392:	3001      	adds	r0, #1
    while (!cz_isalnum((int)(unsigned char)(*chrIn)))
 8001394:	7802      	ldrb	r2, [r0, #0]
 8001396:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <atof_tyj+0xb8>)
 8001398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139c:	f013 0f07 	tst.w	r3, #7
 80013a0:	d109      	bne.n	80013b6 <atof_tyj+0x36>
        if (cz_ispunct((int)(unsigned char)(*chrIn)))
 80013a2:	f013 0f10 	tst.w	r3, #16
 80013a6:	d0f4      	beq.n	8001392 <atof_tyj+0x12>
            if (*chrIn == '-')
 80013a8:	2a2d      	cmp	r2, #45	@ 0x2d
 80013aa:	d0f1      	beq.n	8001390 <atof_tyj+0x10>
            else if (*chrIn == '+')
 80013ac:	2a2b      	cmp	r2, #43	@ 0x2b
 80013ae:	d0f0      	beq.n	8001392 <atof_tyj+0x12>
                return 0;
 80013b0:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800143c <atof_tyj+0xbc>
 80013b4:	e01d      	b.n	80013f2 <atof_tyj+0x72>
    }
    // 找出前面的数字并分离
    int32_t intPart = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
 80013b6:	2300      	movs	r3, #0
 80013b8:	220a      	movs	r2, #10
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	f7ff fefa 	bl	80011b4 <_cz_strtoxl>
 80013c0:	ee08 0a10 	vmov	s16, r0
    // 有小数点
    if (*nextCharPtr == '.')
 80013c4:	9d01      	ldr	r5, [sp, #4]
 80013c6:	782a      	ldrb	r2, [r5, #0]
 80013c8:	2a2e      	cmp	r2, #46	@ 0x2e
 80013ca:	d016      	beq.n	80013fa <atof_tyj+0x7a>
    float decPart = 0;
 80013cc:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 800143c <atof_tyj+0xbc>
        int32_t decInt = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
        int lenth = nextCharPtr - chrIn;
        decPart = _atof_pow10((float)decInt, -lenth);
    }
    // 有e或E
    if (*nextCharPtr == 'e' || *nextCharPtr == 'E')
 80013d0:	9801      	ldr	r0, [sp, #4]
 80013d2:	7803      	ldrb	r3, [r0, #0]
 80013d4:	2b45      	cmp	r3, #69	@ 0x45
 80013d6:	bf18      	it	ne
 80013d8:	2b65      	cmpne	r3, #101	@ 0x65
 80013da:	d020      	beq.n	800141e <atof_tyj+0x9e>
    int ePart = 0;
 80013dc:	2000      	movs	r0, #0
    {
        chrIn = nextCharPtr + 1;
        ePart = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
    }
    if (sign == 1)
 80013de:	2c01      	cmp	r4, #1
 80013e0:	d024      	beq.n	800142c <atof_tyj+0xac>
    {
        ret = intPart + decPart;
    }
    else
    {
        ret = -decPart - intPart;
 80013e2:	eeb1 0a68 	vneg.f32	s0, s17
 80013e6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80013ea:	ee30 0a48 	vsub.f32	s0, s0, s16
    }
    return _atof_pow10(ret, ePart);
 80013ee:	f7ff ffb3 	bl	8001358 <_atof_pow10>
}
 80013f2:	b003      	add	sp, #12
 80013f4:	ecbd 8b02 	vpop	{d8}
 80013f8:	bd30      	pop	{r4, r5, pc}
        chrIn = nextCharPtr + 1;
 80013fa:	3501      	adds	r5, #1
        int32_t decInt = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
 80013fc:	2300      	movs	r3, #0
 80013fe:	220a      	movs	r2, #10
 8001400:	a901      	add	r1, sp, #4
 8001402:	4628      	mov	r0, r5
 8001404:	f7ff fed6 	bl	80011b4 <_cz_strtoxl>
 8001408:	ee00 0a10 	vmov	s0, r0
        decPart = _atof_pow10((float)decInt, -lenth);
 800140c:	9801      	ldr	r0, [sp, #4]
 800140e:	1a28      	subs	r0, r5, r0
 8001410:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001414:	f7ff ffa0 	bl	8001358 <_atof_pow10>
 8001418:	eef0 8a40 	vmov.f32	s17, s0
 800141c:	e7d8      	b.n	80013d0 <atof_tyj+0x50>
        ePart = _cz_strtoxl(chrIn, &nextCharPtr, 10, 0);
 800141e:	2300      	movs	r3, #0
 8001420:	220a      	movs	r2, #10
 8001422:	a901      	add	r1, sp, #4
 8001424:	3001      	adds	r0, #1
 8001426:	f7ff fec5 	bl	80011b4 <_cz_strtoxl>
 800142a:	e7d8      	b.n	80013de <atof_tyj+0x5e>
        ret = intPart + decPart;
 800142c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8001430:	ee38 0a28 	vadd.f32	s0, s16, s17
 8001434:	e7db      	b.n	80013ee <atof_tyj+0x6e>
 8001436:	bf00      	nop
 8001438:	0800df88 	.word	0x0800df88
 800143c:	00000000 	.word	0x00000000

08001440 <SCD_CMD_SET>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCD_CMD_SET, MEM_MACRO);
#endif
static void SCD_CMD_SET(struct SCD_CTRL_STRUCT* scd, volatile unsigned char* paraPtr, int16_t targetNum)
{
 8001440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001444:	460e      	mov	r6, r1
 8001446:	4615      	mov	r5, r2
    const struct TYJ_UNIT_STRUCT* SCD_DATA_STRUCT_tab = scd->_unit_struct;
 8001448:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_float)
 800144a:	eb07 04c2 	add.w	r4, r7, r2, lsl #3
 800144e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8001452:	2b24      	cmp	r3, #36	@ 0x24
 8001454:	d011      	beq.n	800147a <SCD_CMD_SET+0x3a>
    {
        volatile float* xtemp = (float*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
        *xtemp = atof_tyj((const char*)paraPtr);
    }
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_uint16_t)
 8001456:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d015      	beq.n	800148a <SCD_CMD_SET+0x4a>
    {
        volatile uint16_t* xtemp = (uint16_t*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
        *xtemp = cz_atol((const char*)paraPtr);
    }
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_int16_t)
 800145e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8001462:	2b12      	cmp	r3, #18
 8001464:	d01a      	beq.n	800149c <SCD_CMD_SET+0x5c>
    {
        volatile int16_t* xtemp = (int16_t*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
        *xtemp = cz_atol((const char*)paraPtr);
    }
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_uint32_t)
 8001466:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d01f      	beq.n	80014ae <SCD_CMD_SET+0x6e>
    {
        volatile uint32_t* xtemp = (uint32_t*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
        *xtemp = cz_atol((const char*)paraPtr);
    }
    if (SCD_DATA_STRUCT_tab[targetNum]._type == TYJ_int32_t)
 800146e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8001472:	2b14      	cmp	r3, #20
 8001474:	d023      	beq.n	80014be <SCD_CMD_SET+0x7e>
    {
        volatile int32_t* xtemp = (int32_t*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
        *xtemp = cz_atol((const char*)paraPtr);
    }
    // 其余类型是不修改的
}
 8001476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        volatile float* xtemp = (float*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
 800147a:	f857 8032 	ldr.w	r8, [r7, r2, lsl #3]
        *xtemp = atof_tyj((const char*)paraPtr);
 800147e:	4608      	mov	r0, r1
 8001480:	f7ff ff7e 	bl	8001380 <atof_tyj>
 8001484:	ed88 0a00 	vstr	s0, [r8]
 8001488:	e7e5      	b.n	8001456 <SCD_CMD_SET+0x16>
        volatile uint16_t* xtemp = (uint16_t*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
 800148a:	f857 8035 	ldr.w	r8, [r7, r5, lsl #3]
        *xtemp = cz_atol((const char*)paraPtr);
 800148e:	4630      	mov	r0, r6
 8001490:	f7ff ff5a 	bl	8001348 <cz_atol>
 8001494:	b280      	uxth	r0, r0
 8001496:	f8a8 0000 	strh.w	r0, [r8]
 800149a:	e7e0      	b.n	800145e <SCD_CMD_SET+0x1e>
        volatile int16_t* xtemp = (int16_t*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
 800149c:	f857 8035 	ldr.w	r8, [r7, r5, lsl #3]
        *xtemp = cz_atol((const char*)paraPtr);
 80014a0:	4630      	mov	r0, r6
 80014a2:	f7ff ff51 	bl	8001348 <cz_atol>
 80014a6:	b200      	sxth	r0, r0
 80014a8:	f8a8 0000 	strh.w	r0, [r8]
 80014ac:	e7db      	b.n	8001466 <SCD_CMD_SET+0x26>
        volatile uint32_t* xtemp = (uint32_t*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
 80014ae:	f857 8035 	ldr.w	r8, [r7, r5, lsl #3]
        *xtemp = cz_atol((const char*)paraPtr);
 80014b2:	4630      	mov	r0, r6
 80014b4:	f7ff ff48 	bl	8001348 <cz_atol>
 80014b8:	f8c8 0000 	str.w	r0, [r8]
 80014bc:	e7d7      	b.n	800146e <SCD_CMD_SET+0x2e>
        volatile int32_t* xtemp = (int32_t*)(void*)SCD_DATA_STRUCT_tab[targetNum]._addr;
 80014be:	f857 4035 	ldr.w	r4, [r7, r5, lsl #3]
        *xtemp = cz_atol((const char*)paraPtr);
 80014c2:	4630      	mov	r0, r6
 80014c4:	f7ff ff40 	bl	8001348 <cz_atol>
 80014c8:	6020      	str	r0, [r4, #0]
}
 80014ca:	e7d4      	b.n	8001476 <SCD_CMD_SET+0x36>

080014cc <SCD_CMD_CONF>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCD_CMD_CONF, MEM_MACRO);
#endif
static void SCD_CMD_CONF(struct SCD_CTRL_STRUCT* scd, volatile unsigned char* paraPtr, int16_t targetNum)
{
 80014cc:	b538      	push	{r3, r4, r5, lr}
    // targetNum即是序号
    if (targetNum >= 0 && targetNum < SCD_SEND_TAB_SIZE)
 80014ce:	b293      	uxth	r3, r2
 80014d0:	2b13      	cmp	r3, #19
 80014d2:	d900      	bls.n	80014d6 <SCD_CMD_CONF+0xa>
        //        if (varNum >= 0 && varNum < scd->structNum)
        {
            scd->structToSendTab[targetNum] = varNum;
        }
    }
}
 80014d4:	bd38      	pop	{r3, r4, r5, pc}
 80014d6:	4605      	mov	r5, r0
 80014d8:	4614      	mov	r4, r2
        int varNum = cz_atol((const char*)paraPtr);
 80014da:	4608      	mov	r0, r1
 80014dc:	f7ff ff34 	bl	8001348 <cz_atol>
            scd->structToSendTab[targetNum] = varNum;
 80014e0:	b200      	sxth	r0, r0
 80014e2:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
}
 80014e6:	e7f5      	b.n	80014d4 <SCD_CMD_CONF+0x8>

080014e8 <SCD_CMD_CHG>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCD_CMD_CHG, MEM_MACRO);
#endif
static void SCD_CMD_CHG(struct SCD_CTRL_STRUCT* scd, volatile unsigned char* paraPtr, int16_t targetNum)
{
 80014e8:	b510      	push	{r4, lr}
 80014ea:	4604      	mov	r4, r0
    // 配置协议类型
    (void)targetNum;
    int p_num = cz_atol((const char*)paraPtr);
 80014ec:	4608      	mov	r0, r1
 80014ee:	f7ff ff2b 	bl	8001348 <cz_atol>
    if (p_num >= 0 && p_num < SCD_PROTOCOL_NUM)
 80014f2:	2804      	cmp	r0, #4
 80014f4:	d802      	bhi.n	80014fc <SCD_CMD_CHG+0x14>
    {
        scd->sco_protocol_num_next = p_num;
 80014f6:	b203      	sxth	r3, r0
 80014f8:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
    }
}
 80014fc:	bd10      	pop	{r4, pc}

080014fe <SCD_CMD_DUMP>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCD_CMD_DUMP, MEM_MACRO);
#endif
static void SCD_CMD_DUMP(struct SCD_CTRL_STRUCT* scd, volatile unsigned char* paraPtr, int16_t targetNum)
{
 80014fe:	b510      	push	{r4, lr}
 8001500:	4604      	mov	r4, r0
    scd->dumpTarget = targetNum;
 8001502:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
    int p_num = cz_atol((const char*)paraPtr);
 8001506:	4608      	mov	r0, r1
 8001508:	f7ff ff1e 	bl	8001348 <cz_atol>
    if (p_num <= 0)
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	dd05      	ble.n	800151c <SCD_CMD_DUMP+0x1e>
    {
        p_num = 1;
    }
    if (p_num > SCD_MAX_DUMP_COUNT)
 8001510:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001514:	dd03      	ble.n	800151e <SCD_CMD_DUMP+0x20>
    {
        p_num = SCD_MAX_DUMP_COUNT;
 8001516:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800151a:	e000      	b.n	800151e <SCD_CMD_DUMP+0x20>
        p_num = 1;
 800151c:	2301      	movs	r3, #1
    }
    scd->dumpNumCnt = p_num;
 800151e:	b21b      	sxth	r3, r3
 8001520:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
}
 8001524:	bd10      	pop	{r4, pc}

08001526 <SCD_CMD_CALL>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCD_CMD_CALL, MEM_MACRO);
#endif
static void SCD_CMD_CALL(struct SCD_CTRL_STRUCT* scd, volatile unsigned char* paraPtr, int16_t targetNum)
{
 8001526:	b538      	push	{r3, r4, r5, lr}
    uint16_t judgeType = (scd->_unit_struct[targetNum]._type) & 0xffu;
 8001528:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800152a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800152e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    if (judgeType == TYJ_function)
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b32      	cmp	r3, #50	@ 0x32
 8001536:	d000      	beq.n	800153a <SCD_CMD_CALL+0x14>
        int para = cz_atol((const char*)paraPtr);
        typedef void (*funcPtr_t)(int32_t);
        funcPtr_t funcPtr = (funcPtr_t)(void*)scd->_unit_struct[targetNum]._addr;
        (*funcPtr)(para);
    }
}
 8001538:	bd38      	pop	{r3, r4, r5, pc}
 800153a:	4605      	mov	r5, r0
 800153c:	4614      	mov	r4, r2
        int para = cz_atol((const char*)paraPtr);
 800153e:	4608      	mov	r0, r1
 8001540:	f7ff ff02 	bl	8001348 <cz_atol>
        funcPtr_t funcPtr = (funcPtr_t)(void*)scd->_unit_struct[targetNum]._addr;
 8001544:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8001546:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
        (*funcPtr)(para);
 800154a:	4798      	blx	r3
}
 800154c:	e7f4      	b.n	8001538 <SCD_CMD_CALL+0x12>
	...

08001550 <SCD_cmd_handle>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCD_cmd_handle, MEM_MACRO);
#endif
static void SCD_cmd_handle(struct SCD_CTRL_STRUCT* scd)
{
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    volatile unsigned char(*recBuff)[SCD_REVBUFF_SIZE] = scd->_recBuff;
 8001552:	6a81      	ldr	r1, [r0, #40]	@ 0x28
    // 开头可有特殊字符
    int16_t xstart = 0;
 8001554:	2200      	movs	r2, #0
    while (!cz_isalnum((int)(unsigned char)(recBuff[0][xstart])))
 8001556:	4614      	mov	r4, r2
 8001558:	5c8d      	ldrb	r5, [r1, r2]
 800155a:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <SCD_cmd_handle+0x104>)
 800155c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8001560:	f013 0f07 	tst.w	r3, #7
 8001564:	d105      	bne.n	8001572 <SCD_cmd_handle+0x22>
    {
        xstart++;
 8001566:	3201      	adds	r2, #1
 8001568:	b212      	sxth	r2, r2
        if (recBuff[0][xstart] == 0)
 800156a:	5c8b      	ldrb	r3, [r1, r2]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <SCD_cmd_handle+0x6>
    if (cmd2exec >= 0 && cmd2exec < SCD_CMD_NUM && targetNum < scd->structNum && targetNum >= 0)
    {
        // 满足要求则调用相应处理函数
        (*SCD_CMD_FCNS[cmd2exec])(scd, &recBuff[0][ptr], targetNum);
    }
}
 8001570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cz_isalpha((int)(unsigned char)(recBuff[0][xstart])))
 8001572:	5c8d      	ldrb	r5, [r1, r2]
 8001574:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <SCD_cmd_handle+0x104>)
 8001576:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800157a:	f013 0f03 	tst.w	r3, #3
 800157e:	d0f7      	beq.n	8001570 <SCD_cmd_handle+0x20>
    int16_t cmdLen = 0;
 8001580:	f04f 0e00 	mov.w	lr, #0
 8001584:	e003      	b.n	800158e <SCD_cmd_handle+0x3e>
        cmdLen++;
 8001586:	f10e 0e01 	add.w	lr, lr, #1
 800158a:	fa0f fe8e 	sxth.w	lr, lr
    while (cz_isalpha((int)(unsigned char)(recBuff[0][cmdLen + xstart])))
 800158e:	eb0e 0304 	add.w	r3, lr, r4
 8001592:	5ccd      	ldrb	r5, [r1, r3]
 8001594:	4b2f      	ldr	r3, [pc, #188]	@ (8001654 <SCD_cmd_handle+0x104>)
 8001596:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800159a:	f013 0f03 	tst.w	r3, #3
 800159e:	d1f2      	bne.n	8001586 <SCD_cmd_handle+0x36>
    for (int16_t ii = 0; ii < SCD_CMD_NUM; ii++)
 80015a0:	2600      	movs	r6, #0
 80015a2:	e013      	b.n	80015cc <SCD_cmd_handle+0x7c>
        for (int16_t jj = 0; jj < cmdLen; jj++)
 80015a4:	3301      	adds	r3, #1
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	459e      	cmp	lr, r3
 80015aa:	dd0c      	ble.n	80015c6 <SCD_cmd_handle+0x76>
            if (recBuff[0][jj + xstart] != SCD_CMD_TAB[ii][jj])
 80015ac:	191d      	adds	r5, r3, r4
 80015ae:	f811 c005 	ldrb.w	ip, [r1, r5]
 80015b2:	fa5f fc8c 	uxtb.w	ip, ip
 80015b6:	4d28      	ldr	r5, [pc, #160]	@ (8001658 <SCD_cmd_handle+0x108>)
 80015b8:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
 80015bc:	5ced      	ldrb	r5, [r5, r3]
 80015be:	45ac      	cmp	ip, r5
 80015c0:	d0f0      	beq.n	80015a4 <SCD_cmd_handle+0x54>
                isSame = 0;
 80015c2:	2700      	movs	r7, #0
 80015c4:	e7ee      	b.n	80015a4 <SCD_cmd_handle+0x54>
        if (isSame)
 80015c6:	b947      	cbnz	r7, 80015da <SCD_cmd_handle+0x8a>
    for (int16_t ii = 0; ii < SCD_CMD_NUM; ii++)
 80015c8:	3601      	adds	r6, #1
 80015ca:	b236      	sxth	r6, r6
 80015cc:	2e04      	cmp	r6, #4
 80015ce:	dc02      	bgt.n	80015d6 <SCD_cmd_handle+0x86>
        for (int16_t jj = 0; jj < cmdLen; jj++)
 80015d0:	2300      	movs	r3, #0
        int16_t isSame = 1;
 80015d2:	2701      	movs	r7, #1
 80015d4:	e7e8      	b.n	80015a8 <SCD_cmd_handle+0x58>
    int16_t cmd2exec = -1;
 80015d6:	f04f 36ff 	mov.w	r6, #4294967295
    int16_t ptr = cmdLen + xstart;
 80015da:	4496      	add	lr, r2
 80015dc:	fa0f fe8e 	sxth.w	lr, lr
    if (!cz_isdigit((int)(unsigned char)(recBuff[0][ptr])))
 80015e0:	f811 200e 	ldrb.w	r2, [r1, lr]
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <SCD_cmd_handle+0x104>)
 80015e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ea:	f013 0f04 	tst.w	r3, #4
 80015ee:	d0bf      	beq.n	8001570 <SCD_cmd_handle+0x20>
    int16_t targetNum = 0;
 80015f0:	2200      	movs	r2, #0
 80015f2:	e00d      	b.n	8001610 <SCD_cmd_handle+0xc0>
        targetNum = targetNum * 10 + recBuff[0][ptr] - '0';
 80015f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80015f8:	0052      	lsls	r2, r2, #1
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f811 300e 	ldrb.w	r3, [r1, lr]
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	3b30      	subs	r3, #48	@ 0x30
 8001606:	b21a      	sxth	r2, r3
        ptr++;
 8001608:	f10e 0e01 	add.w	lr, lr, #1
 800160c:	fa0f fe8e 	sxth.w	lr, lr
    while (cz_isdigit((int)(unsigned char)(recBuff[0][ptr])))
 8001610:	f811 400e 	ldrb.w	r4, [r1, lr]
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <SCD_cmd_handle+0x104>)
 8001616:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800161a:	f013 0f04 	tst.w	r3, #4
 800161e:	d1e9      	bne.n	80015f4 <SCD_cmd_handle+0xa4>
    if (recBuff[0][ptr] != '#')
 8001620:	f811 300e 	ldrb.w	r3, [r1, lr]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b23      	cmp	r3, #35	@ 0x23
 8001628:	d1a2      	bne.n	8001570 <SCD_cmd_handle+0x20>
    ptr++;
 800162a:	f10e 0e01 	add.w	lr, lr, #1
 800162e:	fa0f fe8e 	sxth.w	lr, lr
    if (cmd2exec >= 0 && cmd2exec < SCD_CMD_NUM && targetNum < scd->structNum && targetNum >= 0)
 8001632:	b2b3      	uxth	r3, r6
 8001634:	2b04      	cmp	r3, #4
 8001636:	d89b      	bhi.n	8001570 <SCD_cmd_handle+0x20>
 8001638:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800163c:	b21b      	sxth	r3, r3
 800163e:	4293      	cmp	r3, r2
 8001640:	dd96      	ble.n	8001570 <SCD_cmd_handle+0x20>
 8001642:	2a00      	cmp	r2, #0
 8001644:	db94      	blt.n	8001570 <SCD_cmd_handle+0x20>
        (*SCD_CMD_FCNS[cmd2exec])(scd, &recBuff[0][ptr], targetNum);
 8001646:	4b05      	ldr	r3, [pc, #20]	@ (800165c <SCD_cmd_handle+0x10c>)
 8001648:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800164c:	4471      	add	r1, lr
 800164e:	4798      	blx	r3
 8001650:	e78e      	b.n	8001570 <SCD_cmd_handle+0x20>
 8001652:	bf00      	nop
 8001654:	0800df88 	.word	0x0800df88
 8001658:	0800df74 	.word	0x0800df74
 800165c:	0800df60 	.word	0x0800df60

08001660 <SCO_get>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCO_get, MEM_MACRO);
#endif
static uint16_t SCO_get(struct SCD_CTRL_STRUCT* scd)
{
 8001660:	b500      	push	{lr}
 8001662:	b083      	sub	sp, #12
#define SCO_STARTBYTE_NUM 0
#define SCO_ENDBYTE_NUM 4

    // 起始位和结束位定义
    const unsigned char startByte[SCO_STARTBYTE_NUM + 1] = { 0x00 };
    const unsigned char endByte[SCO_ENDBYTE_NUM + 1] = { 0x00, 0x00, 0x80, 0x7f };
 8001664:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	f88d 3004 	strb.w	r3, [sp, #4]

    if (scd->structToSend == 0)
 8001670:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 8001674:	b21b      	sxth	r3, r3
 8001676:	b9d3      	cbnz	r3, 80016ae <SCO_get+0x4e>
    {
        // 起始位
        if (scd->byteToSend < SCO_STARTBYTE_NUM)
 8001678:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 800167c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8001680:	d009      	beq.n	8001696 <SCO_get+0x36>
        {
            return startByte[scd->byteToSend++];
 8001682:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 8001686:	3301      	adds	r3, #1
 8001688:	b21b      	sxth	r3, r3
 800168a:	f8a0 304a 	strh.w	r3, [r0, #74]	@ 0x4a
 800168e:	2000      	movs	r0, #0
            scd->structToSend++;
            // 数据位发送完成，递归找下一数据
            return SCO_get(scd);
        }
    }
}
 8001690:	b003      	add	sp, #12
 8001692:	f85d fb04 	ldr.w	pc, [sp], #4
            scd->byteToSend = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	f8a0 304a 	strh.w	r3, [r0, #74]	@ 0x4a
            scd->structToSend++;
 800169c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 80016a0:	3301      	adds	r3, #1
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
            return SCO_get(scd);
 80016a8:	f7ff ffda 	bl	8001660 <SCO_get>
 80016ac:	e7f0      	b.n	8001690 <SCO_get+0x30>
    else if (scd->structToSendTab[scd->structToSend - 1] > scd->structNum)
 80016ae:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	3b01      	subs	r3, #1
 80016b6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80016ba:	b212      	sxth	r2, r2
 80016bc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dd18      	ble.n	80016f8 <SCO_get+0x98>
        if (scd->byteToSend < SCO_ENDBYTE_NUM)
 80016c6:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	dc0b      	bgt.n	80016e8 <SCO_get+0x88>
            return endByte[scd->byteToSend++];
 80016d0:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	b212      	sxth	r2, r2
 80016d8:	f8a0 204a 	strh.w	r2, [r0, #74]	@ 0x4a
 80016dc:	aa02      	add	r2, sp, #8
 80016de:	fa02 f383 	sxtah	r3, r2, r3
 80016e2:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 80016e6:	e7d3      	b.n	8001690 <SCO_get+0x30>
            scd->byteToSend = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8a0 304a 	strh.w	r3, [r0, #74]	@ 0x4a
            scd->structToSend = 0;
 80016ee:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
            return 0x100u;
 80016f2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016f6:	e7cb      	b.n	8001690 <SCO_get+0x30>
        if (scd->byteToSend < (4))
 80016f8:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	2b03      	cmp	r3, #3
 8001700:	dc62      	bgt.n	80017c8 <SCO_get+0x168>
            if (scd->byteToSend == 0)
 8001702:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 8001706:	b21b      	sxth	r3, r3
 8001708:	bbab      	cbnz	r3, 8001776 <SCO_get+0x116>
                uint16_t judgeType = (scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._type) & 0xffu;
 800170a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800170c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 8001710:	b21b      	sxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001718:	b21b      	sxth	r3, r3
 800171a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800171e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001722:	b2db      	uxtb	r3, r3
                void* tempCommonPtr = (void*)scd->_unit_struct[scd->structToSendTab[scd->structToSend - 1]]._addr;
 8001724:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8001728:	b212      	sxth	r2, r2
 800172a:	3a01      	subs	r2, #1
 800172c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001730:	b212      	sxth	r2, r2
 8001732:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
                if (judgeType == TYJ_uint16_t)
 8001736:	2b14      	cmp	r3, #20
 8001738:	d030      	beq.n	800179c <SCO_get+0x13c>
 800173a:	dd0a      	ble.n	8001752 <SCO_get+0xf2>
 800173c:	2b24      	cmp	r3, #36	@ 0x24
 800173e:	d034      	beq.n	80017aa <SCO_get+0x14a>
 8001740:	2b32      	cmp	r3, #50	@ 0x32
 8001742:	d135      	bne.n	80017b0 <SCO_get+0x150>
                    scd->tempBuff = (uint32_t)tempCommonPtr;
 8001744:	ee07 2a90 	vmov	s15, r2
 8001748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174c:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 8001750:	e011      	b.n	8001776 <SCO_get+0x116>
 8001752:	2b02      	cmp	r3, #2
 8001754:	d008      	beq.n	8001768 <SCO_get+0x108>
 8001756:	2b04      	cmp	r3, #4
 8001758:	d12a      	bne.n	80017b0 <SCO_get+0x150>
                    scd->tempBuff = *tempPtr;
 800175a:	edd2 7a00 	vldr	s15, [r2]
 800175e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001762:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 8001766:	e006      	b.n	8001776 <SCO_get+0x116>
                    scd->tempBuff = *tempPtr;
 8001768:	8813      	ldrh	r3, [r2, #0]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001772:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
            uint16_t* tempPtr = (uint16_t*)(void*)&(scd->tempBuff);
 8001776:	f100 0c40 	add.w	ip, r0, #64	@ 0x40
            tempPtr = &tempPtr[scd->byteToSend >> 1];
 800177a:	f8b0 304a 	ldrh.w	r3, [r0, #74]	@ 0x4a
 800177e:	f343 024e 	sbfx	r2, r3, #1, #15
            if (scd->byteToSend++ & 0x1)
 8001782:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
 8001786:	1c4b      	adds	r3, r1, #1
 8001788:	b21b      	sxth	r3, r3
 800178a:	f8a0 304a 	strh.w	r3, [r0, #74]	@ 0x4a
 800178e:	f011 0f01 	tst.w	r1, #1
 8001792:	d016      	beq.n	80017c2 <SCO_get+0x162>
                return ((*tempPtr) >> 8) & 0xffu;
 8001794:	f83c 0012 	ldrh.w	r0, [ip, r2, lsl #1]
 8001798:	0a00      	lsrs	r0, r0, #8
 800179a:	e779      	b.n	8001690 <SCO_get+0x30>
                    scd->tempBuff = *tempPtr;
 800179c:	edd2 7a00 	vldr	s15, [r2]
 80017a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a4:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 80017a8:	e7e5      	b.n	8001776 <SCO_get+0x116>
                    scd->tempBuff = *tempPtr;
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	6403      	str	r3, [r0, #64]	@ 0x40
 80017ae:	e7e2      	b.n	8001776 <SCO_get+0x116>
                    scd->tempBuff = *tempPtr;
 80017b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017bc:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 80017c0:	e7d9      	b.n	8001776 <SCO_get+0x116>
                return (*tempPtr) & 0xffu;
 80017c2:	f81c 0012 	ldrb.w	r0, [ip, r2, lsl #1]
 80017c6:	e763      	b.n	8001690 <SCO_get+0x30>
            scd->byteToSend = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8a0 304a 	strh.w	r3, [r0, #74]	@ 0x4a
            scd->structToSend++;
 80017ce:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 80017d2:	3301      	adds	r3, #1
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
            return SCO_get(scd);
 80017da:	f7ff ff41 	bl	8001660 <SCO_get>
 80017de:	e757      	b.n	8001690 <SCO_get+0x30>

080017e0 <SCO_VAR>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCO_VAR, MEM_MACRO);
#endif
static uint16_t SCO_VAR(struct SCD_CTRL_STRUCT* scd)
{
 80017e0:	b508      	push	{r3, lr}

    // 起始位和结束位定义
    const unsigned char startByte[SCO_STARTBYTE_NUM1 + 1] = { 0x00 };
    static uint16_t checkUint16Sum = 0;

    if (scd->structToSend2 == 0)
 80017e2:	f8b0 3054 	ldrh.w	r3, [r0, #84]	@ 0x54
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	b9d3      	cbnz	r3, 8001820 <SCO_VAR+0x40>
    {
        // 起始位
        if (scd->byteToSend2 < SCO_STARTBYTE_NUM1)
 80017ea:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 80017ee:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80017f2:	d007      	beq.n	8001804 <SCO_VAR+0x24>
        {
            return startByte[scd->byteToSend2++];
 80017f4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 80017f8:	3301      	adds	r3, #1
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
 8001800:	2000      	movs	r0, #0
            scd->_endbyte1[0] = checkUint16Sum & 0xffu;
            scd->_endbyte1[1] = (checkUint16Sum >> 8) & 0xffu;
            return SCO_VAR(scd);
        }
    }
}
 8001802:	bd08      	pop	{r3, pc}
            scd->byteToSend2 = 0;
 8001804:	2200      	movs	r2, #0
 8001806:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
            scd->structToSend2++;
 800180a:	f8b0 3054 	ldrh.w	r3, [r0, #84]	@ 0x54
 800180e:	3301      	adds	r3, #1
 8001810:	b21b      	sxth	r3, r3
 8001812:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
            checkUint16Sum = 0;
 8001816:	4b55      	ldr	r3, [pc, #340]	@ (800196c <SCO_VAR+0x18c>)
 8001818:	801a      	strh	r2, [r3, #0]
            return SCO_VAR(scd);
 800181a:	f7ff ffe1 	bl	80017e0 <SCO_VAR>
 800181e:	e7f0      	b.n	8001802 <SCO_VAR+0x22>
    else if (scd->structToSend2 > scd->structNum)
 8001820:	f8b0 2054 	ldrh.w	r2, [r0, #84]	@ 0x54
 8001824:	b212      	sxth	r2, r2
 8001826:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800182a:	b21b      	sxth	r3, r3
 800182c:	429a      	cmp	r2, r3
 800182e:	dd20      	ble.n	8001872 <SCO_VAR+0x92>
        if (scd->byteToSend2 < SCO_ENDBYTE_NUM1)
 8001830:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8001834:	b21b      	sxth	r3, r3
 8001836:	2b03      	cmp	r3, #3
 8001838:	dc0a      	bgt.n	8001850 <SCO_VAR+0x70>
            return scd->_endbyte1[scd->byteToSend2++];
 800183a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800183c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8001840:	b21a      	sxth	r2, r3
 8001842:	3301      	adds	r3, #1
 8001844:	b21b      	sxth	r3, r3
 8001846:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
 800184a:	5c88      	ldrb	r0, [r1, r2]
 800184c:	b2c0      	uxtb	r0, r0
 800184e:	e7d8      	b.n	8001802 <SCO_VAR+0x22>
            scd->byteToSend2 = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
            scd->structToSend2 = 0;
 8001856:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
            if (scd->sco_protocol_num_next == 1)
 800185a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800185e:	b21b      	sxth	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d002      	beq.n	800186a <SCO_VAR+0x8a>
            return 0x100u;
 8001864:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001868:	e7cb      	b.n	8001802 <SCO_VAR+0x22>
                scd->sco_protocol_num_next = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
 8001870:	e7f8      	b.n	8001864 <SCO_VAR+0x84>
        if (scd->byteToSend2 < (4))
 8001872:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8001876:	b21b      	sxth	r3, r3
 8001878:	2b03      	cmp	r3, #3
 800187a:	dc63      	bgt.n	8001944 <SCO_VAR+0x164>
            if (scd->byteToSend2 == 0)
 800187c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8001880:	b21b      	sxth	r3, r3
 8001882:	bb8b      	cbnz	r3, 80018e8 <SCO_VAR+0x108>
                uint16_t judgeType = (scd->_unit_struct[scd->structToSend2 - 1]._type) & 0xffu;
 8001884:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001886:	f8b0 3054 	ldrh.w	r3, [r0, #84]	@ 0x54
 800188a:	f06f 4c60 	mvn.w	ip, #3758096384	@ 0xe0000000
 800188e:	fa0c f383 	sxtah	r3, ip, r3
 8001892:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8001896:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800189a:	b2db      	uxtb	r3, r3
                void* tempCommonPtr = (void*)scd->_unit_struct[scd->structToSend2 - 1]._addr;
 800189c:	f8b0 2054 	ldrh.w	r2, [r0, #84]	@ 0x54
 80018a0:	fa0c f282 	sxtah	r2, ip, r2
 80018a4:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
                if (judgeType == TYJ_uint16_t)
 80018a8:	2b14      	cmp	r3, #20
 80018aa:	d030      	beq.n	800190e <SCO_VAR+0x12e>
 80018ac:	dd0a      	ble.n	80018c4 <SCO_VAR+0xe4>
 80018ae:	2b24      	cmp	r3, #36	@ 0x24
 80018b0:	d034      	beq.n	800191c <SCO_VAR+0x13c>
 80018b2:	2b32      	cmp	r3, #50	@ 0x32
 80018b4:	d135      	bne.n	8001922 <SCO_VAR+0x142>
                    scd->tempBuff = (uint32_t)tempCommonPtr;
 80018b6:	ee07 2a90 	vmov	s15, r2
 80018ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018be:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 80018c2:	e011      	b.n	80018e8 <SCO_VAR+0x108>
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d008      	beq.n	80018da <SCO_VAR+0xfa>
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d12a      	bne.n	8001922 <SCO_VAR+0x142>
                    scd->tempBuff = *tempPtr;
 80018cc:	edd2 7a00 	vldr	s15, [r2]
 80018d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d4:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 80018d8:	e006      	b.n	80018e8 <SCO_VAR+0x108>
                    scd->tempBuff = *tempPtr;
 80018da:	8813      	ldrh	r3, [r2, #0]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e4:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
            uint16_t* tempPtr = (uint16_t*)(void*)&(scd->tempBuff);
 80018e8:	f100 0c40 	add.w	ip, r0, #64	@ 0x40
            tempPtr = &tempPtr[scd->byteToSend2 >> 1];
 80018ec:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 80018f0:	f343 024e 	sbfx	r2, r3, #1, #15
            if (scd->byteToSend2++ & 0x1)
 80018f4:	f8b0 1052 	ldrh.w	r1, [r0, #82]	@ 0x52
 80018f8:	1c4b      	adds	r3, r1, #1
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
 8001900:	f011 0f01 	tst.w	r1, #1
 8001904:	d016      	beq.n	8001934 <SCO_VAR+0x154>
                return ((*tempPtr) >> 8) & 0xffu;
 8001906:	f83c 0012 	ldrh.w	r0, [ip, r2, lsl #1]
 800190a:	0a00      	lsrs	r0, r0, #8
 800190c:	e779      	b.n	8001802 <SCO_VAR+0x22>
                    scd->tempBuff = *tempPtr;
 800190e:	edd2 7a00 	vldr	s15, [r2]
 8001912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001916:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 800191a:	e7e5      	b.n	80018e8 <SCO_VAR+0x108>
                    scd->tempBuff = *tempPtr;
 800191c:	6813      	ldr	r3, [r2, #0]
 800191e:	6403      	str	r3, [r0, #64]	@ 0x40
 8001920:	e7e2      	b.n	80018e8 <SCO_VAR+0x108>
                    scd->tempBuff = *tempPtr;
 8001922:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192e:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 8001932:	e7d9      	b.n	80018e8 <SCO_VAR+0x108>
                checkUint16Sum += *tempPtr;
 8001934:	f83c 0012 	ldrh.w	r0, [ip, r2, lsl #1]
 8001938:	4a0c      	ldr	r2, [pc, #48]	@ (800196c <SCO_VAR+0x18c>)
 800193a:	8813      	ldrh	r3, [r2, #0]
 800193c:	4403      	add	r3, r0
 800193e:	8013      	strh	r3, [r2, #0]
                return (*tempPtr) & 0xffu;
 8001940:	b2c0      	uxtb	r0, r0
 8001942:	e75e      	b.n	8001802 <SCO_VAR+0x22>
            scd->byteToSend2 = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
            scd->structToSend2++;
 800194a:	f8b0 3054 	ldrh.w	r3, [r0, #84]	@ 0x54
 800194e:	3301      	adds	r3, #1
 8001950:	b21b      	sxth	r3, r3
 8001952:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
            scd->_endbyte1[0] = checkUint16Sum & 0xffu;
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <SCO_VAR+0x18c>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800195c:	b2d9      	uxtb	r1, r3
 800195e:	7011      	strb	r1, [r2, #0]
            scd->_endbyte1[1] = (checkUint16Sum >> 8) & 0xffu;
 8001960:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	7053      	strb	r3, [r2, #1]
            return SCO_VAR(scd);
 8001966:	f7ff ff3b 	bl	80017e0 <SCO_VAR>
 800196a:	e74a      	b.n	8001802 <SCO_VAR+0x22>
 800196c:	24000538 	.word	0x24000538

08001970 <SCO_DEBUG>:
{
    // debug用，只会发0
    (void)scd;

    // 若模式没改就发0
    if (scd->sco_protocol_num_next == 2)
 8001970:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8001974:	b21b      	sxth	r3, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d002      	beq.n	8001980 <SCO_DEBUG+0x10>
    {
        return 0;
    }
    // 否则发送0x100，切换协议
    return 0x100u;
 800197a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800197e:	4770      	bx	lr
        return 0;
 8001980:	2000      	movs	r0, #0
}
 8001982:	4770      	bx	lr

08001984 <SCO_DUMP>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(SCO_DUMP, MEM_MACRO);
#endif
static uint16_t SCO_DUMP(struct SCD_CTRL_STRUCT* scd)
{
 8001984:	b508      	push	{r3, lr}
#define SCO_ENDBYTE_NUM2 8

    static uint16_t checkUint16Sum = 0;

    if (scd->structToSend3 >= scd->dumpNumCnt)
 8001986:	f8b0 2058 	ldrh.w	r2, [r0, #88]	@ 0x58
 800198a:	b212      	sxth	r2, r2
 800198c:	f8b0 305c 	ldrh.w	r3, [r0, #92]	@ 0x5c
 8001990:	b21b      	sxth	r3, r3
 8001992:	429a      	cmp	r2, r3
 8001994:	db37      	blt.n	8001a06 <SCO_DUMP+0x82>
    {
        // 正常条件下的结束位
        if (scd->byteToSend3 == 0)
 8001996:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 800199a:	b21b      	sxth	r3, r3
 800199c:	b95b      	cbnz	r3, 80019b6 <SCO_DUMP+0x32>
        {
            // 首次进入
            scd->_endbyte2[0] = 0xcdu;
 800199e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80019a0:	22cd      	movs	r2, #205	@ 0xcd
 80019a2:	701a      	strb	r2, [r3, #0]
            scd->_endbyte2[1] = 0xccu;
 80019a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80019a6:	22cc      	movs	r2, #204	@ 0xcc
 80019a8:	705a      	strb	r2, [r3, #1]
            scd->_endbyte2[2] = 0xcu;
 80019aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80019ac:	220c      	movs	r2, #12
 80019ae:	709a      	strb	r2, [r3, #2]
            scd->_endbyte2[3] = 0x40u;
 80019b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80019b2:	2240      	movs	r2, #64	@ 0x40
 80019b4:	70da      	strb	r2, [r3, #3]
        }
        if (scd->byteToSend3 < SCO_ENDBYTE_NUM2)
 80019b6:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	2b07      	cmp	r3, #7
 80019be:	dc0a      	bgt.n	80019d6 <SCO_DUMP+0x52>
        {
            return scd->_endbyte2[scd->byteToSend3++];
 80019c0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80019c2:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
 80019d0:	5c88      	ldrb	r0, [r1, r2]
 80019d2:	b2c0      	uxtb	r0, r0
            scd->_endbyte2[4] = checkUint16Sum & 0xffu;
            scd->_endbyte2[5] = (checkUint16Sum >> 8) & 0xffu;
            return SCO_DUMP(scd);
        }
    }
}
 80019d4:	bd08      	pop	{r3, pc}
            scd->byteToSend3 = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
            scd->structToSend3 = 0;
 80019dc:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58
            checkUint16Sum = 0;
 80019e0:	4a75      	ldr	r2, [pc, #468]	@ (8001bb8 <SCO_DUMP+0x234>)
 80019e2:	8013      	strh	r3, [r2, #0]
            scd->dumpPkgCnt = 2;
 80019e4:	2202      	movs	r2, #2
 80019e6:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
            scd->ifContPkg = 0;
 80019ea:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
            if (scd->sco_protocol_num_next == 3)
 80019ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d002      	beq.n	80019fe <SCO_DUMP+0x7a>
            return 0x100u;
 80019f8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80019fc:	e7ea      	b.n	80019d4 <SCO_DUMP+0x50>
                scd->sco_protocol_num_next = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
 8001a04:	e7f8      	b.n	80019f8 <SCO_DUMP+0x74>
    else if (scd->dumpPkgCnt > MAX_NUMS_PER_FRAME)
 8001a06:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8001a10:	4293      	cmp	r3, r2
 8001a12:	dd3b      	ble.n	8001a8c <SCO_DUMP+0x108>
        if (scd->byteToSend3 == 0)
 8001a14:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	b97b      	cbnz	r3, 8001a3c <SCO_DUMP+0xb8>
            if (scd->ifContPkg)
 8001a1c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	b1db      	cbz	r3, 8001a5c <SCO_DUMP+0xd8>
                scd->_endbyte2[0] = 0xcdu;
 8001a24:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001a26:	22cd      	movs	r2, #205	@ 0xcd
 8001a28:	701a      	strb	r2, [r3, #0]
                scd->_endbyte2[1] = 0xccu;
 8001a2a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001a2c:	22cc      	movs	r2, #204	@ 0xcc
 8001a2e:	705a      	strb	r2, [r3, #1]
                scd->_endbyte2[2] = 0x8cu;
 8001a30:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001a32:	228c      	movs	r2, #140	@ 0x8c
 8001a34:	709a      	strb	r2, [r3, #2]
                scd->_endbyte2[3] = 0x3fu;
 8001a36:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001a38:	223f      	movs	r2, #63	@ 0x3f
 8001a3a:	70da      	strb	r2, [r3, #3]
        if (scd->byteToSend3 < SCO_ENDBYTE_NUM2)
 8001a3c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	2b07      	cmp	r3, #7
 8001a44:	dc14      	bgt.n	8001a70 <SCO_DUMP+0xec>
            return scd->_endbyte2[scd->byteToSend3++];
 8001a46:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001a48:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
 8001a56:	5c88      	ldrb	r0, [r1, r2]
 8001a58:	b2c0      	uxtb	r0, r0
 8001a5a:	e7bb      	b.n	80019d4 <SCO_DUMP+0x50>
                scd->_endbyte2[0] = 0;
 8001a5c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8001a5e:	2300      	movs	r3, #0
 8001a60:	7013      	strb	r3, [r2, #0]
                scd->_endbyte2[1] = 0;
 8001a62:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8001a64:	7053      	strb	r3, [r2, #1]
                scd->_endbyte2[2] = 0;
 8001a66:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8001a68:	7093      	strb	r3, [r2, #2]
                scd->_endbyte2[3] = 0;
 8001a6a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8001a6c:	70d3      	strb	r3, [r2, #3]
 8001a6e:	e7e5      	b.n	8001a3c <SCO_DUMP+0xb8>
            scd->byteToSend3 = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
            checkUint16Sum = 0;
 8001a76:	4a50      	ldr	r2, [pc, #320]	@ (8001bb8 <SCO_DUMP+0x234>)
 8001a78:	8013      	strh	r3, [r2, #0]
            scd->dumpPkgCnt = 2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
            scd->ifContPkg = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
            return SCO_DUMP(scd);
 8001a86:	f7ff ff7d 	bl	8001984 <SCO_DUMP>
 8001a8a:	e7a3      	b.n	80019d4 <SCO_DUMP+0x50>
        if (scd->byteToSend3 < (4))
 8001a8c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	dc75      	bgt.n	8001b82 <SCO_DUMP+0x1fe>
            if (scd->byteToSend3 == 0)
 8001a96:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	bbb3      	cbnz	r3, 8001b0c <SCO_DUMP+0x188>
                uint16_t judgeType = (scd->_unit_struct[scd->dumpTarget]._type) & 0xffu;
 8001a9e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001aa0:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8001aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aae:	b2db      	uxtb	r3, r3
                void* tempCommonPtr = (void*)scd->_unit_struct[scd->dumpTarget]._addr;
 8001ab0:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 8001ab4:	b212      	sxth	r2, r2
 8001ab6:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
                if (judgeType == TYJ_uint16_t)
 8001aba:	2b14      	cmp	r3, #20
 8001abc:	d039      	beq.n	8001b32 <SCO_DUMP+0x1ae>
 8001abe:	dd0a      	ble.n	8001ad6 <SCO_DUMP+0x152>
 8001ac0:	2b24      	cmp	r3, #36	@ 0x24
 8001ac2:	d042      	beq.n	8001b4a <SCO_DUMP+0x1c6>
 8001ac4:	2b32      	cmp	r3, #50	@ 0x32
 8001ac6:	d148      	bne.n	8001b5a <SCO_DUMP+0x1d6>
                    scd->tempBuff = (uint32_t)tempCommonPtr;
 8001ac8:	ee07 2a90 	vmov	s15, r2
 8001acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad0:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 8001ad4:	e01a      	b.n	8001b0c <SCO_DUMP+0x188>
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d00d      	beq.n	8001af6 <SCO_DUMP+0x172>
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d13d      	bne.n	8001b5a <SCO_DUMP+0x1d6>
                    scd->tempBuff = tempPtr[scd->structToSend3];
 8001ade:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af0:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 8001af4:	e00a      	b.n	8001b0c <SCO_DUMP+0x188>
                    scd->tempBuff = tempPtr[scd->structToSend3];
 8001af6:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b08:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
            uint16_t* tempPtr = (uint16_t*)(void*)&(scd->tempBuff);
 8001b0c:	f100 0c40 	add.w	ip, r0, #64	@ 0x40
            tempPtr = &tempPtr[scd->byteToSend3 >> 1];
 8001b10:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8001b14:	f343 024e 	sbfx	r2, r3, #1, #15
            if (scd->byteToSend3++ & 0x1)
 8001b18:	f8b0 1056 	ldrh.w	r1, [r0, #86]	@ 0x56
 8001b1c:	1c4b      	adds	r3, r1, #1
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
 8001b24:	f011 0f01 	tst.w	r1, #1
 8001b28:	d023      	beq.n	8001b72 <SCO_DUMP+0x1ee>
                return ((*tempPtr) >> 8) & 0xffu;
 8001b2a:	f83c 0012 	ldrh.w	r0, [ip, r2, lsl #1]
 8001b2e:	0a00      	lsrs	r0, r0, #8
 8001b30:	e750      	b.n	80019d4 <SCO_DUMP+0x50>
                    scd->tempBuff = tempPtr[scd->structToSend3];
 8001b32:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b44:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 8001b48:	e7e0      	b.n	8001b0c <SCO_DUMP+0x188>
                    scd->tempBuff = tempPtr[scd->structToSend3];
 8001b4a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001b54:	6813      	ldr	r3, [r2, #0]
 8001b56:	6403      	str	r3, [r0, #64]	@ 0x40
 8001b58:	e7d8      	b.n	8001b0c <SCO_DUMP+0x188>
                    scd->tempBuff = tempPtr[scd->structToSend3];
 8001b5a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6c:	edc0 7a10 	vstr	s15, [r0, #64]	@ 0x40
 8001b70:	e7cc      	b.n	8001b0c <SCO_DUMP+0x188>
                checkUint16Sum += *tempPtr;
 8001b72:	f83c 0012 	ldrh.w	r0, [ip, r2, lsl #1]
 8001b76:	4a10      	ldr	r2, [pc, #64]	@ (8001bb8 <SCO_DUMP+0x234>)
 8001b78:	8813      	ldrh	r3, [r2, #0]
 8001b7a:	4403      	add	r3, r0
 8001b7c:	8013      	strh	r3, [r2, #0]
                return (*tempPtr) & 0xffu;
 8001b7e:	b2c0      	uxtb	r0, r0
 8001b80:	e728      	b.n	80019d4 <SCO_DUMP+0x50>
            scd->byteToSend3 = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
            scd->structToSend3++;
 8001b88:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58
            scd->dumpPkgCnt++;
 8001b94:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
            scd->_endbyte2[4] = checkUint16Sum & 0xffu;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <SCO_DUMP+0x234>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8001ba6:	b2d9      	uxtb	r1, r3
 8001ba8:	7111      	strb	r1, [r2, #4]
            scd->_endbyte2[5] = (checkUint16Sum >> 8) & 0xffu;
 8001baa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	7153      	strb	r3, [r2, #5]
            return SCO_DUMP(scd);
 8001bb0:	f7ff fee8 	bl	8001984 <SCO_DUMP>
 8001bb4:	e70e      	b.n	80019d4 <SCO_DUMP+0x50>
 8001bb6:	bf00      	nop
 8001bb8:	2400053a 	.word	0x2400053a

08001bbc <SCO_PRINT>:
static uint16_t SCO_PRINT(struct SCD_CTRL_STRUCT* scd)
{
#define SCO_ENDBYTE_NUM3 2

    // 用判断代替求余
    if (scd->byteToSend4 == 4)
 8001bbc:	f8b0 3066 	ldrh.w	r3, [r0, #102]	@ 0x66
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d024      	beq.n	8001c10 <SCO_PRINT+0x54>
    {
        scd->byteToSend4 = 0;
    }
    if (scd->byteToSend4 == 0)
 8001bc6:	f8b0 3066 	ldrh.w	r3, [r0, #102]	@ 0x66
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d142      	bne.n	8001c56 <SCO_PRINT+0x9a>
    {
        // 规划帧
        if (scd->byteToPrint < scd->isPrintBusyFlg)
 8001bd0:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
 8001bd4:	b212      	sxth	r2, r2
 8001bd6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	da1b      	bge.n	8001c18 <SCO_PRINT+0x5c>
        {
            scd->_endbyte3[0] = scd->_printBuff[scd->byteToPrint++];
 8001be0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8001be4:	b219      	sxth	r1, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	f8a0 3064 	strh.w	r3, [r0, #100]	@ 0x64
 8001bee:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8001bf0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001bf2:	5c5b      	ldrb	r3, [r3, r1]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	7013      	strb	r3, [r2, #0]
            // 发完了
            scd->byteToPrint = 0;
            scd->isPrintBusyFlg = 0;
            return 0x100u;
        }
        if (scd->byteToPrint < scd->isPrintBusyFlg)
 8001bf8:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
 8001bfc:	b212      	sxth	r2, r2
 8001bfe:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	429a      	cmp	r2, r3
 8001c06:	db0f      	blt.n	8001c28 <SCO_PRINT+0x6c>
            scd->_endbyte3[1] = scd->_printBuff[scd->byteToPrint++];
        }
        else
        {
            // 第二字节，没东西但还是要发一帧
            scd->_endbyte3[1] = 0;
 8001c08:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	705a      	strb	r2, [r3, #1]
 8001c0e:	e017      	b.n	8001c40 <SCO_PRINT+0x84>
        scd->byteToSend4 = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
 8001c16:	e7d6      	b.n	8001bc6 <SCO_PRINT+0xa>
            scd->byteToPrint = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8a0 3064 	strh.w	r3, [r0, #100]	@ 0x64
            scd->isPrintBusyFlg = 0;
 8001c1e:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
            return 0x100u;
 8001c22:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c26:	4770      	bx	lr
            scd->_endbyte3[1] = scd->_printBuff[scd->byteToPrint++];
 8001c28:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8001c2c:	b219      	sxth	r1, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	f8a0 3064 	strh.w	r3, [r0, #100]	@ 0x64
 8001c36:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8001c38:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c3a:	5c5b      	ldrb	r3, [r3, r1]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	7053      	strb	r3, [r2, #1]
        }
        return scd->_endbyte3[scd->byteToSend4++];
 8001c40:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001c42:	f8b0 3066 	ldrh.w	r3, [r0, #102]	@ 0x66
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
 8001c50:	5c88      	ldrb	r0, [r1, r2]
 8001c52:	b2c0      	uxtb	r0, r0
 8001c54:	4770      	bx	lr
    }
    return scd->_endbyte3[scd->byteToSend4++];
 8001c56:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001c58:	f8b0 3066 	ldrh.w	r3, [r0, #102]	@ 0x66
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
 8001c66:	5c88      	ldrb	r0, [r1, r2]
 8001c68:	b2c0      	uxtb	r0, r0
}
 8001c6a:	4770      	bx	lr

08001c6c <SCD_Rev1Byte>:
{
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	4604      	mov	r4, r0
    volatile unsigned char(*recBuff)[SCD_REVBUFF_SIZE] = scd->_recBuff;
 8001c70:	6a85      	ldr	r5, [r0, #40]	@ 0x28
    if (data == '!')
 8001c72:	2921      	cmp	r1, #33	@ 0x21
 8001c74:	d010      	beq.n	8001c98 <SCD_Rev1Byte+0x2c>
        recBuff[scd->bufNum][scd->bytesRec++] = data;
 8001c76:	f8b0 3046 	ldrh.w	r3, [r0, #70]	@ 0x46
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8001c84:	f8b0 3048 	ldrh.w	r3, [r0, #72]	@ 0x48
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	f8a0 3048 	strh.w	r3, [r0, #72]	@ 0x48
 8001c92:	b2c9      	uxtb	r1, r1
 8001c94:	54a9      	strb	r1, [r5, r2]
}
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
        if (scd->bytesRec > 0)
 8001c98:	f8b0 3048 	ldrh.w	r3, [r0, #72]	@ 0x48
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	ddf9      	ble.n	8001c96 <SCD_Rev1Byte+0x2a>
            for (int16_t ii = 0; ii < scd->bytesRec; ii++)
 8001ca2:	2300      	movs	r3, #0
            uint16_t isSame = 1;
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	e001      	b.n	8001cac <SCD_Rev1Byte+0x40>
            for (int16_t ii = 0; ii < scd->bytesRec; ii++)
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 8001cb0:	b212      	sxth	r2, r2
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dd09      	ble.n	8001cca <SCD_Rev1Byte+0x5e>
                if (recBuff[0][ii] != recBuff[1][ii])
 8001cb6:	5ce9      	ldrb	r1, [r5, r3]
 8001cb8:	b2c9      	uxtb	r1, r1
 8001cba:	18ea      	adds	r2, r5, r3
 8001cbc:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	4291      	cmp	r1, r2
 8001cc4:	d0f0      	beq.n	8001ca8 <SCD_Rev1Byte+0x3c>
                    isSame = 0;
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	e7ee      	b.n	8001ca8 <SCD_Rev1Byte+0x3c>
            if (isSame)
 8001cca:	b950      	cbnz	r0, 8001ce2 <SCD_Rev1Byte+0x76>
                if (scd->bufNum)
 8001ccc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	b19b      	cbz	r3, 8001cfc <SCD_Rev1Byte+0x90>
                    scd->bufNum = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
            scd->bytesRec = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8001ce0:	e7d9      	b.n	8001c96 <SCD_Rev1Byte+0x2a>
                recBuff[0][scd->bytesRec] = 0;
 8001ce2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	2600      	movs	r6, #0
 8001cea:	54ee      	strb	r6, [r5, r3]
                SCD_cmd_handle(scd);
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff fc2f 	bl	8001550 <SCD_cmd_handle>
                scd->bufNum = 0;
 8001cf2:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
                recBuff[1][0] = 0;
 8001cf6:	f885 6028 	strb.w	r6, [r5, #40]	@ 0x28
 8001cfa:	e7ee      	b.n	8001cda <SCD_Rev1Byte+0x6e>
                    scd->bufNum = 1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8001d02:	e7ea      	b.n	8001cda <SCD_Rev1Byte+0x6e>

08001d04 <scd_send1Byte>:

#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(scd_send1Byte, MEM_MACRO);
#endif
uint16_t scd_send1Byte(struct SCD_CTRL_STRUCT* scd)
{
 8001d04:	b510      	push	{r4, lr}
 8001d06:	4604      	mov	r4, r0
    uint16_t ret;
    ret = SCD_PROTOCOL_FCNS[scd->sco_protocol_num](scd);
 8001d08:	f8b0 304e 	ldrh.w	r3, [r0, #78]	@ 0x4e
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <scd_send1Byte+0x44>)
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	4798      	blx	r3
    if (ret & (((uint16_t)0xffu) << 8))
 8001d16:	28ff      	cmp	r0, #255	@ 0xff
 8001d18:	d90e      	bls.n	8001d38 <scd_send1Byte+0x34>
    {
        // 到结尾了,换协议
        if (scd->isPrintBusyFlg)
 8001d1a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	b163      	cbz	r3, 8001d3c <scd_send1Byte+0x38>
        {
            // 确保print优先级最高，不会被chg命令覆盖
            scd->sco_protocol_num = 4;
 8001d22:	2304      	movs	r3, #4
 8001d24:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
        }
        else
        {
            scd->sco_protocol_num = scd->sco_protocol_num_next;
        }
        ret = SCD_PROTOCOL_FCNS[scd->sco_protocol_num](scd);
 8001d28:	f8b4 304e 	ldrh.w	r3, [r4, #78]	@ 0x4e
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	4a06      	ldr	r2, [pc, #24]	@ (8001d48 <scd_send1Byte+0x44>)
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	4620      	mov	r0, r4
 8001d36:	4798      	blx	r3
    }
    return ret & 0xffu;
}
 8001d38:	b2c0      	uxtb	r0, r0
 8001d3a:	bd10      	pop	{r4, pc}
            scd->sco_protocol_num = scd->sco_protocol_num_next;
 8001d3c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8001d40:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 8001d44:	e7f0      	b.n	8001d28 <scd_send1Byte+0x24>
 8001d46:	bf00      	nop
 8001d48:	0800df4c 	.word	0x0800df4c

08001d4c <scd_print2>:
#if SCD_IF_USE_RAM_FUNCS
#pragma CODE_SECTION(scd_print2, MEM_MACRO);
#endif
uint16_t scd_print2(struct SCD_CTRL_STRUCT* scd, const char* printDataPtr, int len)
{
    if (scd->isPrintBusyFlg)
 8001d4c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	b99b      	cbnz	r3, 8001d7c <scd_print2+0x30>
    {
        return 1;
    }
    int chrCnt = 0;
    while (chrCnt < len)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	da13      	bge.n	8001d80 <scd_print2+0x34>
{
 8001d58:	b410      	push	{r4}
    {
        scd->_printBuff[chrCnt] = printDataPtr[chrCnt];
 8001d5a:	f811 c003 	ldrb.w	ip, [r1, r3]
 8001d5e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8001d60:	f804 c003 	strb.w	ip, [r4, r3]
        chrCnt++;
 8001d64:	3301      	adds	r3, #1
        if (chrCnt == SCD_PRINTBUFF_SIZE)
 8001d66:	2b80      	cmp	r3, #128	@ 0x80
 8001d68:	d001      	beq.n	8001d6e <scd_print2+0x22>
    while (chrCnt < len)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	dbf5      	blt.n	8001d5a <scd_print2+0xe>
        {
            break;
        }
    }
    scd->isPrintBusyFlg = chrCnt;
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62

    return 0;
 8001d74:	2000      	movs	r0, #0
}
 8001d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d7a:	4770      	bx	lr
        return 1;
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	4770      	bx	lr
    scd->isPrintBusyFlg = chrCnt;
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
    return 0;
 8001d86:	2000      	movs	r0, #0
}
 8001d88:	4770      	bx	lr
	...

08001d8c <scd_init_1>:
SCD_REG_ADD(test1, int16_t)
SCD_REG_ADD(test2, int32_t)
SCD_REG_ADD(test3, uint16_t)
SCD_REG_ADD(test4, uint32_t)
SCD_REG_ADD(test5, float)
SCD_REG_END(_1)
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <scd_init_1+0x74>)
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <scd_init_1+0x78>)
 8001d90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d92:	2200      	movs	r2, #0
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	f242 710f 	movw	r1, #9999	@ 0x270f
 8001d9a:	8059      	strh	r1, [r3, #2]
 8001d9c:	491a      	ldr	r1, [pc, #104]	@ (8001e08 <scd_init_1+0x7c>)
 8001d9e:	6299      	str	r1, [r3, #40]	@ 0x28
 8001da0:	491a      	ldr	r1, [pc, #104]	@ (8001e0c <scd_init_1+0x80>)
 8001da2:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8001da4:	491a      	ldr	r1, [pc, #104]	@ (8001e10 <scd_init_1+0x84>)
 8001da6:	6319      	str	r1, [r3, #48]	@ 0x30
 8001da8:	491a      	ldr	r1, [pc, #104]	@ (8001e14 <scd_init_1+0x88>)
 8001daa:	6359      	str	r1, [r3, #52]	@ 0x34
 8001dac:	491a      	ldr	r1, [pc, #104]	@ (8001e18 <scd_init_1+0x8c>)
 8001dae:	6399      	str	r1, [r3, #56]	@ 0x38
 8001db0:	2105      	movs	r1, #5
 8001db2:	f8a3 1044 	strh.w	r1, [r3, #68]	@ 0x44
 8001db6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8001dba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8001dbe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
 8001dc2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6419      	str	r1, [r3, #64]	@ 0x40
 8001dca:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8001dce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8001dd2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8001dd6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8001dda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8001dde:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 8001de2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 8001de6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001dea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8001dee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8001df2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8001df6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
 8001dfa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 8001dfe:	4770      	bx	lr
 8001e00:	2400053c 	.word	0x2400053c
 8001e04:	0800e388 	.word	0x0800e388
 8001e08:	24000624 	.word	0x24000624
 8001e0c:	240005a4 	.word	0x240005a4
 8001e10:	24000020 	.word	0x24000020
 8001e14:	24000018 	.word	0x24000018
 8001e18:	24000014 	.word	0x24000014

08001e1c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e1c:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e1e:	4813      	ldr	r0, [pc, #76]	@ (8001e6c <MX_SPI1_Init+0x50>)
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_SPI1_Init+0x54>)
 8001e22:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e28:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e2e:	2203      	movs	r2, #3
 8001e30:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e32:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e34:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e36:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e3a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e3c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e3e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e40:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e42:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001e44:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e4a:	6342      	str	r2, [r0, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e4c:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e4e:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e50:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e52:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e54:	6483      	str	r3, [r0, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e56:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e58:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e5a:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e5c:	6583      	str	r3, [r0, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e5e:	f005 fa0b 	bl	8007278 <HAL_SPI_Init>
 8001e62:	b900      	cbnz	r0, 8001e66 <MX_SPI1_Init+0x4a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e64:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e66:	f7fe ff70 	bl	8000d4a <Error_Handler>
}
 8001e6a:	e7fb      	b.n	8001e64 <MX_SPI1_Init+0x48>
 8001e6c:	240006fc 	.word	0x240006fc
 8001e70:	40013000 	.word	0x40013000

08001e74 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001e74:	b508      	push	{r3, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001e76:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <MX_SPI4_Init+0x54>)
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <MX_SPI4_Init+0x58>)
 8001e7a:	6003      	str	r3, [r0, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e80:	6043      	str	r3, [r0, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001e82:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8001e86:	6083      	str	r3, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	60c3      	str	r3, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e90:	6143      	str	r3, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e92:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e96:	6182      	str	r2, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e98:	61c3      	str	r3, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e9a:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e9c:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001ea0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ea2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ea6:	6342      	str	r2, [r0, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ea8:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001eaa:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eac:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eae:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001eb0:	6483      	str	r3, [r0, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001eb2:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001eb4:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001eb6:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001eb8:	6583      	str	r3, [r0, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001eba:	f005 f9dd 	bl	8007278 <HAL_SPI_Init>
 8001ebe:	b900      	cbnz	r0, 8001ec2 <MX_SPI4_Init+0x4e>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001ec0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ec2:	f7fe ff42 	bl	8000d4a <Error_Handler>
}
 8001ec6:	e7fb      	b.n	8001ec0 <MX_SPI4_Init+0x4c>
 8001ec8:	24000674 	.word	0x24000674
 8001ecc:	40013400 	.word	0x40013400

08001ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ed4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	9135      	str	r1, [sp, #212]	@ 0xd4
 8001eda:	9136      	str	r1, [sp, #216]	@ 0xd8
 8001edc:	9137      	str	r1, [sp, #220]	@ 0xdc
 8001ede:	9138      	str	r1, [sp, #224]	@ 0xe0
 8001ee0:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee2:	22c0      	movs	r2, #192	@ 0xc0
 8001ee4:	a804      	add	r0, sp, #16
 8001ee6:	f00a ff3b 	bl	800cd60 <memset>
  if(spiHandle->Instance==SPI1)
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	4a38      	ldr	r2, [pc, #224]	@ (8001fd0 <HAL_SPI_MspInit+0x100>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d004      	beq.n	8001efc <HAL_SPI_MspInit+0x2c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI4)
 8001ef2:	4a38      	ldr	r2, [pc, #224]	@ (8001fd4 <HAL_SPI_MspInit+0x104>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d035      	beq.n	8001f64 <HAL_SPI_MspInit+0x94>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001ef8:	b03a      	add	sp, #232	@ 0xe8
 8001efa:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001efc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f00:	2300      	movs	r3, #0
 8001f02:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f06:	a804      	add	r0, sp, #16
 8001f08:	f004 fa46 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 8001f0c:	bb38      	cbnz	r0, 8001f5e <HAL_SPI_MspInit+0x8e>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0e:	4b32      	ldr	r3, [pc, #200]	@ (8001fd8 <HAL_SPI_MspInit+0x108>)
 8001f10:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001f14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f18:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001f1c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001f20:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001f24:	9200      	str	r2, [sp, #0]
 8001f26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f2c:	f042 0202 	orr.w	r2, r2, #2
 8001f30:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f40:	2338      	movs	r3, #56	@ 0x38
 8001f42:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	9338      	str	r3, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f50:	2305      	movs	r3, #5
 8001f52:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f54:	a935      	add	r1, sp, #212	@ 0xd4
 8001f56:	4821      	ldr	r0, [pc, #132]	@ (8001fdc <HAL_SPI_MspInit+0x10c>)
 8001f58:	f001 fa6e 	bl	8003438 <HAL_GPIO_Init>
 8001f5c:	e7cc      	b.n	8001ef8 <HAL_SPI_MspInit+0x28>
      Error_Handler();
 8001f5e:	f7fe fef4 	bl	8000d4a <Error_Handler>
 8001f62:	e7d4      	b.n	8001f0e <HAL_SPI_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001f64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6e:	a804      	add	r0, sp, #16
 8001f70:	f004 fa12 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	bb40      	cbnz	r0, 8001fc8 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_SPI_MspInit+0x108>)
 8001f78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f80:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001f84:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001f88:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001f8c:	9202      	str	r2, [sp, #8]
 8001f8e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f94:	f042 0210 	orr.w	r2, r2, #16
 8001f98:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	9303      	str	r3, [sp, #12]
 8001fa6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8001fa8:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 8001fac:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	9338      	str	r3, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fba:	2305      	movs	r3, #5
 8001fbc:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fbe:	a935      	add	r1, sp, #212	@ 0xd4
 8001fc0:	4807      	ldr	r0, [pc, #28]	@ (8001fe0 <HAL_SPI_MspInit+0x110>)
 8001fc2:	f001 fa39 	bl	8003438 <HAL_GPIO_Init>
}
 8001fc6:	e797      	b.n	8001ef8 <HAL_SPI_MspInit+0x28>
      Error_Handler();
 8001fc8:	f7fe febf 	bl	8000d4a <Error_Handler>
 8001fcc:	e7d3      	b.n	8001f76 <HAL_SPI_MspInit+0xa6>
 8001fce:	bf00      	nop
 8001fd0:	40013000 	.word	0x40013000
 8001fd4:	40013400 	.word	0x40013400
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	58020400 	.word	0x58020400
 8001fe0:	58021000 	.word	0x58021000

08001fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe4:	b500      	push	{lr}
 8001fe6:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_MspInit+0x30>)
 8001fea:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001fee:	f042 0202 	orr.w	r2, r2, #2
 8001ff2:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	210f      	movs	r1, #15
 8002006:	f06f 0001 	mvn.w	r0, #1
 800200a:	f000 fbd1 	bl	80027b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200e:	b003      	add	sp, #12
 8002010:	f85d fb04 	ldr.w	pc, [sp], #4
 8002014:	58024400 	.word	0x58024400

08002018 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <NMI_Handler>

0800201a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <HardFault_Handler>

0800201c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <MemManage_Handler>

0800201e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <BusFault_Handler>

08002020 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler>

08002022 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002024:	4770      	bx	lr

08002026 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202a:	f000 fb39 	bl	80026a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202e:	bd08      	pop	{r3, pc}

08002030 <DMA1_Stream0_IRQHandler>:
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <DMA1_Stream0_IRQHandler+0x4c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f013 0f20 	tst.w	r3, #32
 8002038:	d01e      	beq.n	8002078 <DMA1_Stream0_IRQHandler+0x48>

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800203a:	b510      	push	{r4, lr}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <DMA1_Stream0_IRQHandler+0x4c>)
 800203e:	2220      	movs	r2, #32
 8002040:	609a      	str	r2, [r3, #8]
  return (READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CT));
 8002042:	691b      	ldr	r3, [r3, #16]

  // usart1 rx
  if (LL_DMA_IsActiveFlag_TC0(DMA1))
  {
    LL_DMA_ClearFlag_TC0(DMA1);
    if (LL_DMA_GetCurrentTargetMem(DMA1, LL_DMA_STREAM_0) == LL_DMA_CURRENTTARGETMEM0)
 8002044:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002048:	d00b      	beq.n	8002062 <DMA1_Stream0_IRQHandler+0x32>
      }
    }
    else
    {
      // at mem1, process mem0
      for (int i = 0; i < USART_REV_BUFF_SIZE; i++)
 800204a:	2400      	movs	r4, #0
 800204c:	e011      	b.n	8002072 <DMA1_Stream0_IRQHandler+0x42>
        SCD_Rev1Byte(&scd_1, scd_rev_2buffer[1][i]);
 800204e:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <DMA1_Stream0_IRQHandler+0x50>)
 8002050:	4423      	add	r3, r4
 8002052:	7919      	ldrb	r1, [r3, #4]
 8002054:	480b      	ldr	r0, [pc, #44]	@ (8002084 <DMA1_Stream0_IRQHandler+0x54>)
 8002056:	f7ff fe09 	bl	8001c6c <SCD_Rev1Byte>
      for (int i = 0; i < USART_REV_BUFF_SIZE; i++)
 800205a:	3401      	adds	r4, #1
 800205c:	2c03      	cmp	r4, #3
 800205e:	ddf6      	ble.n	800204e <DMA1_Stream0_IRQHandler+0x1e>

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002060:	bd10      	pop	{r4, pc}
      for (int i = 0; i < USART_REV_BUFF_SIZE; i++)
 8002062:	2400      	movs	r4, #0
 8002064:	e7fa      	b.n	800205c <DMA1_Stream0_IRQHandler+0x2c>
        SCD_Rev1Byte(&scd_1, scd_rev_2buffer[0][i]);
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <DMA1_Stream0_IRQHandler+0x50>)
 8002068:	5d19      	ldrb	r1, [r3, r4]
 800206a:	4806      	ldr	r0, [pc, #24]	@ (8002084 <DMA1_Stream0_IRQHandler+0x54>)
 800206c:	f7ff fdfe 	bl	8001c6c <SCD_Rev1Byte>
      for (int i = 0; i < USART_REV_BUFF_SIZE; i++)
 8002070:	3401      	adds	r4, #1
 8002072:	2c03      	cmp	r4, #3
 8002074:	ddf7      	ble.n	8002066 <DMA1_Stream0_IRQHandler+0x36>
 8002076:	e7f3      	b.n	8002060 <DMA1_Stream0_IRQHandler+0x30>
    while (1)
 8002078:	e7fe      	b.n	8002078 <DMA1_Stream0_IRQHandler+0x48>
 800207a:	bf00      	nop
 800207c:	40020000 	.word	0x40020000
 8002080:	30000010 	.word	0x30000010
 8002084:	2400053c 	.word	0x2400053c

08002088 <DMA1_Stream1_IRQHandler>:
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF1) == (DMA_LISR_TCIF1)) ? 1UL : 0UL);
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <DMA1_Stream1_IRQHandler+0x4c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002090:	d01f      	beq.n	80020d2 <DMA1_Stream1_IRQHandler+0x4a>

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002092:	b510      	push	{r4, lr}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8002094:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <DMA1_Stream1_IRQHandler+0x4c>)
 8002096:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800209a:	609a      	str	r2, [r3, #8]
  return (READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CT));
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28

  // usart1 tx
  if (LL_DMA_IsActiveFlag_TC1(DMA1))
  {
    LL_DMA_ClearFlag_TC1(DMA1);
    if (LL_DMA_GetCurrentTargetMem(DMA1, LL_DMA_STREAM_1) == LL_DMA_CURRENTTARGETMEM0)
 800209e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80020a2:	d00b      	beq.n	80020bc <DMA1_Stream1_IRQHandler+0x34>
      }
    }
    else
    {
      // at mem1, process mem0
      for (int i = 0; i < USART_SEND_BUFF_SIZE; i++)
 80020a4:	2400      	movs	r4, #0
 80020a6:	e011      	b.n	80020cc <DMA1_Stream1_IRQHandler+0x44>
        scd_send_2buffer[1][i] = scd_send1Byte(&scd_1);
 80020a8:	480b      	ldr	r0, [pc, #44]	@ (80020d8 <DMA1_Stream1_IRQHandler+0x50>)
 80020aa:	f7ff fe2b 	bl	8001d04 <scd_send1Byte>
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <DMA1_Stream1_IRQHandler+0x54>)
 80020b0:	4423      	add	r3, r4
 80020b2:	7218      	strb	r0, [r3, #8]
      for (int i = 0; i < USART_SEND_BUFF_SIZE; i++)
 80020b4:	3401      	adds	r4, #1
 80020b6:	2c07      	cmp	r4, #7
 80020b8:	ddf6      	ble.n	80020a8 <DMA1_Stream1_IRQHandler+0x20>

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020ba:	bd10      	pop	{r4, pc}
      for (int i = 0; i < USART_SEND_BUFF_SIZE; i++)
 80020bc:	2400      	movs	r4, #0
 80020be:	e7fa      	b.n	80020b6 <DMA1_Stream1_IRQHandler+0x2e>
        scd_send_2buffer[0][i] = scd_send1Byte(&scd_1);
 80020c0:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <DMA1_Stream1_IRQHandler+0x50>)
 80020c2:	f7ff fe1f 	bl	8001d04 <scd_send1Byte>
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <DMA1_Stream1_IRQHandler+0x54>)
 80020c8:	5518      	strb	r0, [r3, r4]
      for (int i = 0; i < USART_SEND_BUFF_SIZE; i++)
 80020ca:	3401      	adds	r4, #1
 80020cc:	2c07      	cmp	r4, #7
 80020ce:	ddf7      	ble.n	80020c0 <DMA1_Stream1_IRQHandler+0x38>
 80020d0:	e7f3      	b.n	80020ba <DMA1_Stream1_IRQHandler+0x32>
    while (1)
 80020d2:	e7fe      	b.n	80020d2 <DMA1_Stream1_IRQHandler+0x4a>
 80020d4:	40020000 	.word	0x40020000
 80020d8:	2400053c 	.word	0x2400053c
 80020dc:	30000000 	.word	0x30000000

080020e0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80020e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80020e2:	4802      	ldr	r0, [pc, #8]	@ (80020ec <ETH_IRQHandler+0xc>)
 80020e4:	f000 fddb 	bl	8002c9e <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80020e8:	bd08      	pop	{r3, pc}
 80020ea:	bf00      	nop
 80020ec:	240002a4 	.word	0x240002a4

080020f0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80020f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80020f2:	4802      	ldr	r0, [pc, #8]	@ (80020fc <OTG_HS_IRQHandler+0xc>)
 80020f4:	f002 f9c6 	bl	8004484 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80020f8:	bd08      	pop	{r3, pc}
 80020fa:	bf00      	nop
 80020fc:	24001680 	.word	0x24001680

08002100 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002100:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002102:	4802      	ldr	r0, [pc, #8]	@ (800210c <OTG_FS_IRQHandler+0xc>)
 8002104:	f002 fe48 	bl	8004d98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002108:	bd08      	pop	{r3, pc}
 800210a:	bf00      	nop
 800210c:	24000d4c 	.word	0x24000d4c

08002110 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char* ptr, int len)
{
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	460c      	mov	r4, r1
 8002114:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2500      	movs	r5, #0
 8002118:	e006      	b.n	8002128 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800211a:	f3af 8000 	nop.w
 800211e:	4621      	mov	r1, r4
 8002120:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002124:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002126:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002128:	42b5      	cmp	r5, r6
 800212a:	dbf6      	blt.n	800211a <_read+0xa>
  }

  return len;
}
 800212c:	4630      	mov	r0, r6
 800212e:	bd70      	pop	{r4, r5, r6, pc}

08002130 <_write>:

__attribute__((weak)) int _write(int file, char* ptr, int len)
{
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	460e      	mov	r6, r1
 8002134:	4615      	mov	r5, r2
  (void)file;
  int cntDelay = 0;
 8002136:	2400      	movs	r4, #0

  while (scd_print2(&scd_1, ptr, len))
 8002138:	462a      	mov	r2, r5
 800213a:	4631      	mov	r1, r6
 800213c:	4805      	ldr	r0, [pc, #20]	@ (8002154 <_write+0x24>)
 800213e:	f7ff fe05 	bl	8001d4c <scd_print2>
 8002142:	b128      	cbz	r0, 8002150 <_write+0x20>
  {
    cntDelay++;
 8002144:	3401      	adds	r4, #1
    if (cntDelay > (400 * 1000))
 8002146:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <_write+0x28>)
 8002148:	429c      	cmp	r4, r3
 800214a:	ddf5      	ble.n	8002138 <_write+0x8>
      return -1;
 800214c:	f04f 35ff 	mov.w	r5, #4294967295
  }

  return len;
}
 8002150:	4628      	mov	r0, r5
 8002152:	bd70      	pop	{r4, r5, r6, pc}
 8002154:	2400053c 	.word	0x2400053c
 8002158:	00061a80 	.word	0x00061a80

0800215c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	4770      	bx	lr

08002162 <_fstat>:


int _fstat(int file, struct stat* st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002162:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002166:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002168:	2000      	movs	r0, #0
 800216a:	4770      	bx	lr

0800216c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800216c:	2001      	movs	r0, #1
 800216e:	4770      	bx	lr

08002170 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002170:	2000      	movs	r0, #0
 8002172:	4770      	bx	lr

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b508      	push	{r3, lr}
 8002176:	4603      	mov	r3, r0
  const uint32_t stack_limit = 0x2001FFFFU;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4a0b      	ldr	r2, [pc, #44]	@ (80021a8 <_sbrk+0x34>)
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	b142      	cbz	r2, 8002190 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <_sbrk+0x34>)
 8002180:	6810      	ldr	r0, [r2, #0]
 8002182:	4403      	add	r3, r0
 8002184:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <_sbrk+0x38>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d806      	bhi.n	8002198 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800218a:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <_sbrk+0x34>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800218e:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8002190:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <_sbrk+0x34>)
 8002192:	4907      	ldr	r1, [pc, #28]	@ (80021b0 <_sbrk+0x3c>)
 8002194:	6011      	str	r1, [r2, #0]
 8002196:	e7f2      	b.n	800217e <_sbrk+0xa>
    errno = ENOMEM;
 8002198:	f00a fe40 	bl	800ce1c <__errno>
 800219c:	230c      	movs	r3, #12
 800219e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	e7f3      	b.n	800218e <_sbrk+0x1a>
 80021a6:	bf00      	nop
 80021a8:	24000784 	.word	0x24000784
 80021ac:	2001ffff 	.word	0x2001ffff
 80021b0:	24001bb0 	.word	0x24001bb0

080021b4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021b4:	4a31      	ldr	r2, [pc, #196]	@ (800227c <SystemInit+0xc8>)
 80021b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80021ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002280 <SystemInit+0xcc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d806      	bhi.n	80021dc <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002280 <SystemInit+0xcc>)
 80021d0:	6813      	ldr	r3, [r2, #0]
 80021d2:	f023 030f 	bic.w	r3, r3, #15
 80021d6:	f043 0307 	orr.w	r3, r3, #7
 80021da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80021dc:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <SystemInit+0xd0>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	4a26      	ldr	r2, [pc, #152]	@ (8002288 <SystemInit+0xd4>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021f2:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <SystemInit+0xcc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f013 0f08 	tst.w	r3, #8
 80021fa:	d006      	beq.n	800220a <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021fc:	4a20      	ldr	r2, [pc, #128]	@ (8002280 <SystemInit+0xcc>)
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	f023 030f 	bic.w	r3, r3, #15
 8002204:	f043 0307 	orr.w	r3, r3, #7
 8002208:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800220a:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <SystemInit+0xd0>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002210:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002212:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002214:	491d      	ldr	r1, [pc, #116]	@ (800228c <SystemInit+0xd8>)
 8002216:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002218:	491d      	ldr	r1, [pc, #116]	@ (8002290 <SystemInit+0xdc>)
 800221a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800221c:	491d      	ldr	r1, [pc, #116]	@ (8002294 <SystemInit+0xe0>)
 800221e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002220:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002222:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002224:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002226:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002228:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8002230:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002232:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <SystemInit+0xe4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f36f 030f 	bfc	r3, #0, #16
 800223c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002240:	d203      	bcs.n	800224a <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002242:	4b16      	ldr	r3, [pc, #88]	@ (800229c <SystemInit+0xe8>)
 8002244:	2201      	movs	r2, #1
 8002246:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <SystemInit+0xd0>)
 800224c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002250:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002254:	d110      	bne.n	8002278 <SystemInit+0xc4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <SystemInit+0xd0>)
 8002258:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800225c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002260:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002264:	4a0e      	ldr	r2, [pc, #56]	@ (80022a0 <SystemInit+0xec>)
 8002266:	f243 01d2 	movw	r1, #12498	@ 0x30d2
 800226a:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800226c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002270:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002274:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00
 8002280:	52002000 	.word	0x52002000
 8002284:	58024400 	.word	0x58024400
 8002288:	eaf6ed7f 	.word	0xeaf6ed7f
 800228c:	02020200 	.word	0x02020200
 8002290:	01ff0000 	.word	0x01ff0000
 8002294:	01010280 	.word	0x01010280
 8002298:	5c001000 	.word	0x5c001000
 800229c:	51008000 	.word	0x51008000
 80022a0:	52004000 	.word	0x52004000

080022a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022a4:	b510      	push	{r4, lr}
 80022a6:	b0c0      	sub	sp, #256	@ 0x100

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80022a8:	2220      	movs	r2, #32
 80022aa:	2100      	movs	r1, #0
 80022ac:	a838      	add	r0, sp, #224	@ 0xe0
 80022ae:	f00a fd57 	bl	800cd60 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	2100      	movs	r1, #0
 80022b4:	9132      	str	r1, [sp, #200]	@ 0xc8
 80022b6:	9133      	str	r1, [sp, #204]	@ 0xcc
 80022b8:	9134      	str	r1, [sp, #208]	@ 0xd0
 80022ba:	9135      	str	r1, [sp, #212]	@ 0xd4
 80022bc:	9136      	str	r1, [sp, #216]	@ 0xd8
 80022be:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c0:	22c0      	movs	r2, #192	@ 0xc0
 80022c2:	a802      	add	r0, sp, #8
 80022c4:	f00a fd4c 	bl	800cd60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022c8:	2201      	movs	r2, #1
 80022ca:	2300      	movs	r3, #0
 80022cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d0:	a802      	add	r0, sp, #8
 80022d2:	f004 f861 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	f040 80c4 	bne.w	8002464 <MX_USART1_UART_Init+0x1c0>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022dc:	4b63      	ldr	r3, [pc, #396]	@ (800246c <MX_USART1_UART_Init+0x1c8>)
 80022de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80022e2:	f042 0210 	orr.w	r2, r2, #16
 80022e6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022ea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80022ee:	f002 0210 	and.w	r2, r2, #16
 80022f2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80022f4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 80022f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800230c:	9b00      	ldr	r3, [sp, #0]
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800230e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002312:	9332      	str	r3, [sp, #200]	@ 0xc8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002314:	2302      	movs	r3, #2
 8002316:	9333      	str	r3, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8002318:	2301      	movs	r3, #1
 800231a:	9334      	str	r3, [sp, #208]	@ 0xd0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800231c:	2400      	movs	r4, #0
 800231e:	9435      	str	r4, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002320:	9436      	str	r4, [sp, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002322:	2307      	movs	r3, #7
 8002324:	9337      	str	r3, [sp, #220]	@ 0xdc
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	a932      	add	r1, sp, #200	@ 0xc8
 8002328:	4851      	ldr	r0, [pc, #324]	@ (8002470 <MX_USART1_UART_Init+0x1cc>)
 800232a:	f005 fd76 	bl	8007e1a <LL_GPIO_Init>
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800232e:	4b51      	ldr	r3, [pc, #324]	@ (8002474 <MX_USART1_UART_Init+0x1d0>)
 8002330:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8002334:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002338:	f042 022a 	orr.w	r2, r2, #42	@ 0x2a
 800233c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8002340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002342:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002346:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 800234c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800234e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002352:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002354:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002356:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 800235a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8002360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002362:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8002368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800236a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8002370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002372:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8002378:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800237a:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8002380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002382:	f022 0204 	bic.w	r2, r2, #4
 8002386:	63da      	str	r2, [r3, #60]	@ 0x3c
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8002388:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800238c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002390:	f042 0229 	orr.w	r2, r2, #41	@ 0x29
 8002394:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800239e:	611a      	str	r2, [r3, #16]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80023a6:	611a      	str	r2, [r3, #16]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80023ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023b2:	611a      	str	r2, [r3, #16]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023ba:	611a      	str	r2, [r3, #16]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023c2:	611a      	str	r2, [r3, #16]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	f422 52c0 	bic.w	r2, r2, #6144	@ 0x1800
 80023ca:	611a      	str	r2, [r3, #16]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80023d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 80023d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023d6:	f022 0204 	bic.w	r2, r2, #4
 80023da:	625a      	str	r2, [r3, #36]	@ 0x24
  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80023dc:	9438      	str	r4, [sp, #224]	@ 0xe0
  USART_InitStruct.BaudRate = 460800;
 80023de:	f44f 23e1 	mov.w	r3, #460800	@ 0x70800
 80023e2:	9339      	str	r3, [sp, #228]	@ 0xe4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80023e4:	943a      	str	r4, [sp, #232]	@ 0xe8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80023e6:	943b      	str	r4, [sp, #236]	@ 0xec
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80023e8:	943c      	str	r4, [sp, #240]	@ 0xf0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80023ea:	230c      	movs	r3, #12
 80023ec:	933d      	str	r3, [sp, #244]	@ 0xf4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80023ee:	943e      	str	r4, [sp, #248]	@ 0xf8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80023f0:	943f      	str	r4, [sp, #252]	@ 0xfc
  LL_USART_Init(USART1, &USART_InitStruct);
 80023f2:	a938      	add	r1, sp, #224	@ 0xe0
 80023f4:	4820      	ldr	r0, [pc, #128]	@ (8002478 <MX_USART1_UART_Init+0x1d4>)
 80023f6:	f006 f859 	bl	80084ac <LL_USART_Init>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002478 <MX_USART1_UART_Init+0x1d4>)
 80023fc:	f102 0308 	add.w	r3, r2, #8
 8002400:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002404:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002408:	3208      	adds	r2, #8
 800240a:	e842 3100 	strex	r1, r3, [r2]
 800240e:	2900      	cmp	r1, #0
 8002410:	d1f3      	bne.n	80023fa <MX_USART1_UART_Init+0x156>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002412:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <MX_USART1_UART_Init+0x1d4>)
 8002414:	f102 0308 	add.w	r3, r2, #8
 8002418:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800241c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002420:	3208      	adds	r2, #8
 8002422:	e842 3100 	strex	r1, r3, [r2]
 8002426:	2900      	cmp	r1, #0
 8002428:	d1f3      	bne.n	8002412 <MX_USART1_UART_Init+0x16e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800242a:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <MX_USART1_UART_Init+0x1d4>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002432:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800243a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002442:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800244c:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <MX_USART1_UART_Init+0x1d4>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002454:	d0fa      	beq.n	800244c <MX_USART1_UART_Init+0x1a8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <MX_USART1_UART_Init+0x1d4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800245e:	d0f5      	beq.n	800244c <MX_USART1_UART_Init+0x1a8>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002460:	b040      	add	sp, #256	@ 0x100
 8002462:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002464:	f7fe fc71 	bl	8000d4a <Error_Handler>
 8002468:	e738      	b.n	80022dc <MX_USART1_UART_Init+0x38>
 800246a:	bf00      	nop
 800246c:	58024400 	.word	0x58024400
 8002470:	58020000 	.word	0x58020000
 8002474:	40020000 	.word	0x40020000
 8002478:	40011000 	.word	0x40011000

0800247c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800247c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800247e:	4817      	ldr	r0, [pc, #92]	@ (80024dc <MX_USART2_UART_Init+0x60>)
 8002480:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <MX_USART2_UART_Init+0x64>)
 8002482:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 460800;
 8002484:	f44f 23e1 	mov.w	r3, #460800	@ 0x70800
 8002488:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	2300      	movs	r3, #0
 800248c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800248e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002490:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002492:	220c      	movs	r2, #12
 8002494:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002496:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800249a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800249c:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024a0:	f005 fbf9 	bl	8007c96 <HAL_UART_Init>
 80024a4:	b970      	cbnz	r0, 80024c4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a6:	2100      	movs	r1, #0
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <MX_USART2_UART_Init+0x60>)
 80024aa:	f005 fc6c 	bl	8007d86 <HAL_UARTEx_SetTxFifoThreshold>
 80024ae:	b960      	cbnz	r0, 80024ca <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024b0:	2100      	movs	r1, #0
 80024b2:	480a      	ldr	r0, [pc, #40]	@ (80024dc <MX_USART2_UART_Init+0x60>)
 80024b4:	f005 fc8c 	bl	8007dd0 <HAL_UARTEx_SetRxFifoThreshold>
 80024b8:	b950      	cbnz	r0, 80024d0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024ba:	4808      	ldr	r0, [pc, #32]	@ (80024dc <MX_USART2_UART_Init+0x60>)
 80024bc:	f005 fc44 	bl	8007d48 <HAL_UARTEx_DisableFifoMode>
 80024c0:	b948      	cbnz	r0, 80024d6 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80024c4:	f7fe fc41 	bl	8000d4a <Error_Handler>
 80024c8:	e7ed      	b.n	80024a6 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80024ca:	f7fe fc3e 	bl	8000d4a <Error_Handler>
 80024ce:	e7ef      	b.n	80024b0 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80024d0:	f7fe fc3b 	bl	8000d4a <Error_Handler>
 80024d4:	e7f1      	b.n	80024ba <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80024d6:	f7fe fc38 	bl	8000d4a <Error_Handler>
}
 80024da:	e7f2      	b.n	80024c2 <MX_USART2_UART_Init+0x46>
 80024dc:	24000788 	.word	0x24000788
 80024e0:	40004400 	.word	0x40004400

080024e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024e4:	b510      	push	{r4, lr}
 80024e6:	b0b8      	sub	sp, #224	@ 0xe0
 80024e8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ea:	2100      	movs	r1, #0
 80024ec:	9133      	str	r1, [sp, #204]	@ 0xcc
 80024ee:	9134      	str	r1, [sp, #208]	@ 0xd0
 80024f0:	9135      	str	r1, [sp, #212]	@ 0xd4
 80024f2:	9136      	str	r1, [sp, #216]	@ 0xd8
 80024f4:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024f6:	22c0      	movs	r2, #192	@ 0xc0
 80024f8:	a802      	add	r0, sp, #8
 80024fa:	f00a fc31 	bl	800cd60 <memset>
  if(uartHandle->Instance==USART2)
 80024fe:	6822      	ldr	r2, [r4, #0]
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_UART_MspInit+0x8c>)
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002506:	b038      	add	sp, #224	@ 0xe0
 8002508:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800250a:	2202      	movs	r2, #2
 800250c:	2300      	movs	r3, #0
 800250e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002512:	a802      	add	r0, sp, #8
 8002514:	f003 ff40 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 8002518:	bb38      	cbnz	r0, 800256a <HAL_UART_MspInit+0x86>
    __HAL_RCC_USART2_CLK_ENABLE();
 800251a:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <HAL_UART_MspInit+0x90>)
 800251c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002520:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002524:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002528:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800252c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002530:	9200      	str	r2, [sp, #0]
 8002532:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002534:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002538:	f042 0208 	orr.w	r2, r2, #8
 800253c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800254c:	2360      	movs	r3, #96	@ 0x60
 800254e:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002558:	2301      	movs	r3, #1
 800255a:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800255c:	2307      	movs	r3, #7
 800255e:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002560:	a933      	add	r1, sp, #204	@ 0xcc
 8002562:	4805      	ldr	r0, [pc, #20]	@ (8002578 <HAL_UART_MspInit+0x94>)
 8002564:	f000 ff68 	bl	8003438 <HAL_GPIO_Init>
}
 8002568:	e7cd      	b.n	8002506 <HAL_UART_MspInit+0x22>
      Error_Handler();
 800256a:	f7fe fbee 	bl	8000d4a <Error_Handler>
 800256e:	e7d4      	b.n	800251a <HAL_UART_MspInit+0x36>
 8002570:	40004400 	.word	0x40004400
 8002574:	58024400 	.word	0x58024400
 8002578:	58020c00 	.word	0x58020c00

0800257c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800257c:	f8df d04c 	ldr.w	sp, [pc, #76]	@ 80025cc <LoopFillZerobss+0x10>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002580:	f7ff fe18 	bl	80021b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002584:	4812      	ldr	r0, [pc, #72]	@ (80025d0 <LoopFillZerobss+0x14>)
  ldr r1, =_edata
 8002586:	4913      	ldr	r1, [pc, #76]	@ (80025d4 <LoopFillZerobss+0x18>)
  ldr r2, =_sidata
 8002588:	4a13      	ldr	r2, [pc, #76]	@ (80025d8 <LoopFillZerobss+0x1c>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800258c:	e002      	b.n	8002594 <LoopCopyDataInit>

0800258e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002592:	3304      	adds	r3, #4

08002594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002598:	d3f9      	bcc.n	800258e <CopyDataInit>

/* tyj ramFunc init */
  ldr r0, =_sRamFunc
 800259a:	4810      	ldr	r0, [pc, #64]	@ (80025dc <LoopFillZerobss+0x20>)
  ldr r1, =_eRamFunc
 800259c:	4910      	ldr	r1, [pc, #64]	@ (80025e0 <LoopFillZerobss+0x24>)
  ldr r2, =_siFunc
 800259e:	4a11      	ldr	r2, [pc, #68]	@ (80025e4 <LoopFillZerobss+0x28>)
  movs r3, #0
 80025a0:	2300      	movs	r3, #0
  b LoopCopyDataInit2
 80025a2:	e002      	b.n	80025aa <LoopCopyDataInit2>

080025a4 <CopyDataInit2>:

CopyDataInit2:
  ldr r4, [r2, r3]
 80025a4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a8:	3304      	adds	r3, #4

080025aa <LoopCopyDataInit2>:

LoopCopyDataInit2:
  adds r4, r0, r3
 80025aa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ac:	428c      	cmp	r4, r1
  bcc CopyDataInit2
 80025ae:	d3f9      	bcc.n	80025a4 <CopyDataInit2>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b0:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <LoopFillZerobss+0x2c>)
  ldr r4, =_ebss
 80025b2:	4c0e      	ldr	r4, [pc, #56]	@ (80025ec <LoopFillZerobss+0x30>)
  movs r3, #0
 80025b4:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b6:	e001      	b.n	80025bc <LoopFillZerobss>

080025b8 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ba:	3204      	adds	r2, #4

080025bc <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025bc:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025be:	d3fb      	bcc.n	80025b8 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c0:	f00a fc32 	bl	800ce28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c4:	f7fe fc28 	bl	8000e18 <main>
  bx  lr
 80025c8:	4770      	bx	lr
 80025ca:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 80025cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025d4:	240001c0 	.word	0x240001c0
  ldr r2, =_sidata
 80025d8:	0800e46c 	.word	0x0800e46c
	...
  ldr r2, =_siFunc
 80025e4:	0800e6ec 	.word	0x0800e6ec
  ldr r2, =_sbss
 80025e8:	24000280 	.word	0x24000280
  ldr r4, =_ebss
 80025ec:	24001bac 	.word	0x24001bac

080025f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC3_IRQHandler>
	...

080025f4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_InitTick+0x44>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b90b      	cbnz	r3, 80025fe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80025fa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80025fc:	4770      	bx	lr
{
 80025fe:	b510      	push	{r4, lr}
 8002600:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002602:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002606:	fbb0 f3f3 	udiv	r3, r0, r3
 800260a:	4a0c      	ldr	r2, [pc, #48]	@ (800263c <HAL_InitTick+0x48>)
 800260c:	6810      	ldr	r0, [r2, #0]
 800260e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002612:	f000 f8e1 	bl	80027d8 <HAL_SYSTICK_Config>
 8002616:	b968      	cbnz	r0, 8002634 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002618:	2c0f      	cmp	r4, #15
 800261a:	d901      	bls.n	8002620 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800261c:	2001      	movs	r0, #1
 800261e:	e00a      	b.n	8002636 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002620:	2200      	movs	r2, #0
 8002622:	4621      	mov	r1, r4
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f000 f8c2 	bl	80027b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <HAL_InitTick+0x4c>)
 800262e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8002630:	2000      	movs	r0, #0
 8002632:	e000      	b.n	8002636 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8002634:	2001      	movs	r0, #1
}
 8002636:	bd10      	pop	{r4, pc}
 8002638:	2400002c 	.word	0x2400002c
 800263c:	24000028 	.word	0x24000028
 8002640:	24000030 	.word	0x24000030

08002644 <HAL_Init>:
{
 8002644:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002646:	2003      	movs	r0, #3
 8002648:	f000 f8a0 	bl	800278c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800264c:	f003 fb10 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8002650:	490f      	ldr	r1, [pc, #60]	@ (8002690 <HAL_Init+0x4c>)
 8002652:	698b      	ldr	r3, [r1, #24]
 8002654:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002658:	4a0e      	ldr	r2, [pc, #56]	@ (8002694 <HAL_Init+0x50>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002662:	698b      	ldr	r3, [r1, #24]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	fa20 f303 	lsr.w	r3, r0, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_Init+0x54>)
 8002674:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_Init+0x58>)
 8002678:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800267a:	200f      	movs	r0, #15
 800267c:	f7ff ffba 	bl	80025f4 <HAL_InitTick>
 8002680:	b110      	cbz	r0, 8002688 <HAL_Init+0x44>
    return HAL_ERROR;
 8002682:	2401      	movs	r4, #1
}
 8002684:	4620      	mov	r0, r4
 8002686:	bd10      	pop	{r4, pc}
 8002688:	4604      	mov	r4, r0
  HAL_MspInit();
 800268a:	f7ff fcab 	bl	8001fe4 <HAL_MspInit>
  return HAL_OK;
 800268e:	e7f9      	b.n	8002684 <HAL_Init+0x40>
 8002690:	58024400 	.word	0x58024400
 8002694:	0800e3b0 	.word	0x0800e3b0
 8002698:	24000024 	.word	0x24000024
 800269c:	24000028 	.word	0x24000028

080026a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80026a0:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <HAL_IncTick+0x10>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4a03      	ldr	r2, [pc, #12]	@ (80026b4 <HAL_IncTick+0x14>)
 80026a6:	6811      	ldr	r1, [r2, #0]
 80026a8:	440b      	add	r3, r1
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	2400002c 	.word	0x2400002c
 80026b4:	2400081c 	.word	0x2400081c

080026b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80026b8:	4b01      	ldr	r3, [pc, #4]	@ (80026c0 <HAL_GetTick+0x8>)
 80026ba:	6818      	ldr	r0, [r3, #0]
}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2400081c 	.word	0x2400081c

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fff6 	bl	80026b8 <HAL_GetTick>
 80026cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80026d2:	d002      	beq.n	80026da <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <HAL_Delay+0x24>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026da:	f7ff ffed 	bl	80026b8 <HAL_GetTick>
 80026de:	1b40      	subs	r0, r0, r5
 80026e0:	42a0      	cmp	r0, r4
 80026e2:	d3fa      	bcc.n	80026da <HAL_Delay+0x16>
  {
  }
}
 80026e4:	bd38      	pop	{r3, r4, r5, pc}
 80026e6:	bf00      	nop
 80026e8:	2400002c 	.word	0x2400002c

080026ec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80026ec:	4b01      	ldr	r3, [pc, #4]	@ (80026f4 <HAL_GetREVID+0x8>)
 80026ee:	6818      	ldr	r0, [r3, #0]
}
 80026f0:	0c00      	lsrs	r0, r0, #16
 80026f2:	4770      	bx	lr
 80026f4:	5c001000 	.word	0x5c001000

080026f8 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80026f8:	4a03      	ldr	r2, [pc, #12]	@ (8002708 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80026fa:	6853      	ldr	r3, [r2, #4]
 80026fc:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8002700:	4303      	orrs	r3, r0
 8002702:	6053      	str	r3, [r2, #4]
}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	58000400 	.word	0x58000400

0800270c <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800270c:	2800      	cmp	r0, #0
 800270e:	db07      	blt.n	8002720 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002710:	f000 021f 	and.w	r2, r0, #31
 8002714:	0940      	lsrs	r0, r0, #5
 8002716:	2301      	movs	r3, #1
 8002718:	4093      	lsls	r3, r2
 800271a:	4a02      	ldr	r2, [pc, #8]	@ (8002724 <__NVIC_EnableIRQ+0x18>)
 800271c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8002728:	2800      	cmp	r0, #0
 800272a:	db04      	blt.n	8002736 <__NVIC_SetPriority+0xe>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	0109      	lsls	r1, r1, #4
 800272e:	b2c9      	uxtb	r1, r1
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <__NVIC_SetPriority+0x1c>)
 8002732:	5419      	strb	r1, [r3, r0]
 8002734:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	f000 000f 	and.w	r0, r0, #15
 800273a:	0109      	lsls	r1, r1, #4
 800273c:	b2c9      	uxtb	r1, r1
 800273e:	4b02      	ldr	r3, [pc, #8]	@ (8002748 <__NVIC_SetPriority+0x20>)
 8002740:	5419      	strb	r1, [r3, r0]
}
 8002742:	4770      	bx	lr
 8002744:	e000e400 	.word	0xe000e400
 8002748:	e000ed14 	.word	0xe000ed14

0800274c <NVIC_EncodePriority>:
{
 800274c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274e:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002752:	f1c0 0c07 	rsb	ip, r0, #7
 8002756:	f1bc 0f04 	cmp.w	ip, #4
 800275a:	bf28      	it	cs
 800275c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002760:	1d03      	adds	r3, r0, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d90f      	bls.n	8002786 <NVIC_EncodePriority+0x3a>
 8002766:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 3eff 	mov.w	lr, #4294967295
 800276c:	fa0e f00c 	lsl.w	r0, lr, ip
 8002770:	ea21 0100 	bic.w	r1, r1, r0
 8002774:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002776:	fa0e fe03 	lsl.w	lr, lr, r3
 800277a:	ea22 020e 	bic.w	r2, r2, lr
}
 800277e:	ea41 0002 	orr.w	r0, r1, r2
 8002782:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002786:	2300      	movs	r3, #0
 8002788:	e7ee      	b.n	8002768 <NVIC_EncodePriority+0x1c>
	...

0800278c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4906      	ldr	r1, [pc, #24]	@ (80027a8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800278e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002790:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	0200      	lsls	r0, r0, #8
 800279a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80027a0:	4a02      	ldr	r2, [pc, #8]	@ (80027ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027a2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80027a4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00
 80027ac:	05fa0000 	.word	0x05fa0000

080027b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b510      	push	{r4, lr}
 80027b2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_NVIC_SetPriority+0x1c>)
 80027b6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80027bc:	f7ff ffc6 	bl	800274c <NVIC_EncodePriority>
 80027c0:	4601      	mov	r1, r0
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff ffb0 	bl	8002728 <__NVIC_SetPriority>
}
 80027c8:	bd10      	pop	{r4, pc}
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d2:	f7ff ff9b 	bl	800270c <__NVIC_EnableIRQ>
}
 80027d6:	bd08      	pop	{r3, pc}

080027d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	3801      	subs	r0, #1
 80027da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80027de:	d20b      	bcs.n	80027f8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80027e4:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <HAL_SYSTICK_Config+0x24>)
 80027e8:	21f0      	movs	r1, #240	@ 0xf0
 80027ea:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ee:	2000      	movs	r0, #0
 80027f0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f2:	2207      	movs	r2, #7
 80027f4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80027f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002800:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <HAL_MPU_Disable+0x18>)
 8002806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002808:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800280e:	2200      	movs	r2, #0
 8002810:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800281c:	f040 0001 	orr.w	r0, r0, #1
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_MPU_Enable+0x1c>)
 8002822:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002828:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800282e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002832:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800283c:	7843      	ldrb	r3, [r0, #1]
 800283e:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <HAL_MPU_ConfigRegion+0x54>)
 8002840:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002844:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002850:	6843      	ldr	r3, [r0, #4]
 8002852:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002856:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002858:	7ac3      	ldrb	r3, [r0, #11]
 800285a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800285c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002860:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002862:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002866:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002868:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800286c:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800286e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002872:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002874:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002878:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800287a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800287e:	7a01      	ldrb	r1, [r0, #8]
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002880:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002884:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002886:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002888:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002894:	b430      	push	{r4, r5}
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002896:	688b      	ldr	r3, [r1, #8]
               macconf->SourceAddrControl |
 8002898:	680a      	ldr	r2, [r1, #0]
  macregval = (macconf->InterPacketGapVal |
 800289a:	4313      	orrs	r3, r2
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800289c:	790a      	ldrb	r2, [r1, #4]
               macconf->SourceAddrControl |
 800289e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028a2:	7b0a      	ldrb	r2, [r1, #12]
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80028a4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80028a8:	7b4a      	ldrb	r2, [r1, #13]
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028aa:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028ae:	7b8a      	ldrb	r2, [r1, #14]
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80028b0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028b4:	7bca      	ldrb	r2, [r1, #15]
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028b6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028ba:	7c0a      	ldrb	r2, [r1, #16]
 80028bc:	2a00      	cmp	r2, #0
 80028be:	f040 80b0 	bne.w	8002a22 <ETH_SetMACConfig+0x18e>
 80028c2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80028c8:	7c4a      	ldrb	r2, [r1, #17]
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	f040 80ab 	bne.w	8002a26 <ETH_SetMACConfig+0x192>
 80028d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028d4:	4313      	orrs	r3, r2
               ((uint32_t)macconf->JumboPacket << 16) |
 80028d6:	7c8a      	ldrb	r2, [r1, #18]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80028d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
               macconf->Speed |
 80028dc:	694a      	ldr	r2, [r1, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80028de:	4313      	orrs	r3, r2
               macconf->DuplexMode |
 80028e0:	698a      	ldr	r2, [r1, #24]
               macconf->Speed |
 80028e2:	4313      	orrs	r3, r2
               ((uint32_t)macconf->LoopbackMode << 12) |
 80028e4:	7f0a      	ldrb	r2, [r1, #28]
               macconf->DuplexMode |
 80028e6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80028ea:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)macconf->LoopbackMode << 12) |
 80028ec:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80028f0:	7f8a      	ldrb	r2, [r1, #30]
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	f040 8099 	bne.w	8002a2a <ETH_SetMACConfig+0x196>
 80028f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80028fc:	4313      	orrs	r3, r2
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80028fe:	7fca      	ldrb	r2, [r1, #31]
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002900:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002904:	f891 2020 	ldrb.w	r2, [r1, #32]
 8002908:	2a00      	cmp	r2, #0
 800290a:	f040 8090 	bne.w	8002a2e <ETH_SetMACConfig+0x19a>
 800290e:	f44f 7280 	mov.w	r2, #256	@ 0x100
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002912:	4313      	orrs	r3, r2
               macconf->BackOffLimit |
 8002914:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002916:	4313      	orrs	r3, r2
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002918:	f891 2028 	ldrb.w	r2, [r1, #40]	@ 0x28
               macconf->BackOffLimit |
 800291c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               macconf->PreambleLength);
 8002920:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002922:	4313      	orrs	r3, r2

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002924:	6804      	ldr	r4, [r0, #0]
 8002926:	6822      	ldr	r2, [r4, #0]
 8002928:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800292c:	f422 027b 	bic.w	r2, r2, #16449536	@ 0xfb0000
 8002930:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8002934:	f022 027c 	bic.w	r2, r2, #124	@ 0x7c
 8002938:	4313      	orrs	r3, r2
 800293a:	6023      	str	r3, [r4, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800293c:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800293e:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 8002942:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002944:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002948:	f891 2030 	ldrb.w	r2, [r1, #48]	@ 0x30
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800294c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002950:	f891 2031 	ldrb.w	r2, [r1, #49]	@ 0x31
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002954:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002958:	f891 2032 	ldrb.w	r2, [r1, #50]	@ 0x32
 800295c:	2a00      	cmp	r2, #0
 800295e:	d168      	bne.n	8002a32 <ETH_SetMACConfig+0x19e>
 8002960:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002964:	4313      	orrs	r3, r2
               macconf->GiantPacketSizeLimit);
 8002966:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002968:	4313      	orrs	r3, r2

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800296a:	6804      	ldr	r4, [r0, #0]
 800296c:	6862      	ldr	r2, [r4, #4]
 800296e:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8002972:	f422 22ef 	bic.w	r2, r2, #489472	@ 0x77800
 8002976:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 800297a:	f022 0207 	bic.w	r2, r2, #7
 800297e:	4313      	orrs	r3, r2
 8002980:	6063      	str	r3, [r4, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002982:	f891 2040 	ldrb.w	r2, [r1, #64]	@ 0x40
               macconf->WatchdogTimeout);
 8002986:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002988:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800298c:	6804      	ldr	r4, [r0, #0]
 800298e:	68e5      	ldr	r5, [r4, #12]
 8002990:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <ETH_SetMACConfig+0x1ac>)
 8002992:	402b      	ands	r3, r5
 8002994:	4313      	orrs	r3, r2
 8002996:	60e3      	str	r3, [r4, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002998:	f891 2054 	ldrb.w	r2, [r1, #84]	@ 0x54
               macconf->PauseLowThreshold |
 800299c:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800299e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80029a2:	f891 204c 	ldrb.w	r2, [r1, #76]	@ 0x4c
 80029a6:	2a00      	cmp	r2, #0
 80029a8:	d145      	bne.n	8002a36 <ETH_SetMACConfig+0x1a2>
 80029aa:	2280      	movs	r2, #128	@ 0x80
               macconf->PauseLowThreshold |
 80029ac:	4313      	orrs	r3, r2
               (macconf->PauseTime << 16));
 80029ae:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80029b4:	6804      	ldr	r4, [r0, #0]
 80029b6:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80029b8:	f022 02f2 	bic.w	r2, r2, #242	@ 0xf2
 80029bc:	0412      	lsls	r2, r2, #16
 80029be:	0c12      	lsrs	r2, r2, #16
 80029c0:	4313      	orrs	r3, r2
 80029c2:	6723      	str	r3, [r4, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029c4:	f891 2056 	ldrb.w	r2, [r1, #86]	@ 0x56
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80029c8:	f891 3055 	ldrb.w	r3, [r1, #85]	@ 0x55
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029cc:	ea42 0243 	orr.w	r2, r2, r3, lsl #1

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80029d0:	6804      	ldr	r4, [r0, #0]
 80029d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80029e0:	6802      	ldr	r2, [r0, #0]
 80029e2:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 80029e6:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 80029ea:	6d8c      	ldr	r4, [r1, #88]	@ 0x58
 80029ec:	4323      	orrs	r3, r4
 80029ee:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80029f2:	6dcb      	ldr	r3, [r1, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029f4:	f891 2060 	ldrb.w	r2, [r1, #96]	@ 0x60
 80029f8:	b9fa      	cbnz	r2, 8002a3a <ETH_SetMACConfig+0x1a6>
 80029fa:	2240      	movs	r2, #64	@ 0x40
  macregval = (macconf->ReceiveQueueMode |
 80029fc:	4313      	orrs	r3, r2
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80029fe:	f891 2061 	ldrb.w	r2, [r1, #97]	@ 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a02:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002a06:	f891 2062 	ldrb.w	r2, [r1, #98]	@ 0x62
  macregval = (macconf->ReceiveQueueMode |
 8002a0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002a0e:	6801      	ldr	r1, [r0, #0]
 8002a10:	f8d1 2d30 	ldr.w	r2, [r1, #3376]	@ 0xd30
 8002a14:	f022 027b 	bic.w	r2, r2, #123	@ 0x7b
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3d30 	str.w	r3, [r1, #3376]	@ 0xd30
}
 8002a1e:	bc30      	pop	{r4, r5}
 8002a20:	4770      	bx	lr
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a22:	2200      	movs	r2, #0
 8002a24:	e74f      	b.n	80028c6 <ETH_SetMACConfig+0x32>
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a26:	2200      	movs	r2, #0
 8002a28:	e754      	b.n	80028d4 <ETH_SetMACConfig+0x40>
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	e766      	b.n	80028fc <ETH_SetMACConfig+0x68>
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002a2e:	2200      	movs	r2, #0
 8002a30:	e76f      	b.n	8002912 <ETH_SetMACConfig+0x7e>
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002a32:	2200      	movs	r2, #0
 8002a34:	e796      	b.n	8002964 <ETH_SetMACConfig+0xd0>
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002a36:	2200      	movs	r2, #0
 8002a38:	e7b8      	b.n	80029ac <ETH_SetMACConfig+0x118>
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	e7de      	b.n	80029fc <ETH_SetMACConfig+0x168>
 8002a3e:	bf00      	nop
 8002a40:	fffffef0 	.word	0xfffffef0

08002a44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002a44:	b410      	push	{r4}
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a46:	6802      	ldr	r2, [r0, #0]
 8002a48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a4c:	6814      	ldr	r4, [r2, #0]
 8002a4e:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <ETH_SetDMAConfig+0x98>)
 8002a50:	4023      	ands	r3, r4
 8002a52:	680c      	ldr	r4, [r1, #0]
 8002a54:	4323      	orrs	r3, r4
 8002a56:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a58:	790a      	ldrb	r2, [r1, #4]
               dmaconf->BurstMode |
 8002a5a:	688b      	ldr	r3, [r1, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a5c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a60:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a62:	ea43 32c2 	orr.w	r2, r3, r2, lsl #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a66:	6803      	ldr	r3, [r0, #0]
 8002a68:	f503 5c80 	add.w	ip, r3, #4096	@ 0x1000
 8002a6c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002a70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <ETH_SetDMAConfig+0x9c>)
 8002a72:	4023      	ands	r3, r4
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8cc 3004 	str.w	r3, [ip, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a7a:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);
 8002a7c:	6a0b      	ldr	r3, [r1, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a7e:	ea43 4c02 	orr.w	ip, r3, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002a82:	6802      	ldr	r2, [r0, #0]
 8002a84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a88:	f8d2 4100 	ldr.w	r4, [r2, #256]	@ 0x100
 8002a8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <ETH_SetDMAConfig+0xa0>)
 8002a8e:	4023      	ands	r3, r4
 8002a90:	ea43 030c 	orr.w	r3, r3, ip
 8002a94:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a98:	690b      	ldr	r3, [r1, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002a9a:	7d0a      	ldrb	r2, [r1, #20]
  dmaregval = (dmaconf->TxDMABurstLength |
 8002a9c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002aa0:	7f4a      	ldrb	r2, [r1, #29]
  dmaregval = (dmaconf->TxDMABurstLength |
 8002aa2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002aa6:	6803      	ldr	r3, [r0, #0]
 8002aa8:	f503 5c80 	add.w	ip, r3, #4096	@ 0x1000
 8002aac:	f8dc 4104 	ldr.w	r4, [ip, #260]	@ 0x104
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae8 <ETH_SetDMAConfig+0xa4>)
 8002ab2:	4023      	ands	r3, r4
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8cc 3104 	str.w	r3, [ip, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002aba:	7f0b      	ldrb	r3, [r1, #28]
               dmaconf->RxDMABurstLength);
 8002abc:	6989      	ldr	r1, [r1, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002abe:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002ac2:	6802      	ldr	r2, [r0, #0]
 8002ac4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ac8:	f8d2 0108 	ldr.w	r0, [r2, #264]	@ 0x108
 8002acc:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <ETH_SetDMAConfig+0xa8>)
 8002ace:	4003      	ands	r3, r0
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	ffff87fd 	.word	0xffff87fd
 8002ae0:	ffff2ffe 	.word	0xffff2ffe
 8002ae4:	fffec000 	.word	0xfffec000
 8002ae8:	ffc0efef 	.word	0xffc0efef
 8002aec:	7fc0ffff 	.word	0x7fc0ffff

08002af0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	b0a2      	sub	sp, #136	@ 0x88
 8002af4:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002af6:	2501      	movs	r5, #1
 8002af8:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002afc:	2400      	movs	r4, #0
 8002afe:	9412      	str	r4, [sp, #72]	@ 0x48
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b00:	f88d 4041 	strb.w	r4, [sp, #65]	@ 0x41
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b04:	f88d 4043 	strb.w	r4, [sp, #67]	@ 0x43
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b08:	f88d 5028 	strb.w	r5, [sp, #40]	@ 0x28
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b0c:	f88d 5056 	strb.w	r5, [sp, #86]	@ 0x56
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b10:	f88d 5032 	strb.w	r5, [sp, #50]	@ 0x32
  macDefaultConf.DeferralCheck = DISABLE;
 8002b14:	f88d 404c 	strb.w	r4, [sp, #76]	@ 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b18:	f88d 5084 	strb.w	r5, [sp, #132]	@ 0x84
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b20:	930f      	str	r3, [sp, #60]	@ 0x3c
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b22:	f88d 405c 	strb.w	r4, [sp, #92]	@ 0x5c
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002b26:	9418      	str	r4, [sp, #96]	@ 0x60
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b28:	f88d 4085 	strb.w	r4, [sp, #133]	@ 0x85
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b2c:	f88d 4086 	strb.w	r4, [sp, #134]	@ 0x86
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002b30:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002b34:	9316      	str	r3, [sp, #88]	@ 0x58
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002b36:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002b3a:	940b      	str	r4, [sp, #44]	@ 0x2c
  macDefaultConf.Jabber = ENABLE;
 8002b3c:	f88d 5035 	strb.w	r5, [sp, #53]	@ 0x35
  macDefaultConf.JumboPacket = DISABLE;
 8002b40:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  macDefaultConf.LoopbackMode = DISABLE;
 8002b44:	f88d 4040 	strb.w	r4, [sp, #64]	@ 0x40
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002b48:	941d      	str	r4, [sp, #116]	@ 0x74
  macDefaultConf.PauseTime = 0x0U;
 8002b4a:	941b      	str	r4, [sp, #108]	@ 0x6c
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002b4c:	9414      	str	r4, [sp, #80]	@ 0x50
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002b4e:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b52:	f88d 407a 	strb.w	r4, [sp, #122]	@ 0x7a
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b56:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	9320      	str	r3, [sp, #128]	@ 0x80
  macDefaultConf.RetryTransmission = ENABLE;
 8002b5e:	f88d 5044 	strb.w	r5, [sp, #68]	@ 0x44
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002b62:	f88d 4055 	strb.w	r4, [sp, #85]	@ 0x55
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002b66:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002b6a:	9309      	str	r3, [sp, #36]	@ 0x24
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b70:	930e      	str	r3, [sp, #56]	@ 0x38
  macDefaultConf.Support2KPacket = DISABLE;
 8002b72:	f88d 4031 	strb.w	r4, [sp, #49]	@ 0x31
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002b76:	2302      	movs	r3, #2
 8002b78:	931f      	str	r3, [sp, #124]	@ 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b7a:	f88d 4078 	strb.w	r4, [sp, #120]	@ 0x78
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b7e:	f88d 4079 	strb.w	r4, [sp, #121]	@ 0x79
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002b82:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  macDefaultConf.Watchdog = ENABLE;
 8002b86:	f88d 5034 	strb.w	r5, [sp, #52]	@ 0x34
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002b8a:	941a      	str	r4, [sp, #104]	@ 0x68
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002b8c:	f88d 5070 	strb.w	r5, [sp, #112]	@ 0x70

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b90:	a909      	add	r1, sp, #36	@ 0x24
 8002b92:	f7ff fe7f 	bl	8002894 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b96:	f88d 5004 	strb.w	r5, [sp, #4]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b9a:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002b9c:	9400      	str	r4, [sp, #0]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002b9e:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002ba2:	f88d 400d 	strb.w	r4, [sp, #13]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002ba6:	f88d 400c 	strb.w	r4, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002baa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bae:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002bb0:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bb4:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002bb6:	f88d 401d 	strb.w	r4, [sp, #29]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002bba:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002bbe:	9308      	str	r3, [sp, #32]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002bc0:	4669      	mov	r1, sp
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	f7ff ff3e 	bl	8002a44 <ETH_SetDMAConfig>
}
 8002bc8:	b022      	add	sp, #136	@ 0x88
 8002bca:	bd70      	pop	{r4, r5, r6, pc}

08002bcc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bcc:	b410      	push	{r4}
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	e010      	b.n	8002bf4 <ETH_DMATxDescListInit+0x28>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bd2:	68c4      	ldr	r4, [r0, #12]
 8002bd4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002bd8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8002bdc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002be0:	2100      	movs	r1, #0
 8002be2:	f844 100c 	str.w	r1, [r4, ip]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002be6:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002be8:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002bea:	60d9      	str	r1, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bec:	1d91      	adds	r1, r2, #6
 8002bee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bf2:	3201      	adds	r2, #1
 8002bf4:	2a03      	cmp	r2, #3
 8002bf6:	d9ec      	bls.n	8002bd2 <ETH_DMATxDescListInit+0x6>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002bfc:	6803      	ldr	r3, [r0, #0]
 8002bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c02:	2203      	movs	r2, #3
 8002c04:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002c08:	68c2      	ldr	r2, [r0, #12]
 8002c0a:	6803      	ldr	r3, [r0, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c10:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c14:	68c2      	ldr	r2, [r0, #12]
 8002c16:	6803      	ldr	r3, [r0, #0]
 8002c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c1c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c26:	b410      	push	{r4}
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c28:	2100      	movs	r1, #0
 8002c2a:	e013      	b.n	8002c54 <ETH_DMARxDescListInit+0x2e>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c2c:	6904      	ldr	r4, [r0, #16]
 8002c2e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8002c32:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8002c36:	eb04 03c3 	add.w	r3, r4, r3, lsl #3

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f844 200c 	str.w	r2, [r4, ip]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c44:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c46:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c48:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c4a:	f101 0212 	add.w	r2, r1, #18
 8002c4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c52:	3101      	adds	r1, #1
 8002c54:	2903      	cmp	r1, #3
 8002c56:	d9e9      	bls.n	8002c2c <ETH_DMARxDescListInit+0x6>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	65c3      	str	r3, [r0, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c5c:	6603      	str	r3, [r0, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c5e:	6683      	str	r3, [r0, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c60:	66c3      	str	r3, [r0, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c62:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002c64:	6803      	ldr	r3, [r0, #0]
 8002c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002c70:	6902      	ldr	r2, [r0, #16]
 8002c72:	6803      	ldr	r3, [r0, #0]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c78:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002c7c:	6903      	ldr	r3, [r0, #16]
 8002c7e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002c82:	6803      	ldr	r3, [r0, #0]
 8002c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c88:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_ETH_TxCpltCallback>:
}
 8002c92:	4770      	bx	lr

08002c94 <HAL_ETH_RxCpltCallback>:
}
 8002c94:	4770      	bx	lr

08002c96 <HAL_ETH_ErrorCallback>:
}
 8002c96:	4770      	bx	lr

08002c98 <HAL_ETH_PMTCallback>:
}
 8002c98:	4770      	bx	lr

08002c9a <HAL_ETH_EEECallback>:
}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ETH_WakeUpCallback>:
}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_ETH_IRQHandler>:
{
 8002c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca2:	4604      	mov	r4, r0
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8002ca4:	6803      	ldr	r3, [r0, #0]
 8002ca6:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8002caa:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8002cae:	f8d2 5160 	ldr.w	r5, [r2, #352]	@ 0x160
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8002cb2:	f8d2 7134 	ldr.w	r7, [r2, #308]	@ 0x134
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8002cb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cba:	f8d2 80a8 	ldr.w	r8, [r2, #168]	@ 0xa8
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8002cbe:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002cc2:	d002      	beq.n	8002cca <HAL_ETH_IRQHandler+0x2c>
 8002cc4:	f017 0f40 	tst.w	r7, #64	@ 0x40
 8002cc8:	d13b      	bne.n	8002d42 <HAL_ETH_IRQHandler+0xa4>
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8002cca:	f015 0f01 	tst.w	r5, #1
 8002cce:	d002      	beq.n	8002cd6 <HAL_ETH_IRQHandler+0x38>
 8002cd0:	f017 0f01 	tst.w	r7, #1
 8002cd4:	d13e      	bne.n	8002d54 <HAL_ETH_IRQHandler+0xb6>
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002cd6:	f415 4f80 	tst.w	r5, #16384	@ 0x4000
 8002cda:	d024      	beq.n	8002d26 <HAL_ETH_IRQHandler+0x88>
 8002cdc:	f417 4f80 	tst.w	r7, #16384	@ 0x4000
 8002ce0:	d021      	beq.n	8002d26 <HAL_ETH_IRQHandler+0x88>
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002ce2:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002ce6:	f043 0308 	orr.w	r3, r3, #8
 8002cea:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002cee:	f415 5f80 	tst.w	r5, #4096	@ 0x1000
 8002cf2:	d03a      	beq.n	8002d6a <HAL_ETH_IRQHandler+0xcc>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cfa:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002cfe:	f422 626f 	bic.w	r2, r2, #3824	@ 0xef0
 8002d02:	f022 020d 	bic.w	r2, r2, #13
 8002d06:	04d2      	lsls	r2, r2, #19
 8002d08:	0cd2      	lsrs	r2, r2, #19
 8002d0a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002d0e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002d12:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002d16:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d1a:	23e0      	movs	r3, #224	@ 0xe0
 8002d1c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7ff ffb8 	bl	8002c96 <HAL_ETH_ErrorCallback>
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002d26:	f416 4fc0 	tst.w	r6, #24576	@ 0x6000
 8002d2a:	d12c      	bne.n	8002d86 <HAL_ETH_IRQHandler+0xe8>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002d2c:	f016 0f10 	tst.w	r6, #16
 8002d30:	d13e      	bne.n	8002db0 <HAL_ETH_IRQHandler+0x112>
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002d32:	f016 0f20 	tst.w	r6, #32
 8002d36:	d149      	bne.n	8002dcc <HAL_ETH_IRQHandler+0x12e>
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002d38:	f418 0f80 	tst.w	r8, #4194304	@ 0x400000
 8002d3c:	d154      	bne.n	8002de8 <HAL_ETH_IRQHandler+0x14a>
}
 8002d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d46:	f248 0240 	movw	r2, #32832	@ 0x8040
 8002d4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_RxCpltCallback(heth);
 8002d4e:	f7ff ffa1 	bl	8002c94 <HAL_ETH_RxCpltCallback>
 8002d52:	e7ba      	b.n	8002cca <HAL_ETH_IRQHandler+0x2c>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d5a:	f248 0201 	movw	r2, #32769	@ 0x8001
 8002d5e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_TxCpltCallback(heth);
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff ff95 	bl	8002c92 <HAL_ETH_TxCpltCallback>
 8002d68:	e7b5      	b.n	8002cd6 <HAL_ETH_IRQHandler+0x38>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d70:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002d74:	f402 42cd 	and.w	r2, r2, #26240	@ 0x6680
 8002d78:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002d7c:	f44f 42cd 	mov.w	r2, #26240	@ 0x6680
 8002d80:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 8002d84:	e7cc      	b.n	8002d20 <HAL_ETH_IRQHandler+0x82>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002d86:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002d8a:	f043 0310 	orr.w	r3, r3, #16
 8002d8e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d98:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002d9c:	23e0      	movs	r3, #224	@ 0xe0
 8002d9e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7ff ff77 	bl	8002c96 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8002dae:	e7bd      	b.n	8002d2c <HAL_ETH_IRQHandler+0x8e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002db6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002dba:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff ff6a 	bl	8002c98 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8002dca:	e7b2      	b.n	8002d32 <HAL_ETH_IRQHandler+0x94>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    HAL_ETH_EEECallback(heth);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff ff5d 	bl	8002c9a <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8002de6:	e7a7      	b.n	8002d38 <HAL_ETH_IRQHandler+0x9a>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002df0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    HAL_ETH_WakeUpCallback(heth);
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff ff51 	bl	8002c9c <HAL_ETH_WakeUpCallback>
}
 8002dfa:	e7a0      	b.n	8002d3e <HAL_ETH_IRQHandler+0xa0>

08002dfc <HAL_ETH_SetMDIOClockRange>:
{
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e00:	6803      	ldr	r3, [r0, #0]
 8002e02:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e06:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
  hclk = HAL_RCC_GetHCLKFreq();
 8002e0a:	f003 f977 	bl	80060fc <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_ETH_SetMDIOClockRange+0x54>)
 8002e10:	4298      	cmp	r0, r3
 8002e12:	d805      	bhi.n	8002e20 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e14:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8002e1e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <HAL_ETH_SetMDIOClockRange+0x58>)
 8002e22:	4298      	cmp	r0, r3
 8002e24:	d202      	bcs.n	8002e2c <HAL_ETH_SetMDIOClockRange+0x30>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002e26:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 8002e2a:	e7f5      	b.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 100000000U)
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <HAL_ETH_SetMDIOClockRange+0x5c>)
 8002e2e:	4298      	cmp	r0, r3
 8002e30:	d9f2      	bls.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 150000000U)
 8002e32:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_ETH_SetMDIOClockRange+0x60>)
 8002e34:	4298      	cmp	r0, r3
 8002e36:	d802      	bhi.n	8002e3e <HAL_ETH_SetMDIOClockRange+0x42>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e38:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8002e3c:	e7ec      	b.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 250000000U)
 8002e3e:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002e40:	4298      	cmp	r0, r3
 8002e42:	d802      	bhi.n	8002e4a <HAL_ETH_SetMDIOClockRange+0x4e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002e44:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 8002e48:	e7e6      	b.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x1c>
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002e4a:	f444 64a0 	orr.w	r4, r4, #1280	@ 0x500
 8002e4e:	e7e3      	b.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x1c>
 8002e50:	02160ebf 	.word	0x02160ebf
 8002e54:	03938700 	.word	0x03938700
 8002e58:	05f5e0ff 	.word	0x05f5e0ff
 8002e5c:	08f0d17f 	.word	0x08f0d17f
 8002e60:	0ee6b27f 	.word	0x0ee6b27f

08002e64 <HAL_ETH_Init>:
  if (heth == NULL)
 8002e64:	2800      	cmp	r0, #0
 8002e66:	f000 80a7 	beq.w	8002fb8 <HAL_ETH_Init+0x154>
{
 8002e6a:	b530      	push	{r4, r5, lr}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002e70:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002e74:	b39b      	cbz	r3, 8002ede <HAL_ETH_Init+0x7a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e76:	4b51      	ldr	r3, [pc, #324]	@ (8002fbc <HAL_ETH_Init+0x158>)
 8002e78:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002e7c:	f042 0202 	orr.w	r2, r2, #2
 8002e80:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002e90:	7a23      	ldrb	r3, [r4, #8]
 8002e92:	bb53      	cbnz	r3, 8002eea <HAL_ETH_Init+0x86>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff fc2f 	bl	80026f8 <HAL_SYSCFG_ETHInterfaceSelect>
  (void)SYSCFG->PMCR;
 8002e9a:	4b49      	ldr	r3, [pc, #292]	@ (8002fc0 <HAL_ETH_Init+0x15c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002eac:	f7ff fc04 	bl	80026b8 <HAL_GetTick>
 8002eb0:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f013 0f01 	tst.w	r3, #1
 8002ebe:	d019      	beq.n	8002ef4 <HAL_ETH_Init+0x90>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ec0:	f7ff fbfa 	bl	80026b8 <HAL_GetTick>
 8002ec4:	1b40      	subs	r0, r0, r5
 8002ec6:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8002eca:	d9f2      	bls.n	8002eb2 <HAL_ETH_Init+0x4e>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ecc:	2304      	movs	r3, #4
 8002ece:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ed2:	23e0      	movs	r3, #224	@ 0xe0
 8002ed4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      return HAL_ERROR;
 8002ed8:	2001      	movs	r0, #1
}
 8002eda:	b003      	add	sp, #12
 8002edc:	bd30      	pop	{r4, r5, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ede:	2320      	movs	r3, #32
 8002ee0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 8002ee4:	f7fd fce2 	bl	80008ac <HAL_ETH_MspInit>
 8002ee8:	e7c5      	b.n	8002e76 <HAL_ETH_Init+0x12>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002eea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002eee:	f7ff fc03 	bl	80026f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8002ef2:	e7d2      	b.n	8002e9a <HAL_ETH_Init+0x36>
  HAL_ETH_SetMDIOClockRange(heth);
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff ff81 	bl	8002dfc <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002efa:	f003 f8ff 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8002efe:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_ETH_Init+0x160>)
 8002f00:	fba3 2300 	umull	r2, r3, r3, r0
 8002f04:	0c9b      	lsrs	r3, r3, #18
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  ETH_MACDMAConfig(heth);
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7ff fdee 	bl	8002af0 <ETH_MACDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f1a:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
 8002f1e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002f22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f26:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002f2a:	6962      	ldr	r2, [r4, #20]
 8002f2c:	f012 0f03 	tst.w	r2, #3
 8002f30:	d006      	beq.n	8002f40 <HAL_ETH_Init+0xdc>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002f32:	2001      	movs	r0, #1
 8002f34:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002f38:	23e0      	movs	r3, #224	@ 0xe0
 8002f3a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_ERROR;
 8002f3e:	e7cc      	b.n	8002eda <HAL_ETH_Init+0x76>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002f40:	6821      	ldr	r1, [r4, #0]
 8002f42:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8002f46:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
 8002f4a:	f36f 034e 	bfc	r3, #1, #14
 8002f4e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8002f52:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  ETH_DMATxDescListInit(heth);
 8002f56:	4620      	mov	r0, r4
 8002f58:	f7ff fe38 	bl	8002bcc <ETH_DMATxDescListInit>
  ETH_DMARxDescListInit(heth);
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7ff fe62 	bl	8002c26 <ETH_DMARxDescListInit>
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f62:	6863      	ldr	r3, [r4, #4]
 8002f64:	7959      	ldrb	r1, [r3, #5]
 8002f66:	791b      	ldrb	r3, [r3, #4]
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f6e:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f72:	6862      	ldr	r2, [r4, #4]
 8002f74:	78d1      	ldrb	r1, [r2, #3]
 8002f76:	7893      	ldrb	r3, [r2, #2]
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f7e:	7851      	ldrb	r1, [r2, #1]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f80:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f84:	7811      	ldrb	r1, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f86:	6822      	ldr	r2, [r4, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f88:	430b      	orrs	r3, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f8a:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002f8e:	6822      	ldr	r2, [r4, #0]
 8002f90:	f8d2 170c 	ldr.w	r1, [r2, #1804]	@ 0x70c
 8002f94:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <HAL_ETH_Init+0x164>)
 8002f96:	430b      	orrs	r3, r1
 8002f98:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002f9c:	6822      	ldr	r2, [r4, #0]
 8002f9e:	f8d2 1710 	ldr.w	r1, [r2, #1808]	@ 0x710
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <HAL_ETH_Init+0x168>)
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002faa:	2000      	movs	r0, #0
 8002fac:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 8002fb6:	e790      	b.n	8002eda <HAL_ETH_Init+0x76>
    return HAL_ERROR;
 8002fb8:	2001      	movs	r0, #1
}
 8002fba:	4770      	bx	lr
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	58000400 	.word	0x58000400
 8002fc4:	431bde83 	.word	0x431bde83
 8002fc8:	0c020060 	.word	0x0c020060
 8002fcc:	0c20c000 	.word	0x0c20c000

08002fd0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002fd0:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002fd2:	6b41      	ldr	r1, [r0, #52]	@ 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002fd4:	6804      	ldr	r4, [r0, #0]
 8002fd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8002fda:	4a6f      	ldr	r2, [pc, #444]	@ (8003198 <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8002fe2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002fe6:	6804      	ldr	r4, [r0, #0]
 8002fe8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8002fec:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002ff0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8002ff2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002ff6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002ffa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002ffc:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002ffe:	6804      	ldr	r4, [r0, #0]
 8003000:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8003004:	4011      	ands	r1, r2
 8003006:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800300a:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800300e:	6804      	ldr	r4, [r0, #0]
 8003010:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8003014:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8003018:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800301a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800301e:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003022:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003024:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003028:	6804      	ldr	r4, [r0, #0]
 800302a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800302e:	4011      	ands	r1, r2
 8003030:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8003034:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003038:	6804      	ldr	r4, [r0, #0]
 800303a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800303e:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8003042:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003044:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003048:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800304c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800304e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003050:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003054:	6804      	ldr	r4, [r0, #0]
 8003056:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800305a:	4011      	ands	r1, r2
 800305c:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8003060:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003064:	6804      	ldr	r4, [r0, #0]
 8003066:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800306a:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 800306e:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8003070:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003074:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003078:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800307a:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 800307c:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003080:	6804      	ldr	r4, [r0, #0]
 8003082:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8003086:	4011      	ands	r1, r2
 8003088:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 800308c:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003090:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003092:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003094:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003098:	6804      	ldr	r4, [r0, #0]
 800309a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 800309e:	4011      	ands	r1, r2
 80030a0:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 80030a4:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80030a8:	6804      	ldr	r4, [r0, #0]
 80030aa:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 80030ae:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 80030b2:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80030b4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80030b8:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80030bc:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80030be:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80030c2:	6804      	ldr	r4, [r0, #0]
 80030c4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 80030c8:	400a      	ands	r2, r1
 80030ca:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80030ce:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80030d2:	6802      	ldr	r2, [r0, #0]
 80030d4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80030d8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80030dc:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 80030de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80030e2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80030e6:	6802      	ldr	r2, [r0, #0]
 80030e8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80030ec:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80030f0:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80030f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80030f6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80030fa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80030fc:	4a27      	ldr	r2, [pc, #156]	@ (800319c <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 80030fe:	441a      	add	r2, r3
 8003100:	0092      	lsls	r2, r2, #2
 8003102:	66c2      	str	r2, [r0, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003104:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800310a:	6703      	str	r3, [r0, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800310c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800310e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003112:	6743      	str	r3, [r0, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003114:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003116:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003118:	fb04 f101 	mul.w	r1, r4, r1
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800311c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003120:	6783      	str	r3, [r0, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003122:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003124:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8003126:	fb04 f101 	mul.w	r1, r4, r1
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800312a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800312e:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003130:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003132:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8003134:	fb04 f101 	mul.w	r1, r4, r1
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003138:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800313c:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003140:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8003142:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003146:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800314a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800314c:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 800314e:	fb01 fc04 	mul.w	ip, r1, r4
 8003152:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8003156:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800315a:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 800315c:	fb04 f101 	mul.w	r1, r4, r1
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003160:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003164:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003168:	490d      	ldr	r1, [pc, #52]	@ (80031a0 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 800316a:	428b      	cmp	r3, r1
 800316c:	d90d      	bls.n	800318a <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800316e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8003172:	f043 0320 	orr.w	r3, r3, #32
 8003176:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800317a:	2303      	movs	r3, #3
 800317c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98

    return HAL_ERROR;
 8003180:	2001      	movs	r0, #1
 8003182:	e007      	b.n	8003194 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003184:	2300      	movs	r3, #0
 8003186:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800318a:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 800318e:	4293      	cmp	r3, r2
 8003190:	d8f8      	bhi.n	8003184 <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2000      	movs	r0, #0
}
 8003194:	bc30      	pop	{r4, r5}
 8003196:	4770      	bx	lr
 8003198:	ffff0003 	.word	0xffff0003
 800319c:	10002b00 	.word	0x10002b00
 80031a0:	4000d3fc 	.word	0x4000d3fc

080031a4 <HAL_FDCAN_Init>:
{
 80031a4:	b530      	push	{r4, r5, lr}
 80031a6:	b095      	sub	sp, #84	@ 0x54
 80031a8:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80031aa:	224c      	movs	r2, #76	@ 0x4c
 80031ac:	49a0      	ldr	r1, [pc, #640]	@ (8003430 <HAL_FDCAN_Init+0x28c>)
 80031ae:	a801      	add	r0, sp, #4
 80031b0:	f009 fe61 	bl	800ce76 <memcpy>
  if (hfdcan == NULL)
 80031b4:	2c00      	cmp	r4, #0
 80031b6:	f000 8138 	beq.w	800342a <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	4a9d      	ldr	r2, [pc, #628]	@ (8003434 <HAL_FDCAN_Init+0x290>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d020      	beq.n	8003204 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031c2:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 80031c6:	b30b      	cbz	r3, 800320c <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80031c8:	6822      	ldr	r2, [r4, #0]
 80031ca:	6993      	ldr	r3, [r2, #24]
 80031cc:	f023 0310 	bic.w	r3, r3, #16
 80031d0:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 80031d2:	f7ff fa71 	bl	80026b8 <HAL_GetTick>
 80031d6:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	f012 0f08 	tst.w	r2, #8
 80031e0:	d01a      	beq.n	8003218 <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031e2:	f7ff fa69 	bl	80026b8 <HAL_GetTick>
 80031e6:	1b43      	subs	r3, r0, r5
 80031e8:	2b0a      	cmp	r3, #10
 80031ea:	d9f5      	bls.n	80031d8 <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031ec:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031f8:	2303      	movs	r3, #3
 80031fa:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 80031fe:	2001      	movs	r0, #1
}
 8003200:	b015      	add	sp, #84	@ 0x54
 8003202:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003204:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003208:	6063      	str	r3, [r4, #4]
 800320a:	e7da      	b.n	80031c2 <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 800320c:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8003210:	4620      	mov	r0, r4
 8003212:	f7fd fc05 	bl	8000a20 <HAL_FDCAN_MspInit>
 8003216:	e7d7      	b.n	80031c8 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8003220:	f7ff fa4a 	bl	80026b8 <HAL_GetTick>
 8003224:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	f012 0f01 	tst.w	r2, #1
 800322e:	d10f      	bne.n	8003250 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003230:	f7ff fa42 	bl	80026b8 <HAL_GetTick>
 8003234:	1b40      	subs	r0, r0, r5
 8003236:	280a      	cmp	r0, #10
 8003238:	d9f5      	bls.n	8003226 <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800323a:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003246:	2303      	movs	r3, #3
 8003248:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
 800324e:	e7d7      	b.n	8003200 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	f042 0202 	orr.w	r2, r2, #2
 8003256:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003258:	7c23      	ldrb	r3, [r4, #16]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d040      	beq.n	80032e0 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	6993      	ldr	r3, [r2, #24]
 8003262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003266:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003268:	7c63      	ldrb	r3, [r4, #17]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d03e      	beq.n	80032ec <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	6993      	ldr	r3, [r2, #24]
 8003272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003276:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003278:	7ca3      	ldrb	r3, [r4, #18]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d03c      	beq.n	80032f8 <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	6993      	ldr	r3, [r2, #24]
 8003282:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003286:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	6993      	ldr	r3, [r2, #24]
 800328c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003290:	68a1      	ldr	r1, [r4, #8]
 8003292:	430b      	orrs	r3, r1
 8003294:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	6993      	ldr	r3, [r2, #24]
 800329a:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 800329e:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032a0:	6822      	ldr	r2, [r4, #0]
 80032a2:	6913      	ldr	r3, [r2, #16]
 80032a4:	f023 0310 	bic.w	r3, r3, #16
 80032a8:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032aa:	68e3      	ldr	r3, [r4, #12]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d029      	beq.n	8003304 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02c      	beq.n	800330e <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	f000 809b 	beq.w	80033f0 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80032ba:	6822      	ldr	r2, [r4, #0]
 80032bc:	6993      	ldr	r3, [r2, #24]
 80032be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c2:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	6913      	ldr	r3, [r2, #16]
 80032c8:	f043 0310 	orr.w	r3, r3, #16
 80032cc:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80032ce:	68e3      	ldr	r3, [r4, #12]
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d11c      	bne.n	800330e <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6993      	ldr	r3, [r2, #24]
 80032d8:	f043 0320 	orr.w	r3, r3, #32
 80032dc:	6193      	str	r3, [r2, #24]
 80032de:	e016      	b.n	800330e <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032e0:	6822      	ldr	r2, [r4, #0]
 80032e2:	6993      	ldr	r3, [r2, #24]
 80032e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032e8:	6193      	str	r3, [r2, #24]
 80032ea:	e7bd      	b.n	8003268 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032ec:	6822      	ldr	r2, [r4, #0]
 80032ee:	6993      	ldr	r3, [r2, #24]
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f4:	6193      	str	r3, [r2, #24]
 80032f6:	e7bf      	b.n	8003278 <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032f8:	6822      	ldr	r2, [r4, #0]
 80032fa:	6993      	ldr	r3, [r2, #24]
 80032fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003300:	6193      	str	r3, [r2, #24]
 8003302:	e7c1      	b.n	8003288 <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003304:	6822      	ldr	r2, [r4, #0]
 8003306:	6993      	ldr	r3, [r2, #24]
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800330e:	69a3      	ldr	r3, [r4, #24]
 8003310:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003312:	69e3      	ldr	r3, [r4, #28]
 8003314:	3b01      	subs	r3, #1
 8003316:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003318:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800331c:	6a22      	ldr	r2, [r4, #32]
 800331e:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003320:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003322:	6962      	ldr	r2, [r4, #20]
 8003324:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003326:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800332c:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800332e:	68a3      	ldr	r3, [r4, #8]
 8003330:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003334:	d062      	beq.n	80033fc <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003336:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003338:	b133      	cbz	r3, 8003348 <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003340:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003342:	430b      	orrs	r3, r1
 8003344:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003348:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800334a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800334c:	42d3      	cmn	r3, r2
 800334e:	d00d      	beq.n	800336c <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003350:	6821      	ldr	r1, [r4, #0]
 8003352:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 8003356:	f023 0307 	bic.w	r3, r3, #7
 800335a:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800335c:	a814      	add	r0, sp, #80	@ 0x50
 800335e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003362:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800336c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800336e:	b16b      	cbz	r3, 800338c <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003370:	6821      	ldr	r1, [r4, #0]
 8003372:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800337c:	a814      	add	r0, sp, #80	@ 0x50
 800337e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003382:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800338c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800338e:	b173      	cbz	r3, 80033ae <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003390:	6821      	ldr	r1, [r4, #0]
 8003392:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800339c:	a814      	add	r0, sp, #80	@ 0x50
 800339e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80033a2:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80033a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80033aa:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80033ae:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80033b0:	b173      	cbz	r3, 80033d0 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80033b2:	6821      	ldr	r1, [r4, #0]
 80033b4:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 80033b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80033bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80033be:	a814      	add	r0, sp, #80	@ 0x50
 80033c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80033c4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80033c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80033cc:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <HAL_FDCAN_Init+0x290>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d022      	beq.n	800341e <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033de:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033e8:	4620      	mov	r0, r4
 80033ea:	f7ff fdf1 	bl	8002fd0 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 80033ee:	e707      	b.n	8003200 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	6993      	ldr	r3, [r2, #24]
 80033f4:	f043 0320 	orr.w	r3, r3, #32
 80033f8:	6193      	str	r3, [r2, #24]
 80033fa:	e788      	b.n	800330e <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033fe:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003400:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003402:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003408:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800340a:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800340c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003410:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003412:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003414:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800341a:	60cb      	str	r3, [r1, #12]
 800341c:	e78b      	b.n	8003336 <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800341e:	6862      	ldr	r2, [r4, #4]
 8003420:	6893      	ldr	r3, [r2, #8]
 8003422:	f023 0303 	bic.w	r3, r3, #3
 8003426:	6093      	str	r3, [r2, #8]
 8003428:	e7d6      	b.n	80033d8 <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 800342a:	2001      	movs	r0, #1
 800342c:	e6e8      	b.n	8003200 <HAL_FDCAN_Init+0x5c>
 800342e:	bf00      	nop
 8003430:	0800d7a4 	.word	0x0800d7a4
 8003434:	4000a000 	.word	0x4000a000

08003438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800343c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800343e:	e06b      	b.n	8003518 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003440:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003442:	005e      	lsls	r6, r3, #1
 8003444:	2403      	movs	r4, #3
 8003446:	40b4      	lsls	r4, r6
 8003448:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344c:	68cc      	ldr	r4, [r1, #12]
 800344e:	40b4      	lsls	r4, r6
 8003450:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003452:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003454:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003456:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800345a:	684c      	ldr	r4, [r1, #4]
 800345c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003460:	409c      	lsls	r4, r3
 8003462:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003464:	6044      	str	r4, [r0, #4]
 8003466:	e069      	b.n	800353c <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003468:	08dd      	lsrs	r5, r3, #3
 800346a:	3508      	adds	r5, #8
 800346c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003470:	f003 0c07 	and.w	ip, r3, #7
 8003474:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003478:	f04f 0e0f 	mov.w	lr, #15
 800347c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003480:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003484:	690c      	ldr	r4, [r1, #16]
 8003486:	fa04 f40c 	lsl.w	r4, r4, ip
 800348a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800348e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003492:	e06b      	b.n	800356c <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003494:	2409      	movs	r4, #9
 8003496:	e000      	b.n	800349a <HAL_GPIO_Init+0x62>
 8003498:	2400      	movs	r4, #0
 800349a:	fa04 f40e 	lsl.w	r4, r4, lr
 800349e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034a0:	f10c 0c02 	add.w	ip, ip, #2
 80034a4:	4d69      	ldr	r5, [pc, #420]	@ (800364c <HAL_GPIO_Init+0x214>)
 80034a6:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034aa:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80034ae:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80034b0:	43d4      	mvns	r4, r2
 80034b2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034b6:	684f      	ldr	r7, [r1, #4]
 80034b8:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 80034bc:	d001      	beq.n	80034c2 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80034be:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80034c2:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80034c6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80034c8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80034ca:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ce:	684f      	ldr	r7, [r1, #4]
 80034d0:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 80034d4:	d001      	beq.n	80034da <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 80034d6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80034da:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80034de:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034e0:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 80034e4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e8:	684f      	ldr	r7, [r1, #4]
 80034ea:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 80034ee:	d001      	beq.n	80034f4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80034f0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034f4:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80034f8:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034fc:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 8003500:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003502:	684e      	ldr	r6, [r1, #4]
 8003504:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8003508:	d001      	beq.n	800350e <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800350a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800350e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003512:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003516:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003518:	680a      	ldr	r2, [r1, #0]
 800351a:	fa32 f403 	lsrs.w	r4, r2, r3
 800351e:	f000 8092 	beq.w	8003646 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003522:	f04f 0c01 	mov.w	ip, #1
 8003526:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800352a:	ea1c 0202 	ands.w	r2, ip, r2
 800352e:	d0f2      	beq.n	8003516 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003530:	684c      	ldr	r4, [r1, #4]
 8003532:	f004 0403 	and.w	r4, r4, #3
 8003536:	3c01      	subs	r4, #1
 8003538:	2c01      	cmp	r4, #1
 800353a:	d981      	bls.n	8003440 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353c:	684c      	ldr	r4, [r1, #4]
 800353e:	f004 0403 	and.w	r4, r4, #3
 8003542:	2c03      	cmp	r4, #3
 8003544:	d00c      	beq.n	8003560 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 8003546:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003548:	005d      	lsls	r5, r3, #1
 800354a:	f04f 0c03 	mov.w	ip, #3
 800354e:	fa0c fc05 	lsl.w	ip, ip, r5
 8003552:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003556:	688c      	ldr	r4, [r1, #8]
 8003558:	40ac      	lsls	r4, r5
 800355a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 800355e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003560:	684c      	ldr	r4, [r1, #4]
 8003562:	f004 0403 	and.w	r4, r4, #3
 8003566:	2c02      	cmp	r4, #2
 8003568:	f43f af7e 	beq.w	8003468 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800356c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800356e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003572:	f04f 0c03 	mov.w	ip, #3
 8003576:	fa0c fc0e 	lsl.w	ip, ip, lr
 800357a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800357e:	684c      	ldr	r4, [r1, #4]
 8003580:	f004 0403 	and.w	r4, r4, #3
 8003584:	fa04 f40e 	lsl.w	r4, r4, lr
 8003588:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800358c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800358e:	684c      	ldr	r4, [r1, #4]
 8003590:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8003594:	d0bf      	beq.n	8003516 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	4c2e      	ldr	r4, [pc, #184]	@ (8003650 <HAL_GPIO_Init+0x218>)
 8003598:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 800359c:	f045 0502 	orr.w	r5, r5, #2
 80035a0:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 80035a4:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 80035a8:	f004 0402 	and.w	r4, r4, #2
 80035ac:	9401      	str	r4, [sp, #4]
 80035ae:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80035b0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80035b4:	f10c 0502 	add.w	r5, ip, #2
 80035b8:	4c24      	ldr	r4, [pc, #144]	@ (800364c <HAL_GPIO_Init+0x214>)
 80035ba:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035be:	f003 0e03 	and.w	lr, r3, #3
 80035c2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80035c6:	240f      	movs	r4, #15
 80035c8:	fa04 f40e 	lsl.w	r4, r4, lr
 80035cc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035d0:	4c20      	ldr	r4, [pc, #128]	@ (8003654 <HAL_GPIO_Init+0x21c>)
 80035d2:	42a0      	cmp	r0, r4
 80035d4:	f43f af60 	beq.w	8003498 <HAL_GPIO_Init+0x60>
 80035d8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80035dc:	42a0      	cmp	r0, r4
 80035de:	d022      	beq.n	8003626 <HAL_GPIO_Init+0x1ee>
 80035e0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d020      	beq.n	800362a <HAL_GPIO_Init+0x1f2>
 80035e8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80035ec:	42a0      	cmp	r0, r4
 80035ee:	d01e      	beq.n	800362e <HAL_GPIO_Init+0x1f6>
 80035f0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80035f4:	42a0      	cmp	r0, r4
 80035f6:	d01c      	beq.n	8003632 <HAL_GPIO_Init+0x1fa>
 80035f8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80035fc:	42a0      	cmp	r0, r4
 80035fe:	d01a      	beq.n	8003636 <HAL_GPIO_Init+0x1fe>
 8003600:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003604:	42a0      	cmp	r0, r4
 8003606:	d018      	beq.n	800363a <HAL_GPIO_Init+0x202>
 8003608:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800360c:	42a0      	cmp	r0, r4
 800360e:	d016      	beq.n	800363e <HAL_GPIO_Init+0x206>
 8003610:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003614:	42a0      	cmp	r0, r4
 8003616:	d014      	beq.n	8003642 <HAL_GPIO_Init+0x20a>
 8003618:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800361c:	42a0      	cmp	r0, r4
 800361e:	f43f af39 	beq.w	8003494 <HAL_GPIO_Init+0x5c>
 8003622:	240a      	movs	r4, #10
 8003624:	e739      	b.n	800349a <HAL_GPIO_Init+0x62>
 8003626:	2401      	movs	r4, #1
 8003628:	e737      	b.n	800349a <HAL_GPIO_Init+0x62>
 800362a:	2402      	movs	r4, #2
 800362c:	e735      	b.n	800349a <HAL_GPIO_Init+0x62>
 800362e:	2403      	movs	r4, #3
 8003630:	e733      	b.n	800349a <HAL_GPIO_Init+0x62>
 8003632:	2404      	movs	r4, #4
 8003634:	e731      	b.n	800349a <HAL_GPIO_Init+0x62>
 8003636:	2405      	movs	r4, #5
 8003638:	e72f      	b.n	800349a <HAL_GPIO_Init+0x62>
 800363a:	2406      	movs	r4, #6
 800363c:	e72d      	b.n	800349a <HAL_GPIO_Init+0x62>
 800363e:	2407      	movs	r4, #7
 8003640:	e72b      	b.n	800349a <HAL_GPIO_Init+0x62>
 8003642:	2408      	movs	r4, #8
 8003644:	e729      	b.n	800349a <HAL_GPIO_Init+0x62>
  }
}
 8003646:	b003      	add	sp, #12
 8003648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800364a:	bf00      	nop
 800364c:	58000400 	.word	0x58000400
 8003650:	58024400 	.word	0x58024400
 8003654:	58020000 	.word	0x58020000

08003658 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003658:	b10a      	cbz	r2, 800365e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800365a:	6181      	str	r1, [r0, #24]
 800365c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800365e:	0409      	lsls	r1, r1, #16
 8003660:	6181      	str	r1, [r0, #24]
  }
}
 8003662:	4770      	bx	lr

08003664 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003666:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003668:	6a34      	ldr	r4, [r6, #32]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800366a:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800366e:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003672:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8003676:	2b02      	cmp	r3, #2
 8003678:	d000      	beq.n	800367c <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 800367a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800367c:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800367e:	2c00      	cmp	r4, #0
 8003680:	d0fb      	beq.n	800367a <HCD_RXQLVL_IRQHandler+0x16>
 8003682:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 8003686:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800368a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800368c:	2900      	cmp	r1, #0
 800368e:	d0f4      	beq.n	800367a <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003690:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 8003694:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800369a:	4422      	add	r2, r4
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	429a      	cmp	r2, r3
 80036a0:	d907      	bls.n	80036b2 <HCD_RXQLVL_IRQHandler+0x4e>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80036a2:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 80036a6:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 80036aa:	2304      	movs	r3, #4
 80036ac:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
}
 80036b0:	e7e3      	b.n	800367a <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 80036b2:	4622      	mov	r2, r4
 80036b4:	4630      	mov	r0, r6
 80036b6:	f005 fbf3 	bl	8008ea0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80036ba:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 80036be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	4422      	add	r2, r4
 80036c6:	62da      	str	r2, [r3, #44]	@ 0x2c
          hhcd->hc[chnum].xfer_count += pktcnt;
 80036c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ca:	4422      	add	r2, r4
 80036cc:	639a      	str	r2, [r3, #56]	@ 0x38
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036ce:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 80036d2:	f8d6 2510 	ldr.w	r2, [r6, #1296]	@ 0x510
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d8:	42a3      	cmp	r3, r4
 80036da:	d1ce      	bne.n	800367a <HCD_RXQLVL_IRQHandler+0x16>
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HCD_RXQLVL_IRQHandler+0xa8>)
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ca      	beq.n	800367a <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80036e4:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80036f0:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
            hhcd->hc[chnum].toggle_in ^= 1U;
 80036f4:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 80036f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80036fc:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8003700:	f082 0201 	eor.w	r2, r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003708:	e7b7      	b.n	800367a <HCD_RXQLVL_IRQHandler+0x16>
 800370a:	bf00      	nop
 800370c:	1ff80000 	.word	0x1ff80000

08003710 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8003710:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
 8003714:	2b01      	cmp	r3, #1
 8003716:	d00b      	beq.n	8003730 <HAL_HCD_HC_Halt+0x20>
{
 8003718:	b510      	push	{r4, lr}
 800371a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800371c:	2301      	movs	r3, #1
 800371e:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003722:	6800      	ldr	r0, [r0, #0]
 8003724:	f005 fe8a 	bl	800943c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003728:	2000      	movs	r0, #0
 800372a:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4
}
 800372e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8003730:	2002      	movs	r0, #2
}
 8003732:	4770      	bx	lr

08003734 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8003734:	2800      	cmp	r0, #0
 8003736:	d03b      	beq.n	80037b0 <HAL_HCD_Init+0x7c>
{
 8003738:	b510      	push	{r4, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	4604      	mov	r4, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800373e:	f890 33d5 	ldrb.w	r3, [r0, #981]	@ 0x3d5
 8003742:	b1a3      	cbz	r3, 800376e <HAL_HCD_Init+0x3a>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8003744:	2303      	movs	r3, #3
 8003746:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
  __HAL_HCD_DISABLE(hhcd);
 800374a:	6820      	ldr	r0, [r4, #0]
 800374c:	f005 f826 	bl	800879c <USB_DisableGlobalInt>
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003750:	7c23      	ldrb	r3, [r4, #16]
 8003752:	f88d 3000 	strb.w	r3, [sp]
 8003756:	1d23      	adds	r3, r4, #4
 8003758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	f004 ff54 	bl	8008608 <USB_CoreInit>
 8003760:	b150      	cbz	r0, 8003778 <HAL_HCD_Init+0x44>
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003762:	2302      	movs	r3, #2
 8003764:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
}
 800376a:	b002      	add	sp, #8
 800376c:	bd10      	pop	{r4, pc}
    hhcd->Lock = HAL_UNLOCKED;
 800376e:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
    HAL_HCD_MspInit(hhcd);
 8003772:	f008 feed 	bl	800c550 <HAL_HCD_MspInit>
 8003776:	e7e5      	b.n	8003744 <HAL_HCD_Init+0x10>
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003778:	2101      	movs	r1, #1
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	f005 fc76 	bl	800906c <USB_SetCurrentMode>
 8003780:	b120      	cbz	r0, 800378c <HAL_HCD_Init+0x58>
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003782:	2302      	movs	r3, #2
 8003784:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 8003788:	2001      	movs	r0, #1
 800378a:	e7ee      	b.n	800376a <HAL_HCD_Init+0x36>
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800378c:	7c23      	ldrb	r3, [r4, #16]
 800378e:	f88d 3000 	strb.w	r3, [sp]
 8003792:	1d23      	adds	r3, r4, #4
 8003794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	f005 fcd8 	bl	800914c <USB_HostInit>
 800379c:	b918      	cbnz	r0, 80037a6 <HAL_HCD_Init+0x72>
  hhcd->State = HAL_HCD_STATE_READY;
 800379e:	2301      	movs	r3, #1
 80037a0:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
  return HAL_OK;
 80037a4:	e7e1      	b.n	800376a <HAL_HCD_Init+0x36>
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037a6:	2302      	movs	r3, #2
 80037a8:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 80037ac:	2001      	movs	r0, #1
 80037ae:	e7dc      	b.n	800376a <HAL_HCD_Init+0x36>
    return HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
}
 80037b2:	4770      	bx	lr

080037b4 <HAL_HCD_HC_SubmitRequest>:
{
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80037ba:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037be:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 80037c2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80037c6:	f88c 2017 	strb.w	r2, [ip, #23]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037ca:	f88c 3026 	strb.w	r3, [ip, #38]	@ 0x26
  if (token == 0U)
 80037ce:	b994      	cbnz	r4, 80037f6 <HAL_HCD_HC_SubmitRequest+0x42>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037d0:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 80037d4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80037d8:	f04f 0e03 	mov.w	lr, #3
 80037dc:	f88c e02a 	strb.w	lr, [ip, #42]	@ 0x2a
    hhcd->hc[ch_num].do_ping = do_ping;
 80037e0:	f89d e01c 	ldrb.w	lr, [sp, #28]
 80037e4:	f88c e019 	strb.w	lr, [ip, #25]
  switch (ep_type)
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	f200 80b1 	bhi.w	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
 80037ee:	e8df f003 	tbb	[pc, r3]
 80037f2:	a80b      	.short	0xa80b
 80037f4:	7a4c      	.short	0x7a4c
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037f6:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 80037fa:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80037fe:	f04f 0e02 	mov.w	lr, #2
 8003802:	f88c e02a 	strb.w	lr, [ip, #42]	@ 0x2a
 8003806:	e7ef      	b.n	80037e8 <HAL_HCD_HC_SubmitRequest+0x34>
      if (token == 1U) /* send data */
 8003808:	2c01      	cmp	r4, #1
 800380a:	f040 80a1 	bne.w	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
        if (direction == 0U)
 800380e:	b9f2      	cbnz	r2, 800384e <HAL_HCD_HC_SubmitRequest+0x9a>
          if (length == 0U)
 8003810:	b935      	cbnz	r5, 8003820 <HAL_HCD_HC_SubmitRequest+0x6c>
            hhcd->hc[ch_num].toggle_out = 1U;
 8003812:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003816:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003820:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003824:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382c:	b93b      	cbnz	r3, 800383e <HAL_HCD_HC_SubmitRequest+0x8a>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800382e:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003832:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003836:	2200      	movs	r2, #0
 8003838:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 800383c:	e088      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800383e:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003842:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003846:	2202      	movs	r2, #2
 8003848:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 800384c:	e080      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800384e:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003852:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003856:	7e9b      	ldrb	r3, [r3, #26]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d179      	bne.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800385c:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003860:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003868:	b93b      	cbnz	r3, 800387a <HAL_HCD_HC_SubmitRequest+0xc6>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800386a:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 800386e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003872:	2200      	movs	r2, #0
 8003874:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003878:	e06a      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800387a:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 800387e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003882:	2202      	movs	r2, #2
 8003884:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003888:	e062      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
      if (direction == 0U)
 800388a:	b9aa      	cbnz	r2, 80038b8 <HAL_HCD_HC_SubmitRequest+0x104>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800388c:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003890:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003898:	b933      	cbnz	r3, 80038a8 <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800389a:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 800389e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80038a6:	e053      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038a8:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80038ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80038b6:	e04b      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038b8:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80038bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c4:	b93b      	cbnz	r3, 80038d6 <HAL_HCD_HC_SubmitRequest+0x122>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038c6:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80038ca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80038d4:	e03c      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038d6:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80038da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80038e4:	e034      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
      if (direction == 0U)
 80038e6:	b9aa      	cbnz	r2, 8003914 <HAL_HCD_HC_SubmitRequest+0x160>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038e8:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80038ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f4:	b933      	cbnz	r3, 8003904 <HAL_HCD_HC_SubmitRequest+0x150>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038f6:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80038fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80038fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003902:	e025      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003904:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003908:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800390c:	2202      	movs	r2, #2
 800390e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003912:	e01d      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003914:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003918:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003920:	b93b      	cbnz	r3, 8003932 <HAL_HCD_HC_SubmitRequest+0x17e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003922:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003926:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800392a:	2200      	movs	r2, #0
 800392c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003930:	e00e      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003932:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003936:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800393a:	2202      	movs	r2, #2
 800393c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003940:	e006      	b.n	8003950 <HAL_HCD_HC_SubmitRequest+0x19c>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003942:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003946:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800394a:	2200      	movs	r2, #0
 800394c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003950:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8003954:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003958:	9a05      	ldr	r2, [sp, #20]
 800395a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hhcd->hc[ch_num].xfer_len  = length;
 800395c:	635d      	str	r5, [r3, #52]	@ 0x34
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800395e:	2200      	movs	r2, #0
 8003960:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  hhcd->hc[ch_num].xfer_count = 0U;
 8003964:	639a      	str	r2, [r3, #56]	@ 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8003966:	7559      	strb	r1, [r3, #21]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003968:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800396c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003970:	0089      	lsls	r1, r1, #2
 8003972:	3110      	adds	r1, #16
 8003974:	4401      	add	r1, r0
 8003976:	7982      	ldrb	r2, [r0, #6]
 8003978:	3104      	adds	r1, #4
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	f005 fdee 	bl	800955c <USB_HC_StartXfer>
}
 8003980:	bd38      	pop	{r3, r4, r5, pc}

08003982 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003982:	b530      	push	{r4, r5, lr}
 8003984:	b083      	sub	sp, #12
 8003986:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003988:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800398a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 800398e:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8003990:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 8003994:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003996:	9b00      	ldr	r3, [sp, #0]
 8003998:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800399c:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800399e:	9b01      	ldr	r3, [sp, #4]
 80039a0:	f013 0f02 	tst.w	r3, #2
 80039a4:	d007      	beq.n	80039b6 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039a6:	9b01      	ldr	r3, [sp, #4]
 80039a8:	f013 0f01 	tst.w	r3, #1
 80039ac:	d125      	bne.n	80039fa <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039ae:	9b00      	ldr	r3, [sp, #0]
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039b6:	9b01      	ldr	r3, [sp, #4]
 80039b8:	f013 0f08 	tst.w	r3, #8
 80039bc:	d010      	beq.n	80039e0 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039be:	9b00      	ldr	r3, [sp, #0]
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039c6:	9b01      	ldr	r3, [sp, #4]
 80039c8:	f013 0f04 	tst.w	r3, #4
 80039cc:	d02d      	beq.n	8003a2a <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80039ce:	7a63      	ldrb	r3, [r4, #9]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d015      	beq.n	8003a00 <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039d4:	79e3      	ldrb	r3, [r4, #7]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d022      	beq.n	8003a20 <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039da:	4620      	mov	r0, r4
 80039dc:	f008 fe27 	bl	800c62e <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039e0:	9b01      	ldr	r3, [sp, #4]
 80039e2:	f013 0f20 	tst.w	r3, #32
 80039e6:	d003      	beq.n	80039f0 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039e8:	9b00      	ldr	r3, [sp, #0]
 80039ea:	f043 0320 	orr.w	r3, r3, #32
 80039ee:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039f0:	9b00      	ldr	r3, [sp, #0]
 80039f2:	f8c5 3440 	str.w	r3, [r5, #1088]	@ 0x440
}
 80039f6:	b003      	add	sp, #12
 80039f8:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 80039fa:	f008 fe0b 	bl	800c614 <HAL_HCD_Connect_Callback>
 80039fe:	e7d6      	b.n	80039ae <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a00:	9b01      	ldr	r3, [sp, #4]
 8003a02:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a0a:	d004      	beq.n	8003a16 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	f005 fc08 	bl	8009224 <USB_InitFSLSPClkSel>
 8003a14:	e7e1      	b.n	80039da <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a16:	2102      	movs	r1, #2
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	f005 fc03 	bl	8009224 <USB_InitFSLSPClkSel>
 8003a1e:	e7dc      	b.n	80039da <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a20:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003a24:	f8c5 2404 	str.w	r2, [r5, #1028]	@ 0x404
 8003a28:	e7d7      	b.n	80039da <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f008 fe05 	bl	800c63a <HAL_HCD_PortDisabled_Callback>
 8003a30:	e7d6      	b.n	80039e0 <HCD_Port_IRQHandler+0x5e>
	...

08003a34 <HCD_HC_IN_IRQHandler>:
{
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	4605      	mov	r5, r0
 8003a38:	460c      	mov	r4, r1
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a3a:	6806      	ldr	r6, [r0, #0]
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f005 fadd 	bl	8008ffc <USB_ReadChInterrupts>
 8003a42:	f010 0f04 	tst.w	r0, #4
 8003a46:	d021      	beq.n	8003a8c <HCD_HC_IN_IRQHandler+0x58>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a48:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a52:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003a56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a60:	4621      	mov	r1, r4
 8003a62:	6828      	ldr	r0, [r5, #0]
 8003a64:	f005 fcea 	bl	800943c <USB_HC_Halt>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a68:	4621      	mov	r1, r4
 8003a6a:	6828      	ldr	r0, [r5, #0]
 8003a6c:	f005 fac6 	bl	8008ffc <USB_ReadChInterrupts>
 8003a70:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8003a74:	d06c      	beq.n	8003b50 <HCD_HC_IN_IRQHandler+0x11c>
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a76:	4621      	mov	r1, r4
 8003a78:	6828      	ldr	r0, [r5, #0]
 8003a7a:	f005 fcdf 	bl	800943c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a7e:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8003a82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a86:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
}
 8003a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	6828      	ldr	r0, [r5, #0]
 8003a90:	f005 fab4 	bl	8008ffc <USB_ReadChInterrupts>
 8003a94:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003a98:	d011      	beq.n	8003abe <HCD_HC_IN_IRQHandler+0x8a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a9a:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aa2:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_BBLERR;
 8003aa6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003aaa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003aae:	2208      	movs	r2, #8
 8003ab0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	6828      	ldr	r0, [r5, #0]
 8003ab8:	f005 fcc0 	bl	800943c <USB_HC_Halt>
 8003abc:	e7d4      	b.n	8003a68 <HCD_HC_IN_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003abe:	4621      	mov	r1, r4
 8003ac0:	6828      	ldr	r0, [r5, #0]
 8003ac2:	f005 fa9b 	bl	8008ffc <USB_ReadChInterrupts>
 8003ac6:	f010 0f08 	tst.w	r0, #8
 8003aca:	d010      	beq.n	8003aee <HCD_HC_IN_IRQHandler+0xba>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003acc:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_STALL;
 8003ad6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003ada:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003ade:	2206      	movs	r2, #6
 8003ae0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	6828      	ldr	r0, [r5, #0]
 8003ae8:	f005 fca8 	bl	800943c <USB_HC_Halt>
 8003aec:	e7bc      	b.n	8003a68 <HCD_HC_IN_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003aee:	4621      	mov	r1, r4
 8003af0:	6828      	ldr	r0, [r5, #0]
 8003af2:	f005 fa83 	bl	8008ffc <USB_ReadChInterrupts>
 8003af6:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8003afa:	d011      	beq.n	8003b20 <HCD_HC_IN_IRQHandler+0xec>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003afc:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003b00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b04:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b08:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003b0c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003b10:	2209      	movs	r2, #9
 8003b12:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b16:	4621      	mov	r1, r4
 8003b18:	6828      	ldr	r0, [r5, #0]
 8003b1a:	f005 fc8f 	bl	800943c <USB_HC_Halt>
 8003b1e:	e7a3      	b.n	8003a68 <HCD_HC_IN_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b20:	4621      	mov	r1, r4
 8003b22:	6828      	ldr	r0, [r5, #0]
 8003b24:	f005 fa6a 	bl	8008ffc <USB_ReadChInterrupts>
 8003b28:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003b2c:	d09c      	beq.n	8003a68 <HCD_HC_IN_IRQHandler+0x34>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b2e:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003b32:	2280      	movs	r2, #128	@ 0x80
 8003b34:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b38:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003b3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003b40:	2207      	movs	r2, #7
 8003b42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b46:	4621      	mov	r1, r4
 8003b48:	6828      	ldr	r0, [r5, #0]
 8003b4a:	f005 fc77 	bl	800943c <USB_HC_Halt>
 8003b4e:	e78b      	b.n	8003a68 <HCD_HC_IN_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b50:	4621      	mov	r1, r4
 8003b52:	6828      	ldr	r0, [r5, #0]
 8003b54:	f005 fa52 	bl	8008ffc <USB_ReadChInterrupts>
 8003b58:	f010 0f01 	tst.w	r0, #1
 8003b5c:	d07c      	beq.n	8003c58 <HCD_HC_IN_IRQHandler+0x224>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b5e:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8003b62:	f506 67a0 	add.w	r7, r6, #1280	@ 0x500
 8003b66:	2320      	movs	r3, #32
 8003b68:	60bb      	str	r3, [r7, #8]
    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b6a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003b6e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003b72:	7edb      	ldrb	r3, [r3, #27]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d01d      	beq.n	8003bb4 <HCD_HC_IN_IRQHandler+0x180>
    if (hhcd->Init.dma_enable != 0U)
 8003b78:	79ab      	ldrb	r3, [r5, #6]
 8003b7a:	b14b      	cbz	r3, 8003b90 <HCD_HC_IN_IRQHandler+0x15c>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b7c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003b80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b86:	6939      	ldr	r1, [r7, #16]
 8003b88:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8003b8c:	1a52      	subs	r2, r2, r1
 8003b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hhcd->hc[chnum].state = HC_XFRC;
 8003b90:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003b94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	6459      	str	r1, [r3, #68]	@ 0x44
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ba2:	60ba      	str	r2, [r7, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ba4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d814      	bhi.n	8003bd6 <HCD_HC_IN_IRQHandler+0x1a2>
 8003bac:	e8df f003 	tbb	[pc, r3]
 8003bb0:	250d250d 	.word	0x250d250d
      hhcd->hc[chnum].do_csplit = 0U;
 8003bb4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003bb8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	76da      	strb	r2, [r3, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	e7d6      	b.n	8003b78 <HCD_HC_IN_IRQHandler+0x144>
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bca:	4621      	mov	r1, r4
 8003bcc:	6828      	ldr	r0, [r5, #0]
 8003bce:	f005 fc35 	bl	800943c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	60bb      	str	r3, [r7, #8]
    if (hhcd->Init.dma_enable == 1U)
 8003bd6:	79ab      	ldrb	r3, [r5, #6]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d020      	beq.n	8003c1e <HCD_HC_IN_IRQHandler+0x1ea>
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003bdc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003be0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be8:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003bec:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003bf0:	f083 0301 	eor.w	r3, r3, #1
 8003bf4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8003bf8:	e747      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x56>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003bfa:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
 8003bfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c02:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c06:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003c0a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c14:	4621      	mov	r1, r4
 8003c16:	4628      	mov	r0, r5
 8003c18:	f008 fd08 	bl	800c62c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c1c:	e7db      	b.n	8003bd6 <HCD_HC_IN_IRQHandler+0x1a2>
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003c1e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 8003c22:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8003c26:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003c28:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c32:	f013 0f01 	tst.w	r3, #1
 8003c36:	f43f af28 	beq.w	8003a8a <HCD_HC_IN_IRQHandler+0x56>
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003c3a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003c3e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c46:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8003c4a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8003c4e:	f083 0301 	eor.w	r3, r3, #1
 8003c52:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8003c56:	e718      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x56>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c58:	4621      	mov	r1, r4
 8003c5a:	6828      	ldr	r0, [r5, #0]
 8003c5c:	f005 f9ce 	bl	8008ffc <USB_ReadChInterrupts>
 8003c60:	f010 0f20 	tst.w	r0, #32
 8003c64:	d01e      	beq.n	8003ca4 <HCD_HC_IN_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c66:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003c70:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003c74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003c78:	7e9b      	ldrb	r3, [r3, #26]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	f47f af05 	bne.w	8003a8a <HCD_HC_IN_IRQHandler+0x56>
      hhcd->hc[chnum].do_csplit = 1U;
 8003c80:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003c84:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003c88:	2201      	movs	r2, #1
 8003c8a:	76da      	strb	r2, [r3, #27]
      hhcd->hc[chnum].state = HC_ACK;
 8003c8c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003c90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003c94:	2203      	movs	r2, #3
 8003c96:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	6828      	ldr	r0, [r5, #0]
 8003c9e:	f005 fbcd 	bl	800943c <USB_HC_Halt>
 8003ca2:	e6f2      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x56>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	6828      	ldr	r0, [r5, #0]
 8003ca8:	f005 f9a8 	bl	8008ffc <USB_ReadChInterrupts>
 8003cac:	f010 0f02 	tst.w	r0, #2
 8003cb0:	f000 8126 	beq.w	8003f00 <HCD_HC_IN_IRQHandler+0x4cc>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003cb4:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8003cb8:	f506 62a0 	add.w	r2, r6, #1280	@ 0x500
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cc0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003cc4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003cc8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d81e      	bhi.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
 8003cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8003cd8 <HCD_HC_IN_IRQHandler+0x2a4>)
 8003cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cd8:	08003cfd 	.word	0x08003cfd
 8003cdc:	08003a8b 	.word	0x08003a8b
 8003ce0:	08003e59 	.word	0x08003e59
 8003ce4:	08003eb3 	.word	0x08003eb3
 8003ce8:	08003db7 	.word	0x08003db7
 8003cec:	08003d27 	.word	0x08003d27
 8003cf0:	08003d3d 	.word	0x08003d3d
 8003cf4:	08003ee5 	.word	0x08003ee5
 8003cf8:	08003d3d 	.word	0x08003d3d
      hhcd->hc[chnum].state = HC_HALTED;
 8003cfc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003d00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d10:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003d14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d18:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f008 fc84 	bl	800c62c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d24:	e6b1      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x56>
      hhcd->hc[chnum].state = HC_HALTED;
 8003d26:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003d2a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003d34:	2205      	movs	r2, #5
 8003d36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003d3a:	e7e9      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
      hhcd->hc[chnum].state = HC_HALTED;
 8003d3c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003d40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d44:	2102      	movs	r1, #2
 8003d46:	f883 104d 	strb.w	r1, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 8003d4a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003d4c:	3101      	adds	r1, #1
 8003d4e:	6459      	str	r1, [r3, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d50:	2902      	cmp	r1, #2
 8003d52:	d91a      	bls.n	8003d8a <HCD_HC_IN_IRQHandler+0x356>
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d54:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003d58:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	6459      	str	r1, [r3, #68]	@ 0x44
        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003d60:	7e9b      	ldrb	r3, [r3, #26]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d007      	beq.n	8003d76 <HCD_HC_IN_IRQHandler+0x342>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d66:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003d6a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d6e:	2204      	movs	r2, #4
 8003d70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003d74:	e7cc      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
          hhcd->hc[chnum].do_csplit = 0U;
 8003d76:	233c      	movs	r3, #60	@ 0x3c
 8003d78:	fb03 5304 	mla	r3, r3, r4, r5
 8003d7c:	76d9      	strb	r1, [r3, #27]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003d7e:	7719      	strb	r1, [r3, #28]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d80:	6853      	ldr	r3, [r2, #4]
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d86:	6053      	str	r3, [r2, #4]
 8003d88:	e7ed      	b.n	8003d66 <HCD_HC_IN_IRQHandler+0x332>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d8a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003d8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d98:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	bf18      	it	ne
 8003da0:	2b00      	cmpne	r3, #0
 8003da2:	d1b5      	bne.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003da4:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003da8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003db0:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 8003db4:	e7ac      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
      hhcd->hc[chnum].state = HC_HALTED;
 8003db6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003dba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	f883 104d 	strb.w	r1, [r3, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dc4:	7edb      	ldrb	r3, [r3, #27]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d1a2      	bne.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003dca:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003dce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003dd2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d018      	beq.n	8003e0c <HCD_HC_IN_IRQHandler+0x3d8>
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dda:	233c      	movs	r3, #60	@ 0x3c
 8003ddc:	fb03 5304 	mla	r3, r3, r4, r5
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003de6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003dea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003dee:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	bf18      	it	ne
 8003df6:	2b00      	cmpne	r3, #0
 8003df8:	d18a      	bne.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dfa:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dfe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e06:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 8003e0a:	e781      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
          hhcd->hc[chnum].NyetErrCnt++;
 8003e0c:	213c      	movs	r1, #60	@ 0x3c
 8003e0e:	fb01 5104 	mla	r1, r1, r4, r5
 8003e12:	6c8b      	ldr	r3, [r1, #72]	@ 0x48
 8003e14:	3301      	adds	r3, #1
 8003e16:	648b      	str	r3, [r1, #72]	@ 0x48
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d916      	bls.n	8003e4a <HCD_HC_IN_IRQHandler+0x416>
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6499      	str	r1, [r3, #72]	@ 0x48
            hhcd->hc[chnum].do_csplit = 0U;
 8003e22:	76d9      	strb	r1, [r3, #27]
            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d804      	bhi.n	8003e34 <HCD_HC_IN_IRQHandler+0x400>
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003e2a:	233c      	movs	r3, #60	@ 0x3c
 8003e2c:	fb03 5304 	mla	r3, r3, r4, r5
 8003e30:	2101      	movs	r1, #1
 8003e32:	7719      	strb	r1, [r3, #28]
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e34:	6853      	ldr	r3, [r2, #4]
 8003e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e3a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e3c:	233c      	movs	r3, #60	@ 0x3c
 8003e3e:	fb03 5304 	mla	r3, r3, r4, r5
 8003e42:	2204      	movs	r2, #4
 8003e44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003e48:	e7cd      	b.n	8003de6 <HCD_HC_IN_IRQHandler+0x3b2>
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e4a:	233c      	movs	r3, #60	@ 0x3c
 8003e4c:	fb03 5304 	mla	r3, r3, r4, r5
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003e56:	e7c6      	b.n	8003de6 <HCD_HC_IN_IRQHandler+0x3b2>
      hhcd->hc[chnum].state = HC_HALTED;
 8003e58:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003e5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003e60:	2102      	movs	r1, #2
 8003e62:	f883 104d 	strb.w	r1, [r3, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e66:	7edb      	ldrb	r3, [r3, #27]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	f47f af51 	bne.w	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e6e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003e72:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003e76:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e7a:	6851      	ldr	r1, [r2, #4]
 8003e7c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8003e80:	6051      	str	r1, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e82:	68d1      	ldr	r1, [r2, #12]
 8003e84:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8003e88:	60d1      	str	r1, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e8a:	68d1      	ldr	r1, [r2, #12]
 8003e8c:	f021 0120 	bic.w	r1, r1, #32
 8003e90:	60d1      	str	r1, [r2, #12]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e92:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	bf18      	it	ne
 8003e9a:	2b00      	cmpne	r3, #0
 8003e9c:	f47f af38 	bne.w	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ea0:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ea4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eac:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 8003eb0:	e72e      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
      hhcd->hc[chnum].state = HC_HALTED;
 8003eb2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003eb6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ec0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ec4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	bf18      	it	ne
 8003ecc:	2b00      	cmpne	r3, #0
 8003ece:	f47f af1f 	bne.w	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ed2:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ed6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ede:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 8003ee2:	e715      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
      hhcd->hc[chnum].state = HC_HALTED;
 8003ee4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003ee8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 8003ef2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef4:	3201      	adds	r2, #1
 8003ef6:	645a      	str	r2, [r3, #68]	@ 0x44
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ef8:	2204      	movs	r2, #4
 8003efa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003efe:	e707      	b.n	8003d10 <HCD_HC_IN_IRQHandler+0x2dc>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f00:	4621      	mov	r1, r4
 8003f02:	6828      	ldr	r0, [r5, #0]
 8003f04:	f005 f87a 	bl	8008ffc <USB_ReadChInterrupts>
 8003f08:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003f0c:	d018      	beq.n	8003f40 <HCD_HC_IN_IRQHandler+0x50c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f0e:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003f12:	2240      	movs	r2, #64	@ 0x40
 8003f14:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_NYET;
 8003f18:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003f1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003f20:	2205      	movs	r2, #5
 8003f22:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003f26:	7e9b      	ldrb	r3, [r3, #26]
 8003f28:	b92b      	cbnz	r3, 8003f36 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f2a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003f2e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f36:	4621      	mov	r1, r4
 8003f38:	6828      	ldr	r0, [r5, #0]
 8003f3a:	f005 fa7f 	bl	800943c <USB_HC_Halt>
 8003f3e:	e5a4      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x56>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f40:	4621      	mov	r1, r4
 8003f42:	6828      	ldr	r0, [r5, #0]
 8003f44:	f005 f85a 	bl	8008ffc <USB_ReadChInterrupts>
 8003f48:	f010 0f10 	tst.w	r0, #16
 8003f4c:	f43f ad9d 	beq.w	8003a8a <HCD_HC_IN_IRQHandler+0x56>
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003f50:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003f54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003f58:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d028      	beq.n	8003fb2 <HCD_HC_IN_IRQHandler+0x57e>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	bf18      	it	ne
 8003f64:	2b00      	cmpne	r3, #0
 8003f66:	d117      	bne.n	8003f98 <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f68:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003f6c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	@ 0x44
      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003f74:	79ab      	ldrb	r3, [r5, #6]
 8003f76:	b12b      	cbz	r3, 8003f84 <HCD_HC_IN_IRQHandler+0x550>
 8003f78:	233c      	movs	r3, #60	@ 0x3c
 8003f7a:	fb03 5304 	mla	r3, r3, r4, r5
 8003f7e:	7edb      	ldrb	r3, [r3, #27]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d109      	bne.n	8003f98 <HCD_HC_IN_IRQHandler+0x564>
        hhcd->hc[chnum].state = HC_NAK;
 8003f84:	233c      	movs	r3, #60	@ 0x3c
 8003f86:	fb03 5304 	mla	r3, r3, r4, r5
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f90:	4621      	mov	r1, r4
 8003f92:	6828      	ldr	r0, [r5, #0]
 8003f94:	f005 fa52 	bl	800943c <USB_HC_Halt>
    if (hhcd->hc[chnum].do_csplit == 1U)
 8003f98:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003f9c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003fa0:	7edb      	ldrb	r3, [r3, #27]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d012      	beq.n	8003fcc <HCD_HC_IN_IRQHandler+0x598>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fa6:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003faa:	2210      	movs	r2, #16
 8003fac:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 8003fb0:	e56b      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x56>
      hhcd->hc[chnum].ErrCnt = 0U;
 8003fb2:	233c      	movs	r3, #60	@ 0x3c
 8003fb4:	fb03 5304 	mla	r3, r3, r4, r5
 8003fb8:	2200      	movs	r2, #0
 8003fba:	645a      	str	r2, [r3, #68]	@ 0x44
      hhcd->hc[chnum].state = HC_NAK;
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	6828      	ldr	r0, [r5, #0]
 8003fc6:	f005 fa39 	bl	800943c <USB_HC_Halt>
 8003fca:	e7e5      	b.n	8003f98 <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[chnum].do_csplit = 0U;
 8003fcc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003fd0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	76eb      	strb	r3, [r5, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fd8:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8003fdc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 8003fe0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fe4:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003fe8:	f8d3 250c 	ldr.w	r2, [r3, #1292]	@ 0x50c
 8003fec:	f042 0220 	orr.w	r2, r2, #32
 8003ff0:	f8c3 250c 	str.w	r2, [r3, #1292]	@ 0x50c
 8003ff4:	e7d7      	b.n	8003fa6 <HCD_HC_IN_IRQHandler+0x572>
 8003ff6:	bf00      	nop

08003ff8 <HCD_HC_OUT_IRQHandler>:
{
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	460c      	mov	r4, r1
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ffe:	6806      	ldr	r6, [r0, #0]
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004000:	4630      	mov	r0, r6
 8004002:	f004 fffb 	bl	8008ffc <USB_ReadChInterrupts>
 8004006:	f010 0f04 	tst.w	r0, #4
 800400a:	d010      	beq.n	800402e <HCD_HC_OUT_IRQHandler+0x36>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800400c:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8004010:	2304      	movs	r3, #4
 8004012:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_XACTERR;
 8004016:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800401a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800401e:	2207      	movs	r2, #7
 8004020:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004024:	4621      	mov	r1, r4
 8004026:	6828      	ldr	r0, [r5, #0]
 8004028:	f005 fa08 	bl	800943c <USB_HC_Halt>
}
 800402c:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800402e:	4621      	mov	r1, r4
 8004030:	6828      	ldr	r0, [r5, #0]
 8004032:	f004 ffe3 	bl	8008ffc <USB_ReadChInterrupts>
 8004036:	f010 0f20 	tst.w	r0, #32
 800403a:	d04a      	beq.n	80040d2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800403c:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8004040:	2320      	movs	r3, #32
 8004042:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
    if (hhcd->hc[chnum].do_ping == 1U)
 8004046:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800404a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800404e:	7e5b      	ldrb	r3, [r3, #25]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d02d      	beq.n	80040b0 <HCD_HC_OUT_IRQHandler+0xb8>
    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004054:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004058:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800405c:	7e9b      	ldrb	r3, [r3, #26]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d1e4      	bne.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
 8004062:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004066:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800406a:	7edb      	ldrb	r3, [r3, #27]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1dd      	bne.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004070:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004074:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004078:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800407c:	2b01      	cmp	r3, #1
 800407e:	d005      	beq.n	800408c <HCD_HC_OUT_IRQHandler+0x94>
        hhcd->hc[chnum].do_csplit = 1U;
 8004080:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004084:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004088:	2201      	movs	r2, #1
 800408a:	76da      	strb	r2, [r3, #27]
      hhcd->hc[chnum].state = HC_ACK;
 800408c:	0126      	lsls	r6, r4, #4
 800408e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004092:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004096:	2203      	movs	r2, #3
 8004098:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800409c:	4621      	mov	r1, r4
 800409e:	6828      	ldr	r0, [r5, #0]
 80040a0:	f005 f9cc 	bl	800943c <USB_HC_Halt>
      hhcd->hc[chnum].ErrCnt = 0U;
 80040a4:	1b36      	subs	r6, r6, r4
 80040a6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80040aa:	2300      	movs	r3, #0
 80040ac:	6473      	str	r3, [r6, #68]	@ 0x44
 80040ae:	e7bd      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
      hhcd->hc[chnum].do_ping = 0U;
 80040b0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80040b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80040b8:	2200      	movs	r2, #0
 80040ba:	765a      	strb	r2, [r3, #25]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      hhcd->hc[chnum].state = HC_ACK;
 80040c2:	2203      	movs	r2, #3
 80040c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040c8:	4621      	mov	r1, r4
 80040ca:	6828      	ldr	r0, [r5, #0]
 80040cc:	f005 f9b6 	bl	800943c <USB_HC_Halt>
 80040d0:	e7c0      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x5c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80040d2:	4621      	mov	r1, r4
 80040d4:	6828      	ldr	r0, [r5, #0]
 80040d6:	f004 ff91 	bl	8008ffc <USB_ReadChInterrupts>
 80040da:	f410 7f00 	tst.w	r0, #512	@ 0x200
 80040de:	d00a      	beq.n	80040f6 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80040e0:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 80040e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040e8:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ec:	4621      	mov	r1, r4
 80040ee:	6828      	ldr	r0, [r5, #0]
 80040f0:	f005 f9a4 	bl	800943c <USB_HC_Halt>
 80040f4:	e79a      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80040f6:	4621      	mov	r1, r4
 80040f8:	6828      	ldr	r0, [r5, #0]
 80040fa:	f004 ff7f 	bl	8008ffc <USB_ReadChInterrupts>
 80040fe:	f010 0f01 	tst.w	r0, #1
 8004102:	d03b      	beq.n	800417c <HCD_HC_OUT_IRQHandler+0x184>
    hhcd->hc[chnum].ErrCnt = 0U;
 8004104:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004108:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800410c:	2200      	movs	r2, #0
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004110:	4621      	mov	r1, r4
 8004112:	6828      	ldr	r0, [r5, #0]
 8004114:	f004 ff72 	bl	8008ffc <USB_ReadChInterrupts>
 8004118:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800411c:	d00a      	beq.n	8004134 <HCD_HC_OUT_IRQHandler+0x13c>
      hhcd->hc[chnum].do_ping = 1U;
 800411e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004122:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004126:	2201      	movs	r2, #1
 8004128:	765a      	strb	r2, [r3, #25]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800412a:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 800412e:	2240      	movs	r2, #64	@ 0x40
 8004130:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    if (hhcd->hc[chnum].do_csplit != 0U)
 8004134:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004138:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800413c:	7edb      	ldrb	r3, [r3, #27]
 800413e:	b16b      	cbz	r3, 800415c <HCD_HC_OUT_IRQHandler+0x164>
      hhcd->hc[chnum].do_csplit = 0U;
 8004140:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004144:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004148:	2200      	movs	r2, #0
 800414a:	76da      	strb	r2, [r3, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800414c:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8004150:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 8004154:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004158:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800415c:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8004160:	2201      	movs	r2, #1
 8004162:	f8c6 2508 	str.w	r2, [r6, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_XFRC;
 8004166:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800416a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800416e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004172:	4621      	mov	r1, r4
 8004174:	6828      	ldr	r0, [r5, #0]
 8004176:	f005 f961 	bl	800943c <USB_HC_Halt>
 800417a:	e757      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800417c:	4621      	mov	r1, r4
 800417e:	6828      	ldr	r0, [r5, #0]
 8004180:	f004 ff3c 	bl	8008ffc <USB_ReadChInterrupts>
 8004184:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8004188:	d01e      	beq.n	80041c8 <HCD_HC_OUT_IRQHandler+0x1d0>
    hhcd->hc[chnum].state = HC_NYET;
 800418a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800418e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004192:	2205      	movs	r2, #5
 8004194:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004198:	7e9b      	ldrb	r3, [r3, #26]
 800419a:	b92b      	cbnz	r3, 80041a8 <HCD_HC_OUT_IRQHandler+0x1b0>
      hhcd->hc[chnum].do_ping = 1U;
 800419c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80041a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80041a4:	2201      	movs	r2, #1
 80041a6:	765a      	strb	r2, [r3, #25]
    hhcd->hc[chnum].ErrCnt = 0U;
 80041a8:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80041ac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80041b0:	2200      	movs	r2, #0
 80041b2:	645a      	str	r2, [r3, #68]	@ 0x44
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041b4:	4621      	mov	r1, r4
 80041b6:	6828      	ldr	r0, [r5, #0]
 80041b8:	f005 f940 	bl	800943c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80041bc:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 80041c0:	2340      	movs	r3, #64	@ 0x40
 80041c2:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
 80041c6:	e731      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80041c8:	4621      	mov	r1, r4
 80041ca:	6828      	ldr	r0, [r5, #0]
 80041cc:	f004 ff16 	bl	8008ffc <USB_ReadChInterrupts>
 80041d0:	f010 0f08 	tst.w	r0, #8
 80041d4:	d010      	beq.n	80041f8 <HCD_HC_OUT_IRQHandler+0x200>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80041d6:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 80041da:	2208      	movs	r2, #8
 80041dc:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_STALL;
 80041e0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80041e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80041e8:	2206      	movs	r2, #6
 80041ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ee:	4621      	mov	r1, r4
 80041f0:	6828      	ldr	r0, [r5, #0]
 80041f2:	f005 f923 	bl	800943c <USB_HC_Halt>
 80041f6:	e719      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80041f8:	4621      	mov	r1, r4
 80041fa:	6828      	ldr	r0, [r5, #0]
 80041fc:	f004 fefe 	bl	8008ffc <USB_ReadChInterrupts>
 8004200:	f010 0f10 	tst.w	r0, #16
 8004204:	d020      	beq.n	8004248 <HCD_HC_OUT_IRQHandler+0x250>
    hhcd->hc[chnum].ErrCnt = 0U;
 8004206:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800420a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44
    hhcd->hc[chnum].state = HC_NAK;
 8004212:	2204      	movs	r2, #4
 8004214:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ping == 0U)
 8004218:	7e5b      	ldrb	r3, [r3, #25]
 800421a:	b95b      	cbnz	r3, 8004234 <HCD_HC_OUT_IRQHandler+0x23c>
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800421c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004220:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004224:	7e1b      	ldrb	r3, [r3, #24]
 8004226:	b92b      	cbnz	r3, 8004234 <HCD_HC_OUT_IRQHandler+0x23c>
        hhcd->hc[chnum].do_ping = 1U;
 8004228:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800422c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004230:	2201      	movs	r2, #1
 8004232:	765a      	strb	r2, [r3, #25]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004234:	4621      	mov	r1, r4
 8004236:	6828      	ldr	r0, [r5, #0]
 8004238:	f005 f900 	bl	800943c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800423c:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8004240:	2210      	movs	r2, #16
 8004242:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
 8004246:	e6f1      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004248:	4621      	mov	r1, r4
 800424a:	6828      	ldr	r0, [r5, #0]
 800424c:	f004 fed6 	bl	8008ffc <USB_ReadChInterrupts>
 8004250:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004254:	d038      	beq.n	80042c8 <HCD_HC_OUT_IRQHandler+0x2d0>
    if (hhcd->Init.dma_enable == 0U)
 8004256:	79ab      	ldrb	r3, [r5, #6]
 8004258:	b1f3      	cbz	r3, 8004298 <HCD_HC_OUT_IRQHandler+0x2a0>
      hhcd->hc[chnum].ErrCnt++;
 800425a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 800425e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8004262:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8004264:	3301      	adds	r3, #1
 8004266:	6453      	str	r3, [r2, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004268:	2b02      	cmp	r3, #2
 800426a:	d820      	bhi.n	80042ae <HCD_HC_OUT_IRQHandler+0x2b6>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800426c:	233c      	movs	r3, #60	@ 0x3c
 800426e:	fb03 5304 	mla	r3, r3, r4, r5
 8004272:	2202      	movs	r2, #2
 8004274:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004278:	eb06 1244 	add.w	r2, r6, r4, lsl #5
 800427c:	f8d2 3500 	ldr.w	r3, [r2, #1280]	@ 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004280:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004284:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004288:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800428c:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8004290:	2280      	movs	r2, #128	@ 0x80
 8004292:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
 8004296:	e6c9      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
      hhcd->hc[chnum].state = HC_XACTERR;
 8004298:	233c      	movs	r3, #60	@ 0x3c
 800429a:	fb03 5304 	mla	r3, r3, r4, r5
 800429e:	2207      	movs	r2, #7
 80042a0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a4:	4621      	mov	r1, r4
 80042a6:	6828      	ldr	r0, [r5, #0]
 80042a8:	f005 f8c8 	bl	800943c <USB_HC_Halt>
 80042ac:	e7ee      	b.n	800428c <HCD_HC_OUT_IRQHandler+0x294>
        hhcd->hc[chnum].ErrCnt = 0U;
 80042ae:	233c      	movs	r3, #60	@ 0x3c
 80042b0:	fb03 5304 	mla	r3, r3, r4, r5
 80042b4:	2200      	movs	r2, #0
 80042b6:	645a      	str	r2, [r3, #68]	@ 0x44
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042b8:	2204      	movs	r2, #4
 80042ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042be:	4621      	mov	r1, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	f008 f9b3 	bl	800c62c <HAL_HCD_HC_NotifyURBChange_Callback>
 80042c6:	e7e1      	b.n	800428c <HCD_HC_OUT_IRQHandler+0x294>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80042c8:	4621      	mov	r1, r4
 80042ca:	6828      	ldr	r0, [r5, #0]
 80042cc:	f004 fe96 	bl	8008ffc <USB_ReadChInterrupts>
 80042d0:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 80042d4:	d010      	beq.n	80042f8 <HCD_HC_OUT_IRQHandler+0x300>
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80042d6:	233c      	movs	r3, #60	@ 0x3c
 80042d8:	fb03 5304 	mla	r3, r3, r4, r5
 80042dc:	2209      	movs	r2, #9
 80042de:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042e2:	4621      	mov	r1, r4
 80042e4:	6828      	ldr	r0, [r5, #0]
 80042e6:	f005 f8a9 	bl	800943c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80042ea:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 80042ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042f2:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
 80042f6:	e699      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80042f8:	4621      	mov	r1, r4
 80042fa:	6828      	ldr	r0, [r5, #0]
 80042fc:	f004 fe7e 	bl	8008ffc <USB_ReadChInterrupts>
 8004300:	f010 0f02 	tst.w	r0, #2
 8004304:	f43f ae92 	beq.w	800402c <HCD_HC_OUT_IRQHandler+0x34>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004308:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800430c:	f506 62a0 	add.w	r2, r6, #1280	@ 0x500
 8004310:	2302      	movs	r3, #2
 8004312:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8004314:	233c      	movs	r3, #60	@ 0x3c
 8004316:	fb03 5304 	mla	r3, r3, r4, r5
 800431a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800431e:	3b01      	subs	r3, #1
 8004320:	2b08      	cmp	r3, #8
 8004322:	f63f ae83 	bhi.w	800402c <HCD_HC_OUT_IRQHandler+0x34>
 8004326:	a101      	add	r1, pc, #4	@ (adr r1, 800432c <HCD_HC_OUT_IRQHandler+0x334>)
 8004328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800432c:	08004351 	.word	0x08004351
 8004330:	0800402d 	.word	0x0800402d
 8004334:	080043bf 	.word	0x080043bf
 8004338:	080043dd 	.word	0x080043dd
 800433c:	08004407 	.word	0x08004407
 8004340:	0800442b 	.word	0x0800442b
 8004344:	0800443f 	.word	0x0800443f
 8004348:	0800402d 	.word	0x0800402d
 800434c:	0800443f 	.word	0x0800443f
      hhcd->hc[chnum].state = HC_HALTED;
 8004350:	233c      	movs	r3, #60	@ 0x3c
 8004352:	fb03 5304 	mla	r3, r3, r4, r5
 8004356:	2202      	movs	r2, #2
 8004358:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_DONE;
 800435c:	2201      	movs	r2, #1
 800435e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004362:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8004366:	3b02      	subs	r3, #2
 8004368:	b2db      	uxtb	r3, r3
 800436a:	4293      	cmp	r3, r2
 800436c:	d853      	bhi.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
        if (hhcd->Init.dma_enable == 0U)
 800436e:	79a9      	ldrb	r1, [r5, #6]
 8004370:	b941      	cbnz	r1, 8004384 <HCD_HC_OUT_IRQHandler+0x38c>
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004372:	233c      	movs	r3, #60	@ 0x3c
 8004374:	fb03 5304 	mla	r3, r3, r4, r5
 8004378:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 800437c:	f082 0201 	eor.w	r2, r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004384:	2901      	cmp	r1, #1
 8004386:	d146      	bne.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
 8004388:	233c      	movs	r3, #60	@ 0x3c
 800438a:	fb03 5304 	mla	r3, r3, r4, r5
 800438e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004390:	2b00      	cmp	r3, #0
 8004392:	d040      	beq.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004394:	223c      	movs	r2, #60	@ 0x3c
 8004396:	fb02 5204 	mla	r2, r2, r4, r5
 800439a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800439c:	4413      	add	r3, r2
 800439e:	3b01      	subs	r3, #1
 80043a0:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 80043a4:	f013 0f01 	tst.w	r3, #1
 80043a8:	d035      	beq.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
            hhcd->hc[chnum].toggle_out ^= 1U;
 80043aa:	233c      	movs	r3, #60	@ 0x3c
 80043ac:	fb03 5304 	mla	r3, r3, r4, r5
 80043b0:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80043b4:	f082 0201 	eor.w	r2, r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043bc:	e02b      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
      hhcd->hc[chnum].state = HC_HALTED;
 80043be:	233c      	movs	r3, #60	@ 0x3c
 80043c0:	fb03 5304 	mla	r3, r3, r4, r5
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 80043ca:	7edb      	ldrb	r3, [r3, #27]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d122      	bne.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043d0:	233c      	movs	r3, #60	@ 0x3c
 80043d2:	fb03 5304 	mla	r3, r3, r4, r5
 80043d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80043da:	e01c      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
      hhcd->hc[chnum].state = HC_HALTED;
 80043dc:	233c      	movs	r3, #60	@ 0x3c
 80043de:	fb03 5304 	mla	r3, r3, r4, r5
 80043e2:	2102      	movs	r1, #2
 80043e4:	f883 104d 	strb.w	r1, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043e8:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
      if (hhcd->hc[chnum].do_csplit == 1U)
 80043ec:	7edb      	ldrb	r3, [r3, #27]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d111      	bne.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
        hhcd->hc[chnum].do_csplit = 0U;
 80043f2:	233c      	movs	r3, #60	@ 0x3c
 80043f4:	fb03 5304 	mla	r3, r3, r4, r5
 80043f8:	2100      	movs	r1, #0
 80043fa:	76d9      	strb	r1, [r3, #27]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043fc:	6853      	ldr	r3, [r2, #4]
 80043fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004402:	6053      	str	r3, [r2, #4]
 8004404:	e007      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
      hhcd->hc[chnum].state = HC_HALTED;
 8004406:	233c      	movs	r3, #60	@ 0x3c
 8004408:	fb03 5304 	mla	r3, r3, r4, r5
 800440c:	2202      	movs	r2, #2
 800440e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004412:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004416:	233c      	movs	r3, #60	@ 0x3c
 8004418:	fb03 5304 	mla	r3, r3, r4, r5
 800441c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8004420:	4621      	mov	r1, r4
 8004422:	4628      	mov	r0, r5
 8004424:	f008 f902 	bl	800c62c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004428:	e600      	b.n	800402c <HCD_HC_OUT_IRQHandler+0x34>
      hhcd->hc[chnum].state = HC_HALTED;
 800442a:	233c      	movs	r3, #60	@ 0x3c
 800442c:	fb03 5304 	mla	r3, r3, r4, r5
 8004430:	2202      	movs	r2, #2
 8004432:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004436:	2205      	movs	r2, #5
 8004438:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800443c:	e7eb      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
      hhcd->hc[chnum].state = HC_HALTED;
 800443e:	233c      	movs	r3, #60	@ 0x3c
 8004440:	fb03 5304 	mla	r3, r3, r4, r5
 8004444:	2202      	movs	r2, #2
 8004446:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 800444a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800444c:	3201      	adds	r2, #1
 800444e:	645a      	str	r2, [r3, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004450:	2a02      	cmp	r2, #2
 8004452:	d908      	bls.n	8004466 <HCD_HC_OUT_IRQHandler+0x46e>
        hhcd->hc[chnum].ErrCnt = 0U;
 8004454:	233c      	movs	r3, #60	@ 0x3c
 8004456:	fb03 5304 	mla	r3, r3, r4, r5
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800445e:	2204      	movs	r2, #4
 8004460:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8004464:	e7d7      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004466:	233c      	movs	r3, #60	@ 0x3c
 8004468:	fb03 5304 	mla	r3, r3, r4, r5
 800446c:	2202      	movs	r2, #2
 800446e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004472:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004476:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800447a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800447e:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 8004482:	e7c8      	b.n	8004416 <HCD_HC_OUT_IRQHandler+0x41e>

08004484 <HAL_HCD_IRQHandler>:
{
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004488:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800448a:	4628      	mov	r0, r5
 800448c:	f004 fdea 	bl	8009064 <USB_GetMode>
 8004490:	2801      	cmp	r0, #1
 8004492:	d000      	beq.n	8004496 <HAL_HCD_IRQHandler+0x12>
}
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	f004 fdac 	bl	8008ff4 <USB_ReadInterrupts>
 800449c:	2800      	cmp	r0, #0
 800449e:	d0f9      	beq.n	8004494 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044a0:	6820      	ldr	r0, [r4, #0]
 80044a2:	f004 fda7 	bl	8008ff4 <USB_ReadInterrupts>
 80044a6:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 80044aa:	d003      	beq.n	80044b4 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80044b2:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	f004 fd9d 	bl	8008ff4 <USB_ReadInterrupts>
 80044ba:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 80044be:	d003      	beq.n	80044c8 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80044c6:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	f004 fd93 	bl	8008ff4 <USB_ReadInterrupts>
 80044ce:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 80044d2:	d003      	beq.n	80044dc <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80044da:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	f004 fd89 	bl	8008ff4 <USB_ReadInterrupts>
 80044e2:	f010 0f02 	tst.w	r0, #2
 80044e6:	d002      	beq.n	80044ee <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	2202      	movs	r2, #2
 80044ec:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80044ee:	6820      	ldr	r0, [r4, #0]
 80044f0:	f004 fd80 	bl	8008ff4 <USB_ReadInterrupts>
 80044f4:	f010 5f00 	tst.w	r0, #536870912	@ 0x20000000
 80044f8:	d008      	beq.n	800450c <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004500:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004502:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 8004506:	f013 0f01 	tst.w	r3, #1
 800450a:	d025      	beq.n	8004558 <HAL_HCD_IRQHandler+0xd4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800450c:	6820      	ldr	r0, [r4, #0]
 800450e:	f004 fd71 	bl	8008ff4 <USB_ReadInterrupts>
 8004512:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8004516:	d132      	bne.n	800457e <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004518:	6820      	ldr	r0, [r4, #0]
 800451a:	f004 fd6b 	bl	8008ff4 <USB_ReadInterrupts>
 800451e:	f010 0f08 	tst.w	r0, #8
 8004522:	d130      	bne.n	8004586 <HAL_HCD_IRQHandler+0x102>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004524:	6820      	ldr	r0, [r4, #0]
 8004526:	f004 fd65 	bl	8008ff4 <USB_ReadInterrupts>
 800452a:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800452e:	d131      	bne.n	8004594 <HAL_HCD_IRQHandler+0x110>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004530:	6820      	ldr	r0, [r4, #0]
 8004532:	f004 fd5f 	bl	8008ff4 <USB_ReadInterrupts>
 8004536:	f010 0f10 	tst.w	r0, #16
 800453a:	d0ab      	beq.n	8004494 <HAL_HCD_IRQHandler+0x10>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	6993      	ldr	r3, [r2, #24]
 8004540:	f023 0310 	bic.w	r3, r3, #16
 8004544:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8004546:	4620      	mov	r0, r4
 8004548:	f7ff f88c 	bl	8003664 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	6993      	ldr	r3, [r2, #24]
 8004550:	f043 0310 	orr.w	r3, r3, #16
 8004554:	6193      	str	r3, [r2, #24]
 8004556:	e79d      	b.n	8004494 <HAL_HCD_IRQHandler+0x10>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004558:	2110      	movs	r1, #16
 800455a:	4628      	mov	r0, r5
 800455c:	f004 f924 	bl	80087a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004560:	4628      	mov	r0, r5
 8004562:	f004 f946 	bl	80087f2 <USB_FlushRxFifo>
        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004566:	7a63      	ldrb	r3, [r4, #9]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d003      	beq.n	8004574 <HAL_HCD_IRQHandler+0xf0>
        HAL_HCD_Disconnect_Callback(hhcd);
 800456c:	4620      	mov	r0, r4
 800456e:	f008 f857 	bl	800c620 <HAL_HCD_Disconnect_Callback>
 8004572:	e7cb      	b.n	800450c <HAL_HCD_IRQHandler+0x88>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004574:	2101      	movs	r1, #1
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	f004 fe54 	bl	8009224 <USB_InitFSLSPClkSel>
 800457c:	e7f6      	b.n	800456c <HAL_HCD_IRQHandler+0xe8>
      HCD_Port_IRQHandler(hhcd);
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff f9ff 	bl	8003982 <HCD_Port_IRQHandler>
 8004584:	e7c8      	b.n	8004518 <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 8004586:	4620      	mov	r0, r4
 8004588:	f008 f83e 	bl	800c608 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	2208      	movs	r2, #8
 8004590:	615a      	str	r2, [r3, #20]
 8004592:	e7c7      	b.n	8004524 <HAL_HCD_IRQHandler+0xa0>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	f004 ff4c 	bl	8009432 <USB_HC_ReadInterrupt>
 800459a:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800459c:	2600      	movs	r6, #0
 800459e:	e004      	b.n	80045aa <HAL_HCD_IRQHandler+0x126>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80045a0:	b2f1      	uxtb	r1, r6
 80045a2:	4620      	mov	r0, r4
 80045a4:	f7ff fd28 	bl	8003ff8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80045a8:	3601      	adds	r6, #1
 80045aa:	7963      	ldrb	r3, [r4, #5]
 80045ac:	42b3      	cmp	r3, r6
 80045ae:	d912      	bls.n	80045d6 <HAL_HCD_IRQHandler+0x152>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80045b0:	f006 030f 	and.w	r3, r6, #15
 80045b4:	fa27 f303 	lsr.w	r3, r7, r3
 80045b8:	f013 0f01 	tst.w	r3, #1
 80045bc:	d0f4      	beq.n	80045a8 <HAL_HCD_IRQHandler+0x124>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80045be:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 80045c2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80045c6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80045ca:	d0e9      	beq.n	80045a0 <HAL_HCD_IRQHandler+0x11c>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80045cc:	b2f1      	uxtb	r1, r6
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff fa30 	bl	8003a34 <HCD_HC_IN_IRQHandler>
 80045d4:	e7e8      	b.n	80045a8 <HAL_HCD_IRQHandler+0x124>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045dc:	615a      	str	r2, [r3, #20]
 80045de:	e7a7      	b.n	8004530 <HAL_HCD_IRQHandler+0xac>

080045e0 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 80045e0:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d00e      	beq.n	8004606 <HAL_HCD_Start+0x26>
{
 80045e8:	b510      	push	{r4, lr}
 80045ea:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80045ec:	2101      	movs	r1, #1
 80045ee:	f880 13d4 	strb.w	r1, [r0, #980]	@ 0x3d4
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80045f2:	6800      	ldr	r0, [r0, #0]
 80045f4:	f004 fe56 	bl	80092a4 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	f004 f8c9 	bl	8008790 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80045fe:	2000      	movs	r0, #0
 8004600:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4
}
 8004604:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8004606:	2002      	movs	r0, #2
}
 8004608:	4770      	bx	lr

0800460a <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 800460a:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
 800460e:	2b01      	cmp	r3, #1
 8004610:	d00b      	beq.n	800462a <HAL_HCD_Stop+0x20>
{
 8004612:	b510      	push	{r4, lr}
 8004614:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8004616:	2301      	movs	r3, #1
 8004618:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800461c:	6800      	ldr	r0, [r0, #0]
 800461e:	f005 f8f1 	bl	8009804 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004622:	2000      	movs	r0, #0
 8004624:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4
}
 8004628:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800462a:	2002      	movs	r0, #2
}
 800462c:	4770      	bx	lr

0800462e <HAL_HCD_ResetPort>:
{
 800462e:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8004630:	6800      	ldr	r0, [r0, #0]
 8004632:	f004 fe18 	bl	8009266 <USB_ResetPort>
}
 8004636:	bd08      	pop	{r3, pc}

08004638 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8004638:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800463c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8004640:	f890 004c 	ldrb.w	r0, [r0, #76]	@ 0x4c
 8004644:	4770      	bx	lr

08004646 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8004646:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800464a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 800464e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8004650:	4770      	bx	lr

08004652 <HAL_HCD_GetCurrentFrame>:
{
 8004652:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004654:	6800      	ldr	r0, [r0, #0]
 8004656:	f004 fe53 	bl	8009300 <USB_GetCurrentFrame>
}
 800465a:	bd08      	pop	{r3, pc}

0800465c <HAL_HCD_GetCurrentSpeed>:
{
 800465c:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 800465e:	6800      	ldr	r0, [r0, #0]
 8004660:	f004 fe43 	bl	80092ea <USB_GetHostSpeed>
}
 8004664:	bd08      	pop	{r3, pc}

08004666 <HAL_HCD_HC_ClearHubInfo>:
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004666:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 800466a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800466e:	2000      	movs	r0, #0
 8004670:	7690      	strb	r0, [r2, #26]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004672:	76d0      	strb	r0, [r2, #27]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004674:	f882 0025 	strb.w	r0, [r2, #37]	@ 0x25
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004678:	f882 0024 	strb.w	r0, [r2, #36]	@ 0x24
}
 800467c:	4770      	bx	lr

0800467e <HAL_HCD_HC_Init>:
{
 800467e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004682:	b085      	sub	sp, #20
 8004684:	461f      	mov	r7, r3
 8004686:	f89d a038 	ldrb.w	sl, [sp, #56]	@ 0x38
 800468a:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 800468e:	f8bd b040 	ldrh.w	fp, [sp, #64]	@ 0x40
  __HAL_LOCK(hhcd);
 8004692:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
 8004696:	2b01      	cmp	r3, #1
 8004698:	d054      	beq.n	8004744 <HAL_HCD_HC_Init+0xc6>
 800469a:	4605      	mov	r5, r0
 800469c:	460c      	mov	r4, r1
 800469e:	4616      	mov	r6, r2
 80046a0:	46d8      	mov	r8, fp
 80046a2:	2301      	movs	r3, #1
 80046a4:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80046a8:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80046ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80046b0:	2200      	movs	r2, #0
 80046b2:	765a      	strb	r2, [r3, #25]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80046b4:	751f      	strb	r7, [r3, #20]
  hhcd->hc[ch_num].ch_num = ch_num;
 80046b6:	7559      	strb	r1, [r3, #21]
  hhcd->hc[ch_num].ep_type = ep_type;
 80046b8:	f883 9026 	strb.w	r9, [r3, #38]	@ 0x26
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80046bc:	f006 027f 	and.w	r2, r6, #127	@ 0x7f
 80046c0:	759a      	strb	r2, [r3, #22]
  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80046c2:	f7ff ffd0 	bl	8004666 <HAL_HCD_HC_ClearHubInfo>
  if ((epnum & 0x80U) == 0x80U)
 80046c6:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80046ca:	d129      	bne.n	8004720 <HAL_HCD_HC_Init+0xa2>
    hhcd->hc[ch_num].ep_is_in = 0U;
 80046cc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80046d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80046d4:	2200      	movs	r2, #0
 80046d6:	75da      	strb	r2, [r3, #23]
  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80046d8:	6828      	ldr	r0, [r5, #0]
 80046da:	f004 fe06 	bl	80092ea <USB_GetHostSpeed>
  if (ep_type == EP_TYPE_ISOC)
 80046de:	f1b9 0f01 	cmp.w	r9, #1
 80046e2:	d024      	beq.n	800472e <HAL_HCD_HC_Init+0xb0>
  hhcd->hc[ch_num].speed = speed;
 80046e4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80046e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80046ec:	f883 a018 	strb.w	sl, [r3, #24]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80046f0:	fa1f f388 	uxth.w	r3, r8
 80046f4:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 80046f8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80046fc:	8513      	strh	r3, [r2, #40]	@ 0x28
  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80046fe:	9302      	str	r3, [sp, #8]
 8004700:	f8cd 9004 	str.w	r9, [sp, #4]
 8004704:	f8cd a000 	str.w	sl, [sp]
 8004708:	463b      	mov	r3, r7
 800470a:	4632      	mov	r2, r6
 800470c:	4621      	mov	r1, r4
 800470e:	6828      	ldr	r0, [r5, #0]
 8004710:	f004 fdfb 	bl	800930a <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8004714:	2300      	movs	r3, #0
 8004716:	f885 33d4 	strb.w	r3, [r5, #980]	@ 0x3d4
}
 800471a:	b005      	add	sp, #20
 800471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004720:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8004724:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004728:	2201      	movs	r2, #1
 800472a:	75da      	strb	r2, [r3, #23]
 800472c:	e7d4      	b.n	80046d8 <HAL_HCD_HC_Init+0x5a>
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800472e:	f1ba 0f01 	cmp.w	sl, #1
 8004732:	bf08      	it	eq
 8004734:	2800      	cmpeq	r0, #0
 8004736:	d1d5      	bne.n	80046e4 <HAL_HCD_HC_Init+0x66>
      if (HCcharMps > ISO_SPLT_MPS)
 8004738:	f1bb 0fbc 	cmp.w	fp, #188	@ 0xbc
 800473c:	d9d2      	bls.n	80046e4 <HAL_HCD_HC_Init+0x66>
        HCcharMps = ISO_SPLT_MPS;
 800473e:	f04f 08bc 	mov.w	r8, #188	@ 0xbc
 8004742:	e7cf      	b.n	80046e4 <HAL_HCD_HC_Init+0x66>
  __HAL_LOCK(hhcd);
 8004744:	2002      	movs	r0, #2
 8004746:	e7e8      	b.n	800471a <HAL_HCD_HC_Init+0x9c>

08004748 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800474c:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800474e:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8004752:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004756:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800475a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	429a      	cmp	r2, r3
 8004760:	d854      	bhi.n	800480c <PCD_WriteEmptyTxFifo+0xc4>
 8004762:	4607      	mov	r7, r0
 8004764:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8004766:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8004768:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800476c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004770:	69d2      	ldr	r2, [r2, #28]
 8004772:	429a      	cmp	r2, r3
 8004774:	d300      	bcc.n	8004778 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8004776:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8004778:	f102 0903 	add.w	r9, r2, #3
 800477c:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004780:	e015      	b.n	80047ae <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8004782:	f106 0903 	add.w	r9, r6, #3
 8004786:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 800478a:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800478c:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8004790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004794:	6a29      	ldr	r1, [r5, #32]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	b2b3      	uxth	r3, r6
 800479a:	b2e2      	uxtb	r2, r4
 800479c:	4640      	mov	r0, r8
 800479e:	f004 fa46 	bl	8008c2e <USB_WritePacket>

    ep->xfer_buff  += len;
 80047a2:	6a2b      	ldr	r3, [r5, #32]
 80047a4:	4433      	add	r3, r6
 80047a6:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 80047a8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80047aa:	4433      	add	r3, r6
 80047ac:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047ae:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 80047b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047ba:	454b      	cmp	r3, r9
 80047bc:	d312      	bcc.n	80047e4 <PCD_WriteEmptyTxFifo+0x9c>
 80047be:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80047c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80047c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d20a      	bcs.n	80047e4 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047ce:	b14b      	cbz	r3, 80047e4 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 80047d0:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 80047d2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80047d6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80047da:	69d6      	ldr	r6, [r2, #28]
 80047dc:	429e      	cmp	r6, r3
 80047de:	d3d0      	bcc.n	8004782 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 80047e0:	461e      	mov	r6, r3
 80047e2:	e7ce      	b.n	8004782 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047e4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80047e8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80047ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d80f      	bhi.n	8004814 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047f4:	f004 040f 	and.w	r4, r4, #15
 80047f8:	2201      	movs	r2, #1
 80047fa:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047fc:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8004800:	ea23 0302 	bic.w	r3, r3, r2
 8004804:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8004808:	2000      	movs	r0, #0
 800480a:	e000      	b.n	800480e <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 800480c:	2001      	movs	r0, #1
}
 800480e:	b003      	add	sp, #12
 8004810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8004814:	2000      	movs	r0, #0
 8004816:	e7fa      	b.n	800480e <PCD_WriteEmptyTxFifo+0xc6>

08004818 <HAL_PCD_Init>:
{
 8004818:	b530      	push	{r4, r5, lr}
 800481a:	b083      	sub	sp, #12
  if (hpcd == NULL)
 800481c:	2800      	cmp	r0, #0
 800481e:	d07a      	beq.n	8004916 <HAL_PCD_Init+0xfe>
 8004820:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004822:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 8004826:	b1ab      	cbz	r3, 8004854 <HAL_PCD_Init+0x3c>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004828:	2303      	movs	r3, #3
 800482a:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  __HAL_PCD_DISABLE(hpcd);
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	f003 ffb4 	bl	800879c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004834:	7c23      	ldrb	r3, [r4, #16]
 8004836:	f88d 3000 	strb.w	r3, [sp]
 800483a:	1d23      	adds	r3, r4, #4
 800483c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	f003 fee2 	bl	8008608 <USB_CoreInit>
 8004844:	b158      	cbz	r0, 800485e <HAL_PCD_Init+0x46>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004846:	2302      	movs	r3, #2
 8004848:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800484c:	2501      	movs	r5, #1
}
 800484e:	4628      	mov	r0, r5
 8004850:	b003      	add	sp, #12
 8004852:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004854:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8004858:	f007 fcd2 	bl	800c200 <HAL_PCD_MspInit>
 800485c:	e7e4      	b.n	8004828 <HAL_PCD_Init+0x10>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800485e:	2100      	movs	r1, #0
 8004860:	6820      	ldr	r0, [r4, #0]
 8004862:	f004 fc03 	bl	800906c <USB_SetCurrentMode>
 8004866:	4602      	mov	r2, r0
 8004868:	b908      	cbnz	r0, 800486e <HAL_PCD_Init+0x56>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800486a:	4603      	mov	r3, r0
 800486c:	e017      	b.n	800489e <HAL_PCD_Init+0x86>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800486e:	2302      	movs	r3, #2
 8004870:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8004874:	2501      	movs	r5, #1
 8004876:	e7ea      	b.n	800484e <HAL_PCD_Init+0x36>
    hpcd->IN_ep[i].is_in = 1U;
 8004878:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800487c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004880:	2001      	movs	r0, #1
 8004882:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8004884:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004886:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004888:	2000      	movs	r0, #0
 800488a:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 800488c:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800488e:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004890:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004894:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004898:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489a:	3301      	adds	r3, #1
 800489c:	b2db      	uxtb	r3, r3
 800489e:	7920      	ldrb	r0, [r4, #4]
 80048a0:	4298      	cmp	r0, r3
 80048a2:	d8e9      	bhi.n	8004878 <HAL_PCD_Init+0x60>
 80048a4:	e016      	b.n	80048d4 <HAL_PCD_Init+0xbc>
    hpcd->OUT_ep[i].is_in = 0U;
 80048a6:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80048aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80048ae:	2100      	movs	r1, #0
 80048b0:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 80048b4:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048b8:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048bc:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048c0:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048c4:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80048c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80048cc:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d0:	3201      	adds	r2, #1
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	4290      	cmp	r0, r2
 80048d6:	d8e6      	bhi.n	80048a6 <HAL_PCD_Init+0x8e>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048d8:	7c23      	ldrb	r3, [r4, #16]
 80048da:	f88d 3000 	strb.w	r3, [sp]
 80048de:	1d23      	adds	r3, r4, #4
 80048e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	f003 ffb0 	bl	8008848 <USB_DevInit>
 80048e8:	4605      	mov	r5, r0
 80048ea:	b958      	cbnz	r0, 8004904 <HAL_PCD_Init+0xec>
  hpcd->USB_Address = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 80048f6:	7b23      	ldrb	r3, [r4, #12]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d008      	beq.n	800490e <HAL_PCD_Init+0xf6>
  (void)USB_DevDisconnect(hpcd->Instance);
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	f004 fb6b 	bl	8008fd8 <USB_DevDisconnect>
  return HAL_OK;
 8004902:	e7a4      	b.n	800484e <HAL_PCD_Init+0x36>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004904:	2302      	movs	r3, #2
 8004906:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800490a:	2501      	movs	r5, #1
 800490c:	e79f      	b.n	800484e <HAL_PCD_Init+0x36>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800490e:	4620      	mov	r0, r4
 8004910:	f000 fd6c 	bl	80053ec <HAL_PCDEx_ActivateLPM>
 8004914:	e7f2      	b.n	80048fc <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
 8004916:	2501      	movs	r5, #1
 8004918:	e799      	b.n	800484e <HAL_PCD_Init+0x36>

0800491a <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800491a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 800491c:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8004920:	2a01      	cmp	r2, #1
 8004922:	d01a      	beq.n	800495a <HAL_PCD_Start+0x40>
{
 8004924:	b510      	push	{r4, lr}
 8004926:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004928:	2201      	movs	r2, #1
 800492a:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004934:	d002      	beq.n	800493c <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8004936:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004938:	2a01      	cmp	r2, #1
 800493a:	d009      	beq.n	8004950 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	f003 ff27 	bl	8008790 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004942:	6820      	ldr	r0, [r4, #0]
 8004944:	f004 fb3a 	bl	8008fbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004948:	2000      	movs	r0, #0
 800494a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 800494e:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004952:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004956:	639a      	str	r2, [r3, #56]	@ 0x38
 8004958:	e7f0      	b.n	800493c <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 800495a:	2002      	movs	r0, #2
}
 800495c:	4770      	bx	lr
	...

08004960 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	4604      	mov	r4, r0
 8004964:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004966:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004968:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800496a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800496e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004972:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004974:	79a1      	ldrb	r1, [r4, #6]
 8004976:	2901      	cmp	r1, #1
 8004978:	d011      	beq.n	800499e <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800497a:	4938      	ldr	r1, [pc, #224]	@ (8004a5c <PCD_EP_OutXfrComplete_int+0xfc>)
 800497c:	428e      	cmp	r6, r1
 800497e:	d056      	beq.n	8004a2e <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004980:	b93d      	cbnz	r5, 8004992 <PCD_EP_OutXfrComplete_int+0x32>
 8004982:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8004986:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800498a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800498e:	2b00      	cmp	r3, #0
 8004990:	d05e      	beq.n	8004a50 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004992:	b2e9      	uxtb	r1, r5
 8004994:	4620      	mov	r0, r4
 8004996:	f007 fc97 	bl	800c2c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800499a:	2000      	movs	r0, #0
 800499c:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800499e:	f012 0f08 	tst.w	r2, #8
 80049a2:	d009      	beq.n	80049b8 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a4:	492e      	ldr	r1, [pc, #184]	@ (8004a60 <PCD_EP_OutXfrComplete_int+0x100>)
 80049a6:	428e      	cmp	r6, r1
 80049a8:	d9f7      	bls.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
 80049aa:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80049ae:	d0f4      	beq.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80049b4:	609a      	str	r2, [r3, #8]
 80049b6:	e7f0      	b.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049b8:	f012 0f20 	tst.w	r2, #32
 80049bc:	d002      	beq.n	80049c4 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049be:	2220      	movs	r2, #32
 80049c0:	609a      	str	r2, [r3, #8]
 80049c2:	e7ea      	b.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049c4:	f012 0f28 	tst.w	r2, #40	@ 0x28
 80049c8:	d1e7      	bne.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ca:	4925      	ldr	r1, [pc, #148]	@ (8004a60 <PCD_EP_OutXfrComplete_int+0x100>)
 80049cc:	428e      	cmp	r6, r1
 80049ce:	d906      	bls.n	80049de <PCD_EP_OutXfrComplete_int+0x7e>
 80049d0:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80049d4:	d003      	beq.n	80049de <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	e7dd      	b.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049de:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80049e2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80049e6:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f0:	1acb      	subs	r3, r1, r3
 80049f2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 80049f6:	b97d      	cbnz	r5, 8004a18 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 80049f8:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 80049fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004a00:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8004a04:	b16a      	cbz	r2, 8004a22 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8004a06:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8004a0a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004a0e:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8004a12:	4419      	add	r1, r3
 8004a14:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a18:	b2e9      	uxtb	r1, r5
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f007 fc54 	bl	800c2c8 <HAL_PCD_DataOutStageCallback>
 8004a20:	e7bb      	b.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a22:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8004a26:	2101      	movs	r1, #1
 8004a28:	f004 fb60 	bl	80090ec <USB_EP0_OutStart>
 8004a2c:	e7f4      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a2e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004a32:	d003      	beq.n	8004a3c <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004a38:	609a      	str	r2, [r3, #8]
 8004a3a:	e7ae      	b.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a3c:	f012 0f20 	tst.w	r2, #32
 8004a40:	d001      	beq.n	8004a46 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a42:	2220      	movs	r2, #32
 8004a44:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a46:	b2e9      	uxtb	r1, r5
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f007 fc3d 	bl	800c2c8 <HAL_PCD_DataOutStageCallback>
 8004a4e:	e7a4      	b.n	800499a <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a50:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8004a54:	2100      	movs	r1, #0
 8004a56:	f004 fb49 	bl	80090ec <USB_EP0_OutStart>
 8004a5a:	e79a      	b.n	8004992 <PCD_EP_OutXfrComplete_int+0x32>
 8004a5c:	4f54310a 	.word	0x4f54310a
 8004a60:	4f54300a 	.word	0x4f54300a

08004a64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a68:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a6a:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a6c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004a70:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a74:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8004a76:	4295      	cmp	r5, r2
 8004a78:	d907      	bls.n	8004a8a <PCD_EP_OutSetupPacket_int+0x26>
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7e:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8004a82:	d002      	beq.n	8004a8a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004a88:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f007 fc14 	bl	800c2b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a90:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8004a92:	429d      	cmp	r5, r3
 8004a94:	d902      	bls.n	8004a9c <PCD_EP_OutSetupPacket_int+0x38>
 8004a96:	79a3      	ldrb	r3, [r4, #6]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d001      	beq.n	8004aa0 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aa0:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	6820      	ldr	r0, [r4, #0]
 8004aa8:	f004 fb20 	bl	80090ec <USB_EP0_OutStart>
 8004aac:	e7f6      	b.n	8004a9c <PCD_EP_OutSetupPacket_int+0x38>
 8004aae:	bf00      	nop
 8004ab0:	4f54300a 	.word	0x4f54300a

08004ab4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8004ab4:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d00c      	beq.n	8004ad6 <HAL_PCD_SetAddress+0x22>
{
 8004abc:	b510      	push	{r4, lr}
 8004abe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004ac6:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ac8:	6800      	ldr	r0, [r0, #0]
 8004aca:	f004 fa67 	bl	8008f9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8004ad4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004ad6:	2002      	movs	r0, #2
}
 8004ad8:	4770      	bx	lr

08004ada <HAL_PCD_EP_Open>:
{
 8004ada:	b538      	push	{r3, r4, r5, lr}
 8004adc:	4605      	mov	r5, r0
 8004ade:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8004ae0:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004ae4:	d12b      	bne.n	8004b3e <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ae6:	f001 0e0f 	and.w	lr, r1, #15
 8004aea:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8004aee:	00a4      	lsls	r4, r4, #2
 8004af0:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8004af4:	4404      	add	r4, r0
 8004af6:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8004af8:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8004afc:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004b00:	2000      	movs	r0, #0
 8004b02:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b06:	f00c 0c0f 	and.w	ip, ip, #15
 8004b0a:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004b0e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004b12:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8004b14:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8004b16:	784a      	ldrb	r2, [r1, #1]
 8004b18:	b10a      	cbz	r2, 8004b1e <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8004b1a:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d01c      	beq.n	8004b5c <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8004b22:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d01b      	beq.n	8004b62 <HAL_PCD_EP_Open+0x88>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b30:	6828      	ldr	r0, [r5, #0]
 8004b32:	f003 ff61 	bl	80089f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b36:	2000      	movs	r0, #0
 8004b38:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8004b3c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b3e:	f001 000f 	and.w	r0, r1, #15
 8004b42:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8004b46:	0089      	lsls	r1, r1, #2
 8004b48:	3110      	adds	r1, #16
 8004b4a:	4429      	add	r1, r5
 8004b4c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8004b4e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004b52:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8004b56:	2401      	movs	r4, #1
 8004b58:	7544      	strb	r4, [r0, #21]
 8004b5a:	e7d4      	b.n	8004b06 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	714b      	strb	r3, [r1, #5]
 8004b60:	e7df      	b.n	8004b22 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8004b62:	2002      	movs	r0, #2
 8004b64:	e7ea      	b.n	8004b3c <HAL_PCD_EP_Open+0x62>

08004b66 <HAL_PCD_EP_Close>:
{
 8004b66:	b510      	push	{r4, lr}
 8004b68:	4604      	mov	r4, r0
 8004b6a:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8004b6c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004b70:	d120      	bne.n	8004bb4 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b72:	f001 000f 	and.w	r0, r1, #15
 8004b76:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b80:	4423      	add	r3, r4
 8004b82:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8004b84:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004b88:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b92:	f002 020f 	and.w	r2, r2, #15
 8004b96:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004b98:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d018      	beq.n	8004bd2 <HAL_PCD_EP_Close+0x6c>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ba6:	6820      	ldr	r0, [r4, #0]
 8004ba8:	f003 ff72 	bl	8008a90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bac:	2000      	movs	r0, #0
 8004bae:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8004bb2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb4:	f001 000f 	and.w	r0, r1, #15
 8004bb8:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	3310      	adds	r3, #16
 8004bc0:	4423      	add	r3, r4
 8004bc2:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8004bc4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004bc8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004bcc:	2301      	movs	r3, #1
 8004bce:	7543      	strb	r3, [r0, #21]
 8004bd0:	e7df      	b.n	8004b92 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8004bd2:	2002      	movs	r0, #2
 8004bd4:	e7ed      	b.n	8004bb2 <HAL_PCD_EP_Close+0x4c>

08004bd6 <HAL_PCD_EP_Receive>:
{
 8004bd6:	b510      	push	{r4, lr}
 8004bd8:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bda:	f001 0c0f 	and.w	ip, r1, #15
 8004bde:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8004be2:	0089      	lsls	r1, r1, #2
 8004be4:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8004be8:	4401      	add	r1, r0
 8004bea:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8004bec:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004bf0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004bf4:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8004bf8:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8004c02:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c06:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 8004c0a:	7982      	ldrb	r2, [r0, #6]
 8004c0c:	2a01      	cmp	r2, #1
 8004c0e:	d004      	beq.n	8004c1a <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c10:	6800      	ldr	r0, [r0, #0]
 8004c12:	f004 f823 	bl	8008c5c <USB_EPStartXfer>
}
 8004c16:	2000      	movs	r0, #0
 8004c18:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8004c1a:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8004c1e:	e7f7      	b.n	8004c10 <HAL_PCD_EP_Receive+0x3a>

08004c20 <HAL_PCD_EP_Transmit>:
{
 8004c20:	b510      	push	{r4, lr}
 8004c22:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c24:	f001 0c0f 	and.w	ip, r1, #15
 8004c28:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8004c2c:	0089      	lsls	r1, r1, #2
 8004c2e:	3110      	adds	r1, #16
 8004c30:	4401      	add	r1, r0
 8004c32:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8004c34:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004c38:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004c3c:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8004c40:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c50:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8004c54:	7982      	ldrb	r2, [r0, #6]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d004      	beq.n	8004c64 <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c5a:	6800      	ldr	r0, [r0, #0]
 8004c5c:	f003 fffe 	bl	8008c5c <USB_EPStartXfer>
}
 8004c60:	2000      	movs	r0, #0
 8004c62:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8004c64:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 8004c68:	e7f7      	b.n	8004c5a <HAL_PCD_EP_Transmit+0x3a>

08004c6a <HAL_PCD_EP_SetStall>:
{
 8004c6a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c6c:	f001 050f 	and.w	r5, r1, #15
 8004c70:	7902      	ldrb	r2, [r0, #4]
 8004c72:	42aa      	cmp	r2, r5
 8004c74:	d338      	bcc.n	8004ce8 <HAL_PCD_EP_SetStall+0x7e>
 8004c76:	4604      	mov	r4, r0
 8004c78:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8004c7a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004c7e:	d11f      	bne.n	8004cc0 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8004c80:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004c84:	0089      	lsls	r1, r1, #2
 8004c86:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8004c8a:	4401      	add	r1, r0
 8004c8c:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8004c8e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004c92:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca0:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8004ca2:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d020      	beq.n	8004cec <HAL_PCD_EP_SetStall+0x82>
 8004caa:	2301      	movs	r3, #1
 8004cac:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cb0:	6820      	ldr	r0, [r4, #0]
 8004cb2:	f004 f918 	bl	8008ee6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cb6:	b185      	cbz	r5, 8004cda <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc0:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 8004cc4:	0089      	lsls	r1, r1, #2
 8004cc6:	3110      	adds	r1, #16
 8004cc8:	4401      	add	r1, r0
 8004cca:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8004ccc:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8004cd0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	755a      	strb	r2, [r3, #21]
 8004cd8:	e7e0      	b.n	8004c9c <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004cda:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8004cde:	79a1      	ldrb	r1, [r4, #6]
 8004ce0:	6820      	ldr	r0, [r4, #0]
 8004ce2:	f004 fa03 	bl	80090ec <USB_EP0_OutStart>
 8004ce6:	e7e7      	b.n	8004cb8 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8004ce8:	2001      	movs	r0, #1
 8004cea:	e7e8      	b.n	8004cbe <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8004cec:	2002      	movs	r0, #2
 8004cee:	e7e6      	b.n	8004cbe <HAL_PCD_EP_SetStall+0x54>

08004cf0 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cf0:	f001 030f 	and.w	r3, r1, #15
 8004cf4:	7902      	ldrb	r2, [r0, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d330      	bcc.n	8004d5c <HAL_PCD_EP_ClrStall+0x6c>
{
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8004cfe:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004d02:	d11e      	bne.n	8004d42 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d04:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004d08:	0089      	lsls	r1, r1, #2
 8004d0a:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8004d0e:	4401      	add	r1, r0
 8004d10:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8004d12:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004d16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 8004d20:	2200      	movs	r2, #0
 8004d22:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d24:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8004d26:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d018      	beq.n	8004d60 <HAL_PCD_EP_ClrStall+0x70>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d34:	6820      	ldr	r0, [r4, #0]
 8004d36:	f004 f903 	bl	8008f40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8004d40:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d42:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8004d46:	0089      	lsls	r1, r1, #2
 8004d48:	3110      	adds	r1, #16
 8004d4a:	4401      	add	r1, r0
 8004d4c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8004d4e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004d52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004d56:	2001      	movs	r0, #1
 8004d58:	7550      	strb	r0, [r2, #21]
 8004d5a:	e7e1      	b.n	8004d20 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8004d5c:	2001      	movs	r0, #1
}
 8004d5e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004d60:	2002      	movs	r0, #2
 8004d62:	e7ed      	b.n	8004d40 <HAL_PCD_EP_ClrStall+0x50>

08004d64 <HAL_PCD_EP_Abort>:
{
 8004d64:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8004d66:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004d6a:	d10c      	bne.n	8004d86 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d6c:	f001 010f 	and.w	r1, r1, #15
 8004d70:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004d74:	0089      	lsls	r1, r1, #2
 8004d76:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8004d7a:	4401      	add	r1, r0
 8004d7c:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d7e:	6800      	ldr	r0, [r0, #0]
 8004d80:	f003 fef6 	bl	8008b70 <USB_EPStopXfer>
}
 8004d84:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d86:	f001 010f 	and.w	r1, r1, #15
 8004d8a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004d8e:	0089      	lsls	r1, r1, #2
 8004d90:	3110      	adds	r1, #16
 8004d92:	4401      	add	r1, r0
 8004d94:	3104      	adds	r1, #4
 8004d96:	e7f2      	b.n	8004d7e <HAL_PCD_EP_Abort+0x1a>

08004d98 <HAL_PCD_IRQHandler>:
{
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004da0:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004da2:	4628      	mov	r0, r5
 8004da4:	f004 f95e 	bl	8009064 <USB_GetMode>
 8004da8:	b110      	cbz	r0, 8004db0 <HAL_PCD_IRQHandler+0x18>
}
 8004daa:	b003      	add	sp, #12
 8004dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db0:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004db2:	6820      	ldr	r0, [r4, #0]
 8004db4:	f004 f91e 	bl	8008ff4 <USB_ReadInterrupts>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d0f6      	beq.n	8004daa <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004dbc:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8004dc6:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004dca:	6820      	ldr	r0, [r4, #0]
 8004dcc:	f004 f912 	bl	8008ff4 <USB_ReadInterrupts>
 8004dd0:	f010 0f02 	tst.w	r0, #2
 8004dd4:	d004      	beq.n	8004de0 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004dd6:	6822      	ldr	r2, [r4, #0]
 8004dd8:	6953      	ldr	r3, [r2, #20]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	f004 f907 	bl	8008ff4 <USB_ReadInterrupts>
 8004de6:	f010 0f10 	tst.w	r0, #16
 8004dea:	d016      	beq.n	8004e1a <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004dec:	6822      	ldr	r2, [r4, #0]
 8004dee:	6993      	ldr	r3, [r2, #24]
 8004df0:	f023 0310 	bic.w	r3, r3, #16
 8004df4:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8004df6:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004dfa:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004dfe:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 8004e02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e06:	d06a      	beq.n	8004ede <HAL_PCD_IRQHandler+0x146>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e0c:	f000 808d 	beq.w	8004f2a <HAL_PCD_IRQHandler+0x192>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	6993      	ldr	r3, [r2, #24]
 8004e14:	f043 0310 	orr.w	r3, r3, #16
 8004e18:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e1a:	6820      	ldr	r0, [r4, #0]
 8004e1c:	f004 f8ea 	bl	8008ff4 <USB_ReadInterrupts>
 8004e20:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 8004e24:	f040 8093 	bne.w	8004f4e <HAL_PCD_IRQHandler+0x1b6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	f004 f8e3 	bl	8008ff4 <USB_ReadInterrupts>
 8004e2e:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 8004e32:	f040 80fc 	bne.w	800502e <HAL_PCD_IRQHandler+0x296>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e36:	6820      	ldr	r0, [r4, #0]
 8004e38:	f004 f8dc 	bl	8008ff4 <USB_ReadInterrupts>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	f2c0 817d 	blt.w	800513c <HAL_PCD_IRQHandler+0x3a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	f004 f8d6 	bl	8008ff4 <USB_ReadInterrupts>
 8004e48:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8004e4c:	d009      	beq.n	8004e62 <HAL_PCD_IRQHandler+0xca>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f013 0f01 	tst.w	r3, #1
 8004e54:	f040 818a 	bne.w	800516c <HAL_PCD_IRQHandler+0x3d4>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	6953      	ldr	r3, [r2, #20]
 8004e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e60:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004e62:	6820      	ldr	r0, [r4, #0]
 8004e64:	f004 f8c6 	bl	8008ff4 <USB_ReadInterrupts>
 8004e68:	f010 6f00 	tst.w	r0, #134217728	@ 0x8000000
 8004e6c:	d015      	beq.n	8004e9a <HAL_PCD_IRQHandler+0x102>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	6953      	ldr	r3, [r2, #20]
 8004e72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e76:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8004e78:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 8179 	bne.w	8005174 <HAL_PCD_IRQHandler+0x3dc>
        hpcd->LPM_State = LPM_L1;
 8004e82:	2101      	movs	r1, #1
 8004e84:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8c:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8004e90:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004e94:	4620      	mov	r0, r4
 8004e96:	f000 fabd 	bl	8005414 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e9a:	6820      	ldr	r0, [r4, #0]
 8004e9c:	f004 f8aa 	bl	8008ff4 <USB_ReadInterrupts>
 8004ea0:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 8004ea4:	f040 816a 	bne.w	800517c <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	f004 f8a3 	bl	8008ff4 <USB_ReadInterrupts>
 8004eae:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8004eb2:	f040 81b6 	bne.w	8005222 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004eb6:	6820      	ldr	r0, [r4, #0]
 8004eb8:	f004 f89c 	bl	8008ff4 <USB_ReadInterrupts>
 8004ebc:	f010 0f08 	tst.w	r0, #8
 8004ec0:	f040 81c7 	bne.w	8005252 <HAL_PCD_IRQHandler+0x4ba>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	f004 f895 	bl	8008ff4 <USB_ReadInterrupts>
 8004eca:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004ece:	f000 81da 	beq.w	8005286 <HAL_PCD_IRQHandler+0x4ee>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ed2:	69ab      	ldr	r3, [r5, #24]
 8004ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ed8:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eda:	2601      	movs	r6, #1
 8004edc:	e1c3      	b.n	8005266 <HAL_PCD_IRQHandler+0x4ce>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ede:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004ee2:	ea18 0f03 	tst.w	r8, r3
 8004ee6:	d093      	beq.n	8004e10 <HAL_PCD_IRQHandler+0x78>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ee8:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004eec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 8004ef6:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 8004efa:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8004efe:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 8004f02:	4628      	mov	r0, r5
 8004f04:	f003 ffcc 	bl	8008ea0 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f08:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 8004f0c:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 8004f10:	4453      	add	r3, sl
 8004f12:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f16:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 8004f1a:	9a01      	ldr	r2, [sp, #4]
 8004f1c:	444a      	add	r2, r9
 8004f1e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004f22:	4453      	add	r3, sl
 8004f24:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 8004f28:	e772      	b.n	8004e10 <HAL_PCD_IRQHandler+0x78>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 8004f30:	4628      	mov	r0, r5
 8004f32:	f003 ffb5 	bl	8008ea0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f36:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8004f3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f3e:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 8004f42:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8004f46:	4442      	add	r2, r8
 8004f48:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 8004f4c:	e760      	b.n	8004e10 <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	f004 f85d 	bl	800900e <USB_ReadDevAllOutEpInterrupt>
 8004f54:	4680      	mov	r8, r0
      epnum = 0U;
 8004f56:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8004f58:	e035      	b.n	8004fc6 <HAL_PCD_IRQHandler+0x22e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f5a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f64:	4649      	mov	r1, r9
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7ff fcfa 	bl	8004960 <PCD_EP_OutXfrComplete_int>
 8004f6c:	e03c      	b.n	8004fe8 <HAL_PCD_IRQHandler+0x250>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f6e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004f72:	2208      	movs	r2, #8
 8004f74:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f78:	4649      	mov	r1, r9
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f7ff fd72 	bl	8004a64 <PCD_EP_OutSetupPacket_int>
 8004f80:	e035      	b.n	8004fee <HAL_PCD_IRQHandler+0x256>
            if (ep->is_iso_incomplete == 1U)
 8004f82:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8004f86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f8a:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d041      	beq.n	8005016 <HAL_PCD_IRQHandler+0x27e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f92:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004f96:	2202      	movs	r2, #2
 8004f98:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f9c:	f01a 0f20 	tst.w	sl, #32
 8004fa0:	d004      	beq.n	8004fac <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fa2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fac:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8004fb0:	d005      	beq.n	8004fbe <HAL_PCD_IRQHandler+0x226>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fb2:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004fb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fba:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8004fbe:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8004fc2:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8004fc6:	f1b8 0f00 	cmp.w	r8, #0
 8004fca:	f43f af2d 	beq.w	8004e28 <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U)
 8004fce:	f018 0f01 	tst.w	r8, #1
 8004fd2:	d0f4      	beq.n	8004fbe <HAL_PCD_IRQHandler+0x226>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fd4:	fa5f fb89 	uxtb.w	fp, r9
 8004fd8:	4659      	mov	r1, fp
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	f004 f827 	bl	800902e <USB_ReadDevOutEPInterrupt>
 8004fe0:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004fe2:	f010 0f01 	tst.w	r0, #1
 8004fe6:	d1b8      	bne.n	8004f5a <HAL_PCD_IRQHandler+0x1c2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fe8:	f01a 0f08 	tst.w	sl, #8
 8004fec:	d1bf      	bne.n	8004f6e <HAL_PCD_IRQHandler+0x1d6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fee:	f01a 0f10 	tst.w	sl, #16
 8004ff2:	d004      	beq.n	8004ffe <HAL_PCD_IRQHandler+0x266>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ff4:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ffe:	f01a 0f02 	tst.w	sl, #2
 8005002:	d0cb      	beq.n	8004f9c <HAL_PCD_IRQHandler+0x204>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005004:	696b      	ldr	r3, [r5, #20]
 8005006:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800500a:	d0ba      	beq.n	8004f82 <HAL_PCD_IRQHandler+0x1ea>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	e7b5      	b.n	8004f82 <HAL_PCD_IRQHandler+0x1ea>
              ep->is_iso_incomplete = 0U;
 8005016:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800501a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005024:	4659      	mov	r1, fp
 8005026:	4620      	mov	r0, r4
 8005028:	f007 f99e 	bl	800c368 <HAL_PCD_ISOOUTIncompleteCallback>
 800502c:	e7b1      	b.n	8004f92 <HAL_PCD_IRQHandler+0x1fa>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800502e:	6820      	ldr	r0, [r4, #0]
 8005030:	f003 fff5 	bl	800901e <USB_ReadDevAllInEpInterrupt>
 8005034:	4680      	mov	r8, r0
      epnum = 0U;
 8005036:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8005038:	e025      	b.n	8005086 <HAL_PCD_IRQHandler+0x2ee>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800503a:	4659      	mov	r1, fp
 800503c:	4620      	mov	r0, r4
 800503e:	f007 f94f 	bl	800c2e0 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005042:	f01a 0f08 	tst.w	sl, #8
 8005046:	d004      	beq.n	8005052 <HAL_PCD_IRQHandler+0x2ba>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005048:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800504c:	2208      	movs	r2, #8
 800504e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005052:	f01a 0f10 	tst.w	sl, #16
 8005056:	d004      	beq.n	8005062 <HAL_PCD_IRQHandler+0x2ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005058:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800505c:	2210      	movs	r2, #16
 800505e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005062:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8005066:	d004      	beq.n	8005072 <HAL_PCD_IRQHandler+0x2da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005068:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800506c:	2240      	movs	r2, #64	@ 0x40
 800506e:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005072:	f01a 0f02 	tst.w	sl, #2
 8005076:	d140      	bne.n	80050fa <HAL_PCD_IRQHandler+0x362>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005078:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 800507c:	d159      	bne.n	8005132 <HAL_PCD_IRQHandler+0x39a>
        epnum++;
 800507e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8005082:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8005086:	f1b8 0f00 	cmp.w	r8, #0
 800508a:	f43f aed4 	beq.w	8004e36 <HAL_PCD_IRQHandler+0x9e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800508e:	f018 0f01 	tst.w	r8, #1
 8005092:	d0f4      	beq.n	800507e <HAL_PCD_IRQHandler+0x2e6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005094:	fa5f fb89 	uxtb.w	fp, r9
 8005098:	4659      	mov	r1, fp
 800509a:	6820      	ldr	r0, [r4, #0]
 800509c:	f003 ffd0 	bl	8009040 <USB_ReadDevInEPInterrupt>
 80050a0:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050a2:	f010 0f01 	tst.w	r0, #1
 80050a6:	d0cc      	beq.n	8005042 <HAL_PCD_IRQHandler+0x2aa>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050a8:	f009 020f 	and.w	r2, r9, #15
 80050ac:	2101      	movs	r1, #1
 80050ae:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b4:	ea23 0302 	bic.w	r3, r3, r2
 80050b8:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050ba:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80050be:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 80050c2:	79a3      	ldrb	r3, [r4, #6]
 80050c4:	428b      	cmp	r3, r1
 80050c6:	d1b8      	bne.n	800503a <HAL_PCD_IRQHandler+0x2a2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050c8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80050cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	69d9      	ldr	r1, [r3, #28]
 80050d4:	440a      	add	r2, r1
 80050d6:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80050d8:	f1b9 0f00 	cmp.w	r9, #0
 80050dc:	d1ad      	bne.n	800503a <HAL_PCD_IRQHandler+0x2a2>
 80050de:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80050e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1a6      	bne.n	800503a <HAL_PCD_IRQHandler+0x2a2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050ec:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80050f0:	2101      	movs	r1, #1
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	f003 fffa 	bl	80090ec <USB_EP0_OutStart>
 80050f8:	e79f      	b.n	800503a <HAL_PCD_IRQHandler+0x2a2>
            (void)USB_FlushTxFifo(USBx, epnum);
 80050fa:	4649      	mov	r1, r9
 80050fc:	4628      	mov	r0, r5
 80050fe:	f003 fb53 	bl	80087a8 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8005102:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005106:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800510a:	7ddb      	ldrb	r3, [r3, #23]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d005      	beq.n	800511c <HAL_PCD_IRQHandler+0x384>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005110:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8005114:	2202      	movs	r2, #2
 8005116:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 800511a:	e7ad      	b.n	8005078 <HAL_PCD_IRQHandler+0x2e0>
              ep->is_iso_incomplete = 0U;
 800511c:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8005120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005124:	2200      	movs	r2, #0
 8005126:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005128:	4659      	mov	r1, fp
 800512a:	4620      	mov	r0, r4
 800512c:	f007 f922 	bl	800c374 <HAL_PCD_ISOINIncompleteCallback>
 8005130:	e7ee      	b.n	8005110 <HAL_PCD_IRQHandler+0x378>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005132:	4649      	mov	r1, r9
 8005134:	4620      	mov	r0, r4
 8005136:	f7ff fb07 	bl	8004748 <PCD_WriteEmptyTxFifo>
 800513a:	e7a0      	b.n	800507e <HAL_PCD_IRQHandler+0x2e6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8005144:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8005148:	2b01      	cmp	r3, #1
 800514a:	d008      	beq.n	800515e <HAL_PCD_IRQHandler+0x3c6>
        HAL_PCD_ResumeCallback(hpcd);
 800514c:	4620      	mov	r0, r4
 800514e:	f007 f905 	bl	800c35c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	6953      	ldr	r3, [r2, #20]
 8005156:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800515a:	6153      	str	r3, [r2, #20]
 800515c:	e671      	b.n	8004e42 <HAL_PCD_IRQHandler+0xaa>
        hpcd->LPM_State = LPM_L0;
 800515e:	2100      	movs	r1, #0
 8005160:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005164:	4620      	mov	r0, r4
 8005166:	f000 f955 	bl	8005414 <HAL_PCDEx_LPM_Callback>
 800516a:	e7f2      	b.n	8005152 <HAL_PCD_IRQHandler+0x3ba>
        HAL_PCD_SuspendCallback(hpcd);
 800516c:	4620      	mov	r0, r4
 800516e:	f007 f8dd 	bl	800c32c <HAL_PCD_SuspendCallback>
 8005172:	e671      	b.n	8004e58 <HAL_PCD_IRQHandler+0xc0>
        HAL_PCD_SuspendCallback(hpcd);
 8005174:	4620      	mov	r0, r4
 8005176:	f007 f8d9 	bl	800c32c <HAL_PCD_SuspendCallback>
 800517a:	e68e      	b.n	8004e9a <HAL_PCD_IRQHandler+0x102>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f023 0301 	bic.w	r3, r3, #1
 8005182:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005184:	2110      	movs	r1, #16
 8005186:	6820      	ldr	r0, [r4, #0]
 8005188:	f003 fb0e 	bl	80087a8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800518c:	e01a      	b.n	80051c4 <HAL_PCD_IRQHandler+0x42c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800518e:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8005192:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 8005196:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800519a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 800519e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80051a2:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80051a6:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051aa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80051ae:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80051b2:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051b6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80051ba:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80051be:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c2:	3601      	adds	r6, #1
 80051c4:	7923      	ldrb	r3, [r4, #4]
 80051c6:	42b3      	cmp	r3, r6
 80051c8:	d8e1      	bhi.n	800518e <HAL_PCD_IRQHandler+0x3f6>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80051d0:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051d2:	7be3      	ldrb	r3, [r4, #15]
 80051d4:	b1db      	cbz	r3, 800520e <HAL_PCD_IRQHandler+0x476>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051da:	f043 030b 	orr.w	r3, r3, #11
 80051de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e4:	f043 030b 	orr.w	r3, r3, #11
 80051e8:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80051ea:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 80051ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80051f2:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051f6:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80051fa:	79a1      	ldrb	r1, [r4, #6]
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	f003 ff75 	bl	80090ec <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	6953      	ldr	r3, [r2, #20]
 8005206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800520a:	6153      	str	r3, [r2, #20]
 800520c:	e64c      	b.n	8004ea8 <HAL_PCD_IRQHandler+0x110>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f043 030b 	orr.w	r3, r3, #11
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	e7e3      	b.n	80051ea <HAL_PCD_IRQHandler+0x452>
      (void)USB_ActivateSetup(hpcd->Instance);
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	f003 ff53 	bl	80090ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	f003 fbd3 	bl	80089d4 <USB_GetDevSpeed>
 800522e:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005230:	6826      	ldr	r6, [r4, #0]
 8005232:	f000 ff63 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8005236:	4601      	mov	r1, r0
 8005238:	79e2      	ldrb	r2, [r4, #7]
 800523a:	4630      	mov	r0, r6
 800523c:	f003 fa36 	bl	80086ac <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8005240:	4620      	mov	r0, r4
 8005242:	f007 f85e 	bl	800c302 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	6953      	ldr	r3, [r2, #20]
 800524a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800524e:	6153      	str	r3, [r2, #20]
 8005250:	e631      	b.n	8004eb6 <HAL_PCD_IRQHandler+0x11e>
      HAL_PCD_SOFCallback(hpcd);
 8005252:	4620      	mov	r0, r4
 8005254:	f007 f84f 	bl	800c2f6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	6953      	ldr	r3, [r2, #20]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	6153      	str	r3, [r2, #20]
 8005262:	e62f      	b.n	8004ec4 <HAL_PCD_IRQHandler+0x12c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005264:	3601      	adds	r6, #1
 8005266:	7923      	ldrb	r3, [r4, #4]
 8005268:	42b3      	cmp	r3, r6
 800526a:	d90c      	bls.n	8005286 <HAL_PCD_IRQHandler+0x4ee>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800526c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8005270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005274:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8005278:	2b01      	cmp	r3, #1
 800527a:	d1f3      	bne.n	8005264 <HAL_PCD_IRQHandler+0x4cc>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800527c:	b2f1      	uxtb	r1, r6
 800527e:	4620      	mov	r0, r4
 8005280:	f7ff fd70 	bl	8004d64 <HAL_PCD_EP_Abort>
 8005284:	e7ee      	b.n	8005264 <HAL_PCD_IRQHandler+0x4cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005286:	6820      	ldr	r0, [r4, #0]
 8005288:	f003 feb4 	bl	8008ff4 <USB_ReadInterrupts>
 800528c:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8005290:	d125      	bne.n	80052de <HAL_PCD_IRQHandler+0x546>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	f003 feae 	bl	8008ff4 <USB_ReadInterrupts>
 8005298:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 800529c:	d058      	beq.n	8005350 <HAL_PCD_IRQHandler+0x5b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800529e:	2301      	movs	r3, #1
 80052a0:	e026      	b.n	80052f0 <HAL_PCD_IRQHandler+0x558>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052a2:	3601      	adds	r6, #1
 80052a4:	7923      	ldrb	r3, [r4, #4]
 80052a6:	42b3      	cmp	r3, r6
 80052a8:	d91b      	bls.n	80052e2 <HAL_PCD_IRQHandler+0x54a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80052aa:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 80052ae:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80052b2:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80052b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052ba:	7e1b      	ldrb	r3, [r3, #24]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d1f0      	bne.n	80052a2 <HAL_PCD_IRQHandler+0x50a>
 80052c0:	2a00      	cmp	r2, #0
 80052c2:	daee      	bge.n	80052a2 <HAL_PCD_IRQHandler+0x50a>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80052c4:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80052c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052cc:	2201      	movs	r2, #1
 80052ce:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80052d0:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 80052d4:	b2c9      	uxtb	r1, r1
 80052d6:	4620      	mov	r0, r4
 80052d8:	f7ff fd44 	bl	8004d64 <HAL_PCD_EP_Abort>
 80052dc:	e7e1      	b.n	80052a2 <HAL_PCD_IRQHandler+0x50a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052de:	2601      	movs	r6, #1
 80052e0:	e7e0      	b.n	80052a4 <HAL_PCD_IRQHandler+0x50c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	6953      	ldr	r3, [r2, #20]
 80052e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052ea:	6153      	str	r3, [r2, #20]
 80052ec:	e7d1      	b.n	8005292 <HAL_PCD_IRQHandler+0x4fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052ee:	3301      	adds	r3, #1
 80052f0:	7922      	ldrb	r2, [r4, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d927      	bls.n	8005346 <HAL_PCD_IRQHandler+0x5ae>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80052f6:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80052fa:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052fe:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005302:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005306:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 800530a:	2a01      	cmp	r2, #1
 800530c:	d1ef      	bne.n	80052ee <HAL_PCD_IRQHandler+0x556>
 800530e:	2900      	cmp	r1, #0
 8005310:	daed      	bge.n	80052ee <HAL_PCD_IRQHandler+0x556>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005312:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 8005316:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800531a:	f012 0f01 	tst.w	r2, #1
 800531e:	d1e6      	bne.n	80052ee <HAL_PCD_IRQHandler+0x556>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005320:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8005324:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005328:	2101      	movs	r1, #1
 800532a:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800532e:	69aa      	ldr	r2, [r5, #24]
 8005330:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005334:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005336:	696a      	ldr	r2, [r5, #20]
 8005338:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800533c:	d1d7      	bne.n	80052ee <HAL_PCD_IRQHandler+0x556>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005344:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	6953      	ldr	r3, [r2, #20]
 800534a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800534e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005350:	6820      	ldr	r0, [r4, #0]
 8005352:	f003 fe4f 	bl	8008ff4 <USB_ReadInterrupts>
 8005356:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800535a:	d110      	bne.n	800537e <HAL_PCD_IRQHandler+0x5e6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	f003 fe49 	bl	8008ff4 <USB_ReadInterrupts>
 8005362:	f010 0f04 	tst.w	r0, #4
 8005366:	f43f ad20 	beq.w	8004daa <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800536e:	f015 0f04 	tst.w	r5, #4
 8005372:	d10d      	bne.n	8005390 <HAL_PCD_IRQHandler+0x5f8>
      hpcd->Instance->GOTGINT |= RegVal;
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	6853      	ldr	r3, [r2, #4]
 8005378:	432b      	orrs	r3, r5
 800537a:	6053      	str	r3, [r2, #4]
 800537c:	e515      	b.n	8004daa <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 800537e:	4620      	mov	r0, r4
 8005380:	f006 fffe 	bl	800c380 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	6953      	ldr	r3, [r2, #20]
 8005388:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800538c:	6153      	str	r3, [r2, #20]
 800538e:	e7e5      	b.n	800535c <HAL_PCD_IRQHandler+0x5c4>
        HAL_PCD_DisconnectCallback(hpcd);
 8005390:	4620      	mov	r0, r4
 8005392:	f006 fffb 	bl	800c38c <HAL_PCD_DisconnectCallback>
 8005396:	e7ed      	b.n	8005374 <HAL_PCD_IRQHandler+0x5dc>

08005398 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005398:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800539a:	6804      	ldr	r4, [r0, #0]
 800539c:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 800539e:	b931      	cbnz	r1, 80053ae <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80053a0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80053a4:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80053a6:	2000      	movs	r0, #0
 80053a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80053b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80053b2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	e008      	b.n	80053cc <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80053ba:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80053be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80053c2:	6849      	ldr	r1, [r1, #4]
 80053c4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80053c8:	3301      	adds	r3, #1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80053d0:	428b      	cmp	r3, r1
 80053d2:	d3f2      	bcc.n	80053ba <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80053d8:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 80053dc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80053e0:	6060      	str	r0, [r4, #4]
 80053e2:	e7e0      	b.n	80053a6 <HAL_PCDEx_SetTxFiFo+0xe>

080053e4 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80053e4:	6803      	ldr	r3, [r0, #0]
 80053e6:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 80053e8:	2000      	movs	r0, #0
 80053ea:	4770      	bx	lr

080053ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053ec:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053ee:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 80053f0:	2101      	movs	r1, #1
 80053f2:	f8c0 14d8 	str.w	r1, [r0, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80053f6:	2000      	movs	r0, #0
 80053f8:	f883 04cc 	strb.w	r0, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80053fc:	6993      	ldr	r3, [r2, #24]
 80053fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005402:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005404:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 8005406:	4b02      	ldr	r3, [pc, #8]	@ (8005410 <HAL_PCDEx_ActivateLPM+0x24>)
 8005408:	430b      	orrs	r3, r1
 800540a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	10000003 	.word	0x10000003

08005414 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005414:	4770      	bx	lr
	...

08005418 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005418:	4b13      	ldr	r3, [pc, #76]	@ (8005468 <HAL_PWREx_ConfigSupply+0x50>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f013 0f04 	tst.w	r3, #4
 8005420:	d107      	bne.n	8005432 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005422:	4b11      	ldr	r3, [pc, #68]	@ (8005468 <HAL_PWREx_ConfigSupply+0x50>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	4283      	cmp	r3, r0
 800542c:	d01a      	beq.n	8005464 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800542e:	2001      	movs	r0, #1
 8005430:	4770      	bx	lr
{
 8005432:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005434:	4a0c      	ldr	r2, [pc, #48]	@ (8005468 <HAL_PWREx_ConfigSupply+0x50>)
 8005436:	68d3      	ldr	r3, [r2, #12]
 8005438:	f023 0307 	bic.w	r3, r3, #7
 800543c:	4303      	orrs	r3, r0
 800543e:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005440:	f7fd f93a 	bl	80026b8 <HAL_GetTick>
 8005444:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005446:	4b08      	ldr	r3, [pc, #32]	@ (8005468 <HAL_PWREx_ConfigSupply+0x50>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800544e:	d107      	bne.n	8005460 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005450:	f7fd f932 	bl	80026b8 <HAL_GetTick>
 8005454:	1b00      	subs	r0, r0, r4
 8005456:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800545a:	d9f4      	bls.n	8005446 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 800545c:	2001      	movs	r0, #1
 800545e:	e000      	b.n	8005462 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005460:	2000      	movs	r0, #0
}
 8005462:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8005464:	2000      	movs	r0, #0
}
 8005466:	4770      	bx	lr
 8005468:	58024800 	.word	0x58024800

0800546c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800546c:	4a02      	ldr	r2, [pc, #8]	@ (8005478 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800546e:	68d3      	ldr	r3, [r2, #12]
 8005470:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005474:	60d3      	str	r3, [r2, #12]
}
 8005476:	4770      	bx	lr
 8005478:	58024800 	.word	0x58024800

0800547c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800547c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005480:	4605      	mov	r5, r0
 8005482:	460f      	mov	r7, r1
 8005484:	4616      	mov	r6, r2
 8005486:	4699      	mov	r9, r3
 8005488:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800548c:	682c      	ldr	r4, [r5, #0]
 800548e:	68a4      	ldr	r4, [r4, #8]
 8005490:	423c      	tst	r4, r7
 8005492:	bf14      	ite	ne
 8005494:	f04f 0c01 	movne.w	ip, #1
 8005498:	f04f 0c00 	moveq.w	ip, #0
 800549c:	45b4      	cmp	ip, r6
 800549e:	d014      	beq.n	80054ca <QSPI_WaitFlagStateUntilTimeout+0x4e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80054a4:	d0f2      	beq.n	800548c <QSPI_WaitFlagStateUntilTimeout+0x10>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a6:	f7fd f907 	bl	80026b8 <HAL_GetTick>
 80054aa:	eba0 0009 	sub.w	r0, r0, r9
 80054ae:	4540      	cmp	r0, r8
 80054b0:	d802      	bhi.n	80054b8 <QSPI_WaitFlagStateUntilTimeout+0x3c>
 80054b2:	f1b8 0f00 	cmp.w	r8, #0
 80054b6:	d1e9      	bne.n	800548c <QSPI_WaitFlagStateUntilTimeout+0x10>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80054b8:	2304      	movs	r3, #4
 80054ba:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80054be:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	646b      	str	r3, [r5, #68]	@ 0x44

        return HAL_ERROR;
 80054c6:	2001      	movs	r0, #1
 80054c8:	e000      	b.n	80054cc <QSPI_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }
  return HAL_OK;
 80054ca:	2000      	movs	r0, #0
}
 80054cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080054d0 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 80054d0:	6481      	str	r1, [r0, #72]	@ 0x48
}
 80054d2:	4770      	bx	lr

080054d4 <HAL_QSPI_Init>:
{
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80054da:	f7fd f8ed 	bl	80026b8 <HAL_GetTick>
  if(hqspi == NULL)
 80054de:	2c00      	cmp	r4, #0
 80054e0:	d045      	beq.n	800556e <HAL_QSPI_Init+0x9a>
 80054e2:	4606      	mov	r6, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80054e4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d037      	beq.n	800555c <HAL_QSPI_Init+0x88>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054ec:	6825      	ldr	r5, [r4, #0]
 80054ee:	682a      	ldr	r2, [r5, #0]
 80054f0:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80054f4:	68a1      	ldr	r1, [r4, #8]
 80054f6:	3901      	subs	r1, #1
 80054f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80054fc:	602a      	str	r2, [r5, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054fe:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	4633      	mov	r3, r6
 8005504:	2200      	movs	r2, #0
 8005506:	2120      	movs	r1, #32
 8005508:	4620      	mov	r0, r4
 800550a:	f7ff ffb7 	bl	800547c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800550e:	bb18      	cbnz	r0, 8005558 <HAL_QSPI_Init+0x84>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005510:	6821      	ldr	r1, [r4, #0]
 8005512:	680b      	ldr	r3, [r1, #0]
 8005514:	4a17      	ldr	r2, [pc, #92]	@ (8005574 <HAL_QSPI_Init+0xa0>)
 8005516:	401a      	ands	r2, r3
 8005518:	6865      	ldr	r5, [r4, #4]
 800551a:	68e3      	ldr	r3, [r4, #12]
 800551c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005520:	69e5      	ldr	r5, [r4, #28]
 8005522:	432b      	orrs	r3, r5
 8005524:	6a25      	ldr	r5, [r4, #32]
 8005526:	432b      	orrs	r3, r5
 8005528:	431a      	orrs	r2, r3
 800552a:	600a      	str	r2, [r1, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800552c:	6821      	ldr	r1, [r4, #0]
 800552e:	684a      	ldr	r2, [r1, #4]
 8005530:	4b11      	ldr	r3, [pc, #68]	@ (8005578 <HAL_QSPI_Init+0xa4>)
 8005532:	4013      	ands	r3, r2
 8005534:	6925      	ldr	r5, [r4, #16]
 8005536:	6962      	ldr	r2, [r4, #20]
 8005538:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800553c:	69a5      	ldr	r5, [r4, #24]
 800553e:	432a      	orrs	r2, r5
 8005540:	4313      	orrs	r3, r2
 8005542:	604b      	str	r3, [r1, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800554e:	2300      	movs	r3, #0
 8005550:	6463      	str	r3, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005552:	2301      	movs	r3, #1
 8005554:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8005558:	b002      	add	sp, #8
 800555a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_QSPI_MspInit(hqspi);
 800555c:	4620      	mov	r0, r4
 800555e:	f7fb fcf5 	bl	8000f4c <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005562:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005566:	4620      	mov	r0, r4
 8005568:	f7ff ffb2 	bl	80054d0 <HAL_QSPI_SetTimeout>
 800556c:	e7be      	b.n	80054ec <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 800556e:	2001      	movs	r0, #1
 8005570:	e7f2      	b.n	8005558 <HAL_QSPI_Init+0x84>
 8005572:	bf00      	nop
 8005574:	00ffff2f 	.word	0x00ffff2f
 8005578:	ffe0f8fe 	.word	0xffe0f8fe

0800557c <HAL_RAMECC_Init>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init(RAMECC_HandleTypeDef *hramecc)
{
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 800557c:	4603      	mov	r3, r0
 800557e:	b1e8      	cbz	r0, 80055bc <HAL_RAMECC_Init+0x40>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 8005580:	2202      	movs	r2, #2
 8005582:	7102      	strb	r2, [r0, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 8005584:	6801      	ldr	r1, [r0, #0]
 8005586:	680a      	ldr	r2, [r1, #0]
 8005588:	f022 0220 	bic.w	r2, r2, #32
 800558c:	600a      	str	r2, [r1, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 800558e:	6802      	ldr	r2, [r0, #0]
 8005590:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005594:	6811      	ldr	r1, [r2, #0]
 8005596:	f021 010f 	bic.w	r1, r1, #15
 800559a:	6011      	str	r1, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 800559c:	6801      	ldr	r1, [r0, #0]
 800559e:	680a      	ldr	r2, [r1, #0]
 80055a0:	f022 021c 	bic.w	r2, r2, #28
 80055a4:	600a      	str	r2, [r1, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 80055a6:	6801      	ldr	r1, [r0, #0]
 80055a8:	684a      	ldr	r2, [r1, #4]
 80055aa:	f022 0207 	bic.w	r2, r2, #7
 80055ae:	604a      	str	r2, [r1, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 80055b0:	2000      	movs	r0, #0
 80055b2:	6098      	str	r0, [r3, #8]

  /* Initialise the RAMECC error detected code */
  hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 80055b4:	60d8      	str	r0, [r3, #12]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 80055b6:	2201      	movs	r2, #1
 80055b8:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 80055ba:	4770      	bx	lr
    return HAL_ERROR;
 80055bc:	2001      	movs	r0, #1
}
 80055be:	4770      	bx	lr

080055c0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f000 8339 	beq.w	8005c38 <HAL_RCC_OscConfig+0x678>
{
 80055c6:	b538      	push	{r3, r4, r5, lr}
 80055c8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ca:	6803      	ldr	r3, [r0, #0]
 80055cc:	f013 0f01 	tst.w	r3, #1
 80055d0:	d025      	beq.n	800561e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055d2:	4a94      	ldr	r2, [pc, #592]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80055d4:	6913      	ldr	r3, [r2, #16]
 80055d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055da:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d015      	beq.n	800560c <HAL_RCC_OscConfig+0x4c>
 80055e0:	2b18      	cmp	r3, #24
 80055e2:	d00f      	beq.n	8005604 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ea:	d03f      	beq.n	800566c <HAL_RCC_OscConfig+0xac>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d153      	bne.n	8005698 <HAL_RCC_OscConfig+0xd8>
 80055f0:	4b8c      	ldr	r3, [pc, #560]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e038      	b.n	8005676 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005604:	f002 0203 	and.w	r2, r2, #3
 8005608:	2a02      	cmp	r2, #2
 800560a:	d1eb      	bne.n	80055e4 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	4b85      	ldr	r3, [pc, #532]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005614:	d003      	beq.n	800561e <HAL_RCC_OscConfig+0x5e>
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 830f 	beq.w	8005c3c <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	f013 0f02 	tst.w	r3, #2
 8005624:	f000 80a1 	beq.w	800576a <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005628:	4a7e      	ldr	r2, [pc, #504]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 800562a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800562c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800562e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8005632:	d05a      	beq.n	80056ea <HAL_RCC_OscConfig+0x12a>
 8005634:	2b18      	cmp	r3, #24
 8005636:	d055      	beq.n	80056e4 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005638:	68e3      	ldr	r3, [r4, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80de 	beq.w	80057fc <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005640:	4978      	ldr	r1, [pc, #480]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 8005642:	680a      	ldr	r2, [r1, #0]
 8005644:	f022 0219 	bic.w	r2, r2, #25
 8005648:	4313      	orrs	r3, r2
 800564a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fd f834 	bl	80026b8 <HAL_GetTick>
 8005650:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005652:	4b74      	ldr	r3, [pc, #464]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f013 0f04 	tst.w	r3, #4
 800565a:	f040 80ad 	bne.w	80057b8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565e:	f7fd f82b 	bl	80026b8 <HAL_GetTick>
 8005662:	1b40      	subs	r0, r0, r5
 8005664:	2802      	cmp	r0, #2
 8005666:	d9f4      	bls.n	8005652 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8005668:	2003      	movs	r0, #3
 800566a:	e2ee      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800566c:	4a6d      	ldr	r2, [pc, #436]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 800566e:	6813      	ldr	r3, [r2, #0]
 8005670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005674:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005676:	6863      	ldr	r3, [r4, #4]
 8005678:	b32b      	cbz	r3, 80056c6 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800567a:	f7fd f81d 	bl	80026b8 <HAL_GetTick>
 800567e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005680:	4b68      	ldr	r3, [pc, #416]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005688:	d1c9      	bne.n	800561e <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800568a:	f7fd f815 	bl	80026b8 <HAL_GetTick>
 800568e:	1b40      	subs	r0, r0, r5
 8005690:	2864      	cmp	r0, #100	@ 0x64
 8005692:	d9f5      	bls.n	8005680 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8005694:	2003      	movs	r0, #3
 8005696:	e2d8      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800569c:	d009      	beq.n	80056b2 <HAL_RCC_OscConfig+0xf2>
 800569e:	4b61      	ldr	r3, [pc, #388]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e7e1      	b.n	8005676 <HAL_RCC_OscConfig+0xb6>
 80056b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e7d7      	b.n	8005676 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 80056c6:	f7fc fff7 	bl	80026b8 <HAL_GetTick>
 80056ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056cc:	4b55      	ldr	r3, [pc, #340]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80056d4:	d0a3      	beq.n	800561e <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d6:	f7fc ffef 	bl	80026b8 <HAL_GetTick>
 80056da:	1b40      	subs	r0, r0, r5
 80056dc:	2864      	cmp	r0, #100	@ 0x64
 80056de:	d9f5      	bls.n	80056cc <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80056e0:	2003      	movs	r0, #3
 80056e2:	e2b2      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80056e4:	f012 0f03 	tst.w	r2, #3
 80056e8:	d1a6      	bne.n	8005638 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ea:	4b4e      	ldr	r3, [pc, #312]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f013 0f04 	tst.w	r3, #4
 80056f2:	d003      	beq.n	80056fc <HAL_RCC_OscConfig+0x13c>
 80056f4:	68e3      	ldr	r3, [r4, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 82a2 	beq.w	8005c40 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056fc:	4a49      	ldr	r2, [pc, #292]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	f023 0319 	bic.w	r3, r3, #25
 8005704:	68e1      	ldr	r1, [r4, #12]
 8005706:	430b      	orrs	r3, r1
 8005708:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800570a:	f7fc ffd5 	bl	80026b8 <HAL_GetTick>
 800570e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005710:	4b44      	ldr	r3, [pc, #272]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f013 0f04 	tst.w	r3, #4
 8005718:	d106      	bne.n	8005728 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571a:	f7fc ffcd 	bl	80026b8 <HAL_GetTick>
 800571e:	1b40      	subs	r0, r0, r5
 8005720:	2802      	cmp	r0, #2
 8005722:	d9f5      	bls.n	8005710 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8005724:	2003      	movs	r0, #3
 8005726:	e290      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005728:	f7fc ffe0 	bl	80026ec <HAL_GetREVID>
 800572c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8005730:	4298      	cmp	r0, r3
 8005732:	d812      	bhi.n	800575a <HAL_RCC_OscConfig+0x19a>
 8005734:	6922      	ldr	r2, [r4, #16]
 8005736:	2a40      	cmp	r2, #64	@ 0x40
 8005738:	d007      	beq.n	800574a <HAL_RCC_OscConfig+0x18a>
 800573a:	493a      	ldr	r1, [pc, #232]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 800573c:	684b      	ldr	r3, [r1, #4]
 800573e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005742:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005746:	604b      	str	r3, [r1, #4]
 8005748:	e00f      	b.n	800576a <HAL_RCC_OscConfig+0x1aa>
 800574a:	4a36      	ldr	r2, [pc, #216]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 800574c:	6853      	ldr	r3, [r2, #4]
 800574e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005756:	6053      	str	r3, [r2, #4]
 8005758:	e007      	b.n	800576a <HAL_RCC_OscConfig+0x1aa>
 800575a:	4a32      	ldr	r2, [pc, #200]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 800575c:	6853      	ldr	r3, [r2, #4]
 800575e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005762:	6921      	ldr	r1, [r4, #16]
 8005764:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005768:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	f013 0f10 	tst.w	r3, #16
 8005770:	f000 8088 	beq.w	8005884 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005774:	4a2b      	ldr	r2, [pc, #172]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 8005776:	6913      	ldr	r3, [r2, #16]
 8005778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800577c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800577e:	2b08      	cmp	r3, #8
 8005780:	d056      	beq.n	8005830 <HAL_RCC_OscConfig+0x270>
 8005782:	2b18      	cmp	r3, #24
 8005784:	d050      	beq.n	8005828 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005786:	69e3      	ldr	r3, [r4, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80b8 	beq.w	80058fe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800578e:	4a25      	ldr	r2, [pc, #148]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 8005790:	6813      	ldr	r3, [r2, #0]
 8005792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fc ff8e 	bl	80026b8 <HAL_GetTick>
 800579c:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800579e:	4b21      	ldr	r3, [pc, #132]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80057a6:	f040 8088 	bne.w	80058ba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80057aa:	f7fc ff85 	bl	80026b8 <HAL_GetTick>
 80057ae:	1b40      	subs	r0, r0, r5
 80057b0:	2802      	cmp	r0, #2
 80057b2:	d9f4      	bls.n	800579e <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 80057b4:	2003      	movs	r0, #3
 80057b6:	e248      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b8:	f7fc ff98 	bl	80026ec <HAL_GetREVID>
 80057bc:	f241 0303 	movw	r3, #4099	@ 0x1003
 80057c0:	4298      	cmp	r0, r3
 80057c2:	d812      	bhi.n	80057ea <HAL_RCC_OscConfig+0x22a>
 80057c4:	6922      	ldr	r2, [r4, #16]
 80057c6:	2a40      	cmp	r2, #64	@ 0x40
 80057c8:	d007      	beq.n	80057da <HAL_RCC_OscConfig+0x21a>
 80057ca:	4916      	ldr	r1, [pc, #88]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80057cc:	684b      	ldr	r3, [r1, #4]
 80057ce:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80057d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80057d6:	604b      	str	r3, [r1, #4]
 80057d8:	e7c7      	b.n	800576a <HAL_RCC_OscConfig+0x1aa>
 80057da:	4a12      	ldr	r2, [pc, #72]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80057dc:	6853      	ldr	r3, [r2, #4]
 80057de:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e6:	6053      	str	r3, [r2, #4]
 80057e8:	e7bf      	b.n	800576a <HAL_RCC_OscConfig+0x1aa>
 80057ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80057ec:	6853      	ldr	r3, [r2, #4]
 80057ee:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80057f2:	6921      	ldr	r1, [r4, #16]
 80057f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80057f8:	6053      	str	r3, [r2, #4]
 80057fa:	e7b6      	b.n	800576a <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 80057fc:	4a09      	ldr	r2, [pc, #36]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 80057fe:	6813      	ldr	r3, [r2, #0]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005806:	f7fc ff57 	bl	80026b8 <HAL_GetTick>
 800580a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <HAL_RCC_OscConfig+0x264>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f013 0f04 	tst.w	r3, #4
 8005814:	d0a9      	beq.n	800576a <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005816:	f7fc ff4f 	bl	80026b8 <HAL_GetTick>
 800581a:	1b40      	subs	r0, r0, r5
 800581c:	2802      	cmp	r0, #2
 800581e:	d9f5      	bls.n	800580c <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8005820:	2003      	movs	r0, #3
 8005822:	e212      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005824:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005828:	f002 0203 	and.w	r2, r2, #3
 800582c:	2a01      	cmp	r2, #1
 800582e:	d1aa      	bne.n	8005786 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005830:	4ba1      	ldr	r3, [pc, #644]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005838:	d003      	beq.n	8005842 <HAL_RCC_OscConfig+0x282>
 800583a:	69e3      	ldr	r3, [r4, #28]
 800583c:	2b80      	cmp	r3, #128	@ 0x80
 800583e:	f040 8201 	bne.w	8005c44 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005842:	f7fc ff53 	bl	80026ec <HAL_GetREVID>
 8005846:	f241 0303 	movw	r3, #4099	@ 0x1003
 800584a:	4298      	cmp	r0, r3
 800584c:	d812      	bhi.n	8005874 <HAL_RCC_OscConfig+0x2b4>
 800584e:	6a22      	ldr	r2, [r4, #32]
 8005850:	2a20      	cmp	r2, #32
 8005852:	d007      	beq.n	8005864 <HAL_RCC_OscConfig+0x2a4>
 8005854:	4998      	ldr	r1, [pc, #608]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005856:	684b      	ldr	r3, [r1, #4]
 8005858:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800585c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8005860:	604b      	str	r3, [r1, #4]
 8005862:	e00f      	b.n	8005884 <HAL_RCC_OscConfig+0x2c4>
 8005864:	4a94      	ldr	r2, [pc, #592]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005866:	6853      	ldr	r3, [r2, #4]
 8005868:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800586c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005870:	6053      	str	r3, [r2, #4]
 8005872:	e007      	b.n	8005884 <HAL_RCC_OscConfig+0x2c4>
 8005874:	4a90      	ldr	r2, [pc, #576]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005876:	68d3      	ldr	r3, [r2, #12]
 8005878:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800587c:	6a21      	ldr	r1, [r4, #32]
 800587e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005882:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	f013 0f08 	tst.w	r3, #8
 800588a:	d060      	beq.n	800594e <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800588c:	6963      	ldr	r3, [r4, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d049      	beq.n	8005926 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005892:	4a89      	ldr	r2, [pc, #548]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005894:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589c:	f7fc ff0c 	bl	80026b8 <HAL_GetTick>
 80058a0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058a2:	4b85      	ldr	r3, [pc, #532]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 80058a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a6:	f013 0f02 	tst.w	r3, #2
 80058aa:	d150      	bne.n	800594e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ac:	f7fc ff04 	bl	80026b8 <HAL_GetTick>
 80058b0:	1b40      	subs	r0, r0, r5
 80058b2:	2802      	cmp	r0, #2
 80058b4:	d9f5      	bls.n	80058a2 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 80058b6:	2003      	movs	r0, #3
 80058b8:	e1c7      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058ba:	f7fc ff17 	bl	80026ec <HAL_GetREVID>
 80058be:	f241 0303 	movw	r3, #4099	@ 0x1003
 80058c2:	4298      	cmp	r0, r3
 80058c4:	d812      	bhi.n	80058ec <HAL_RCC_OscConfig+0x32c>
 80058c6:	6a22      	ldr	r2, [r4, #32]
 80058c8:	2a20      	cmp	r2, #32
 80058ca:	d007      	beq.n	80058dc <HAL_RCC_OscConfig+0x31c>
 80058cc:	497a      	ldr	r1, [pc, #488]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 80058ce:	684b      	ldr	r3, [r1, #4]
 80058d0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80058d4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80058d8:	604b      	str	r3, [r1, #4]
 80058da:	e7d3      	b.n	8005884 <HAL_RCC_OscConfig+0x2c4>
 80058dc:	4a76      	ldr	r2, [pc, #472]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 80058de:	6853      	ldr	r3, [r2, #4]
 80058e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80058e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058e8:	6053      	str	r3, [r2, #4]
 80058ea:	e7cb      	b.n	8005884 <HAL_RCC_OscConfig+0x2c4>
 80058ec:	4a72      	ldr	r2, [pc, #456]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 80058ee:	68d3      	ldr	r3, [r2, #12]
 80058f0:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80058f4:	6a21      	ldr	r1, [r4, #32]
 80058f6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80058fa:	60d3      	str	r3, [r2, #12]
 80058fc:	e7c2      	b.n	8005884 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 80058fe:	4a6e      	ldr	r2, [pc, #440]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005900:	6813      	ldr	r3, [r2, #0]
 8005902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005906:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005908:	f7fc fed6 	bl	80026b8 <HAL_GetTick>
 800590c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800590e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005916:	d0b5      	beq.n	8005884 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005918:	f7fc fece 	bl	80026b8 <HAL_GetTick>
 800591c:	1b40      	subs	r0, r0, r5
 800591e:	2802      	cmp	r0, #2
 8005920:	d9f5      	bls.n	800590e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8005922:	2003      	movs	r0, #3
 8005924:	e191      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005926:	4a64      	ldr	r2, [pc, #400]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005928:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fc fec2 	bl	80026b8 <HAL_GetTick>
 8005934:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005936:	4b60      	ldr	r3, [pc, #384]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800593a:	f013 0f02 	tst.w	r3, #2
 800593e:	d006      	beq.n	800594e <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005940:	f7fc feba 	bl	80026b8 <HAL_GetTick>
 8005944:	1b40      	subs	r0, r0, r5
 8005946:	2802      	cmp	r0, #2
 8005948:	d9f5      	bls.n	8005936 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800594a:	2003      	movs	r0, #3
 800594c:	e17d      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f013 0f20 	tst.w	r3, #32
 8005954:	d029      	beq.n	80059aa <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005956:	69a3      	ldr	r3, [r4, #24]
 8005958:	b19b      	cbz	r3, 8005982 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800595a:	4a57      	ldr	r2, [pc, #348]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 800595c:	6813      	ldr	r3, [r2, #0]
 800595e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005962:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005964:	f7fc fea8 	bl	80026b8 <HAL_GetTick>
 8005968:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800596a:	4b53      	ldr	r3, [pc, #332]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8005972:	d11a      	bne.n	80059aa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005974:	f7fc fea0 	bl	80026b8 <HAL_GetTick>
 8005978:	1b40      	subs	r0, r0, r5
 800597a:	2802      	cmp	r0, #2
 800597c:	d9f5      	bls.n	800596a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800597e:	2003      	movs	r0, #3
 8005980:	e163      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005982:	4a4d      	ldr	r2, [pc, #308]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005984:	6813      	ldr	r3, [r2, #0]
 8005986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800598a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800598c:	f7fc fe94 	bl	80026b8 <HAL_GetTick>
 8005990:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005992:	4b49      	ldr	r3, [pc, #292]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800599a:	d006      	beq.n	80059aa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800599c:	f7fc fe8c 	bl	80026b8 <HAL_GetTick>
 80059a0:	1b40      	subs	r0, r0, r5
 80059a2:	2802      	cmp	r0, #2
 80059a4:	d9f5      	bls.n	8005992 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80059a6:	2003      	movs	r0, #3
 80059a8:	e14f      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f013 0f04 	tst.w	r3, #4
 80059b0:	d121      	bne.n	80059f6 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8147 	beq.w	8005c48 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059ba:	4a3f      	ldr	r2, [pc, #252]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 80059bc:	6912      	ldr	r2, [r2, #16]
 80059be:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80059c2:	2a18      	cmp	r2, #24
 80059c4:	f000 80ee 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d079      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059cc:	4a3a      	ldr	r2, [pc, #232]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d6:	f7fc fe6f 	bl	80026b8 <HAL_GetTick>
 80059da:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059dc:	4b36      	ldr	r3, [pc, #216]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80059e4:	f000 80dc 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fc fe66 	bl	80026b8 <HAL_GetTick>
 80059ec:	1b00      	subs	r0, r0, r4
 80059ee:	2802      	cmp	r0, #2
 80059f0:	d9f4      	bls.n	80059dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059f2:	2003      	movs	r0, #3
 80059f4:	e129      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 80059f6:	4a31      	ldr	r2, [pc, #196]	@ (8005abc <HAL_RCC_OscConfig+0x4fc>)
 80059f8:	6813      	ldr	r3, [r2, #0]
 80059fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005a00:	f7fc fe5a 	bl	80026b8 <HAL_GetTick>
 8005a04:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a06:	4b2d      	ldr	r3, [pc, #180]	@ (8005abc <HAL_RCC_OscConfig+0x4fc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005a0e:	d106      	bne.n	8005a1e <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fc fe52 	bl	80026b8 <HAL_GetTick>
 8005a14:	1b40      	subs	r0, r0, r5
 8005a16:	2864      	cmp	r0, #100	@ 0x64
 8005a18:	d9f5      	bls.n	8005a06 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8005a1a:	2003      	movs	r0, #3
 8005a1c:	e115      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a1e:	68a3      	ldr	r3, [r4, #8]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCC_OscConfig+0x47a>
 8005a24:	bb0b      	cbnz	r3, 8005a6a <HAL_RCC_OscConfig+0x4aa>
 8005a26:	4b24      	ldr	r3, [pc, #144]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005a28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a38:	e004      	b.n	8005a44 <HAL_RCC_OscConfig+0x484>
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005a3c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a44:	68a3      	ldr	r3, [r4, #8]
 8005a46:	b333      	cbz	r3, 8005a96 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8005a48:	f7fc fe36 	bl	80026b8 <HAL_GetTick>
 8005a4c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a52:	f013 0f02 	tst.w	r3, #2
 8005a56:	d1ac      	bne.n	80059b2 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a58:	f7fc fe2e 	bl	80026b8 <HAL_GetTick>
 8005a5c:	1b40      	subs	r0, r0, r5
 8005a5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005a62:	4298      	cmp	r0, r3
 8005a64:	d9f3      	bls.n	8005a4e <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8005a66:	2003      	movs	r0, #3
 8005a68:	e0ef      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	d009      	beq.n	8005a82 <HAL_RCC_OscConfig+0x4c2>
 8005a6e:	4b12      	ldr	r3, [pc, #72]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005a70:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a7a:	f022 0204 	bic.w	r2, r2, #4
 8005a7e:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a80:	e7e0      	b.n	8005a44 <HAL_RCC_OscConfig+0x484>
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005a84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a86:	f042 0204 	orr.w	r2, r2, #4
 8005a8a:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	671a      	str	r2, [r3, #112]	@ 0x70
 8005a94:	e7d6      	b.n	8005a44 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8005a96:	f7fc fe0f 	bl	80026b8 <HAL_GetTick>
 8005a9a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <HAL_RCC_OscConfig+0x4f8>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa0:	f013 0f02 	tst.w	r3, #2
 8005aa4:	d085      	beq.n	80059b2 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa6:	f7fc fe07 	bl	80026b8 <HAL_GetTick>
 8005aaa:	1b40      	subs	r0, r0, r5
 8005aac:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ab0:	4298      	cmp	r0, r3
 8005ab2:	d9f3      	bls.n	8005a9c <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8005ab4:	2003      	movs	r0, #3
 8005ab6:	e0c8      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8005ac0:	4a69      	ldr	r2, [pc, #420]	@ (8005c68 <HAL_RCC_OscConfig+0x6a8>)
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ac8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005aca:	f7fc fdf5 	bl	80026b8 <HAL_GetTick>
 8005ace:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ad0:	4b65      	ldr	r3, [pc, #404]	@ (8005c68 <HAL_RCC_OscConfig+0x6a8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005ad8:	d006      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ada:	f7fc fded 	bl	80026b8 <HAL_GetTick>
 8005ade:	1b40      	subs	r0, r0, r5
 8005ae0:	2802      	cmp	r0, #2
 8005ae2:	d9f5      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8005ae4:	2003      	movs	r0, #3
 8005ae6:	e0b0      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ae8:	4b5f      	ldr	r3, [pc, #380]	@ (8005c68 <HAL_RCC_OscConfig+0x6a8>)
 8005aea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005aec:	4a5f      	ldr	r2, [pc, #380]	@ (8005c6c <HAL_RCC_OscConfig+0x6ac>)
 8005aee:	400a      	ands	r2, r1
 8005af0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005af2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005af4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8005af8:	430a      	orrs	r2, r1
 8005afa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005afc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005afe:	3a01      	subs	r2, #1
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b06:	3901      	subs	r1, #1
 8005b08:	0249      	lsls	r1, r1, #9
 8005b0a:	b289      	uxth	r1, r1
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b10:	3901      	subs	r1, #1
 8005b12:	0409      	lsls	r1, r1, #16
 8005b14:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005b1c:	3901      	subs	r1, #1
 8005b1e:	0609      	lsls	r1, r1, #24
 8005b20:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8005b24:	430a      	orrs	r2, r1
 8005b26:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b32:	f36f 02cf 	bfc	r2, #3, #13
 8005b36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b38:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005b3c:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b40:	f022 020c 	bic.w	r2, r2, #12
 8005b44:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005b46:	430a      	orrs	r2, r1
 8005b48:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4c:	f022 0202 	bic.w	r2, r2, #2
 8005b50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005b52:	430a      	orrs	r2, r1
 8005b54:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b60:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005b64:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b68:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8005b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b70:	f042 0201 	orr.w	r2, r2, #1
 8005b74:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005b7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b7e:	f7fc fd9b 	bl	80026b8 <HAL_GetTick>
 8005b82:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b84:	4b38      	ldr	r3, [pc, #224]	@ (8005c68 <HAL_RCC_OscConfig+0x6a8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005b8c:	d106      	bne.n	8005b9c <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fc fd93 	bl	80026b8 <HAL_GetTick>
 8005b92:	1b00      	subs	r0, r0, r4
 8005b94:	2802      	cmp	r0, #2
 8005b96:	d9f5      	bls.n	8005b84 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8005b98:	2003      	movs	r0, #3
 8005b9a:	e056      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e054      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e052      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ba4:	4a30      	ldr	r2, [pc, #192]	@ (8005c68 <HAL_RCC_OscConfig+0x6a8>)
 8005ba6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ba8:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d04e      	beq.n	8005c4c <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bae:	f001 0303 	and.w	r3, r1, #3
 8005bb2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d14b      	bne.n	8005c50 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bb8:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8005bbc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbe:	4299      	cmp	r1, r3
 8005bc0:	d148      	bne.n	8005c54 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bc2:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8005bc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005bc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d144      	bne.n	8005c58 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bce:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8005bd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bd4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d140      	bne.n	8005c5c <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bda:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8005bde:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005be0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d13c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005be6:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8005bea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005bec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bee:	4298      	cmp	r0, r3
 8005bf0:	d138      	bne.n	8005c64 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8005c68 <HAL_RCC_OscConfig+0x6a8>)
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005bfa:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 8005c00:	2000      	movs	r0, #0
 8005c02:	e022      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 8005c04:	4a18      	ldr	r2, [pc, #96]	@ (8005c68 <HAL_RCC_OscConfig+0x6a8>)
 8005c06:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8005c0e:	f7fc fd53 	bl	80026b8 <HAL_GetTick>
 8005c12:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005c14:	f7fc fd50 	bl	80026b8 <HAL_GetTick>
 8005c18:	42a8      	cmp	r0, r5
 8005c1a:	d0fb      	beq.n	8005c14 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c1c:	4a12      	ldr	r2, [pc, #72]	@ (8005c68 <HAL_RCC_OscConfig+0x6a8>)
 8005c1e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8005c20:	f36f 03cf 	bfc	r3, #3, #13
 8005c24:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005c26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c2a:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8005c2c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 8005c34:	2000      	movs	r0, #0
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 8005c38:	2001      	movs	r0, #1
}
 8005c3a:	4770      	bx	lr
        return HAL_ERROR;
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	e004      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8005c40:	2001      	movs	r0, #1
 8005c42:	e002      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8005c44:	2001      	movs	r0, #1
 8005c46:	e000      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 8005c48:	2000      	movs	r0, #0
}
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e7fc      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005c50:	2001      	movs	r0, #1
 8005c52:	e7fa      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005c54:	2001      	movs	r0, #1
 8005c56:	e7f8      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005c58:	2001      	movs	r0, #1
 8005c5a:	e7f6      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	e7f4      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005c60:	2001      	movs	r0, #1
 8005c62:	e7f2      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005c64:	2001      	movs	r0, #1
 8005c66:	e7f0      	b.n	8005c4a <HAL_RCC_OscConfig+0x68a>
 8005c68:	58024400 	.word	0x58024400
 8005c6c:	fffffc0c 	.word	0xfffffc0c

08005c70 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c70:	4b75      	ldr	r3, [pc, #468]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	f000 80de 	beq.w	8005e3a <HAL_RCC_GetSysClockFreq+0x1ca>
 8005c7e:	2b18      	cmp	r3, #24
 8005c80:	d00f      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x32>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 80db 	bne.w	8005e3e <HAL_RCC_GetSysClockFreq+0x1ce>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c88:	4b6f      	ldr	r3, [pc, #444]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f013 0f20 	tst.w	r3, #32
 8005c90:	f000 80d7 	beq.w	8005e42 <HAL_RCC_GetSysClockFreq+0x1d2>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c94:	4b6c      	ldr	r3, [pc, #432]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005c9c:	486b      	ldr	r0, [pc, #428]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8005c9e:	40d8      	lsrs	r0, r3
 8005ca0:	4770      	bx	lr
{
 8005ca2:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca4:	4b68      	ldr	r3, [pc, #416]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005ca6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ca8:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005cac:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005cae:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005cb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cb4:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cba:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 8005cca:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8005cce:	d077      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x150>
      {
        switch (pllsource)
 8005cd0:	2a01      	cmp	r2, #1
 8005cd2:	d04a      	beq.n	8005d6a <HAL_RCC_GetSysClockFreq+0xfa>
 8005cd4:	2a02      	cmp	r2, #2
 8005cd6:	d076      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x156>
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	f040 8091 	bne.w	8005e00 <HAL_RCC_GetSysClockFreq+0x190>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cde:	4b5a      	ldr	r3, [pc, #360]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f013 0f20 	tst.w	r3, #32
 8005ce6:	d023      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0xc0>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce8:	4957      	ldr	r1, [pc, #348]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005cea:	680a      	ldr	r2, [r1, #0]
 8005cec:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005cf0:	4b56      	ldr	r3, [pc, #344]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8005cf2:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf4:	ee07 3a10 	vmov	s14, r3
 8005cf8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005cfc:	ee07 0a10 	vmov	s14, r0
 8005d00:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8005d04:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8005d08:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee06 3a90 	vmov	s13, r3
 8005d12:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005d16:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x1e0>
 8005d1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d2e:	e038      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x132>
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d30:	ee07 0a10 	vmov	s14, r0
 8005d34:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005d38:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 8005e54 <HAL_RCC_GetSysClockFreq+0x1e4>
 8005d3c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005d40:	4b41      	ldr	r3, [pc, #260]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d48:	ee06 3a90 	vmov	s13, r3
 8005d4c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005d50:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x1e0>
 8005d54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d68:	e01b      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x132>
            }
            break;

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d6a:	ee07 0a10 	vmov	s14, r0
 8005d6e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005d72:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x1e8>
 8005d76:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005d7a:	4b33      	ldr	r3, [pc, #204]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d82:	ee06 3a90 	vmov	s13, r3
 8005d86:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005d8a:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x1e0>
 8005d8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9e:	ee27 7a27 	vmul.f32	s14, s14, s15

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005da2:	4b29      	ldr	r3, [pc, #164]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005daa:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005db8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8005dbc:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8005dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dc4:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc6:	ee07 0a10 	vmov	s14, r0
 8005dca:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005dce:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8005e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005dd2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee06 3a90 	vmov	s13, r3
 8005de2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005de6:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x1e0>
 8005dea:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8005dfe:	e7d0      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x132>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e00:	ee07 0a10 	vmov	s14, r0
 8005e04:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005e08:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005e58 <HAL_RCC_GetSysClockFreq+0x1e8>
 8005e0c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005e10:	4b0d      	ldr	r3, [pc, #52]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e18:	ee06 3a90 	vmov	s13, r3
 8005e1c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005e20:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8005e50 <HAL_RCC_GetSysClockFreq+0x1e0>
 8005e24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e34:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8005e38:	e7b3      	b.n	8005da2 <HAL_RCC_GetSysClockFreq+0x132>
      sysclockfreq = HSE_VALUE;
 8005e3a:	4809      	ldr	r0, [pc, #36]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005e3c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e3e:	4809      	ldr	r0, [pc, #36]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005e40:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e42:	4802      	ldr	r0, [pc, #8]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	03d09000 	.word	0x03d09000
 8005e50:	39000000 	.word	0x39000000
 8005e54:	4c742400 	.word	0x4c742400
 8005e58:	4a742400 	.word	0x4a742400
 8005e5c:	4bbebc20 	.word	0x4bbebc20
 8005e60:	017d7840 	.word	0x017d7840
 8005e64:	003d0900 	.word	0x003d0900

08005e68 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f000 8132 	beq.w	80060d2 <HAL_RCC_ClockConfig+0x26a>
{
 8005e6e:	b570      	push	{r4, r5, r6, lr}
 8005e70:	460d      	mov	r5, r1
 8005e72:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e74:	4b9b      	ldr	r3, [pc, #620]	@ (80060e4 <HAL_RCC_ClockConfig+0x27c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	428b      	cmp	r3, r1
 8005e7e:	d20b      	bcs.n	8005e98 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e80:	4a98      	ldr	r2, [pc, #608]	@ (80060e4 <HAL_RCC_ClockConfig+0x27c>)
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	f023 030f 	bic.w	r3, r3, #15
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8c:	6813      	ldr	r3, [r2, #0]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	428b      	cmp	r3, r1
 8005e94:	f040 811f 	bne.w	80060d6 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	f013 0f04 	tst.w	r3, #4
 8005e9e:	d00c      	beq.n	8005eba <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ea0:	6922      	ldr	r2, [r4, #16]
 8005ea2:	4b91      	ldr	r3, [pc, #580]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d905      	bls.n	8005eba <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005eae:	498e      	ldr	r1, [pc, #568]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005eb0:	698b      	ldr	r3, [r1, #24]
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f013 0f08 	tst.w	r3, #8
 8005ec0:	d00c      	beq.n	8005edc <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ec2:	6962      	ldr	r2, [r4, #20]
 8005ec4:	4b88      	ldr	r3, [pc, #544]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d905      	bls.n	8005edc <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ed0:	4985      	ldr	r1, [pc, #532]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005ed2:	69cb      	ldr	r3, [r1, #28]
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	f013 0f10 	tst.w	r3, #16
 8005ee2:	d00c      	beq.n	8005efe <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ee4:	69a2      	ldr	r2, [r4, #24]
 8005ee6:	4b80      	ldr	r3, [pc, #512]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d905      	bls.n	8005efe <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ef2:	497d      	ldr	r1, [pc, #500]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005ef4:	69cb      	ldr	r3, [r1, #28]
 8005ef6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005efa:	431a      	orrs	r2, r3
 8005efc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	f013 0f20 	tst.w	r3, #32
 8005f04:	d00c      	beq.n	8005f20 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f06:	69e2      	ldr	r2, [r4, #28]
 8005f08:	4b77      	ldr	r3, [pc, #476]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d905      	bls.n	8005f20 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f14:	4974      	ldr	r1, [pc, #464]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005f16:	6a0b      	ldr	r3, [r1, #32]
 8005f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	f013 0f02 	tst.w	r3, #2
 8005f26:	d00c      	beq.n	8005f42 <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f28:	68e2      	ldr	r2, [r4, #12]
 8005f2a:	4b6f      	ldr	r3, [pc, #444]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d905      	bls.n	8005f42 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f36:	496c      	ldr	r1, [pc, #432]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005f38:	698b      	ldr	r3, [r1, #24]
 8005f3a:	f023 030f 	bic.w	r3, r3, #15
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	f013 0f01 	tst.w	r3, #1
 8005f48:	d041      	beq.n	8005fce <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f4a:	4a67      	ldr	r2, [pc, #412]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005f4c:	6993      	ldr	r3, [r2, #24]
 8005f4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f52:	68a1      	ldr	r1, [r4, #8]
 8005f54:	430b      	orrs	r3, r1
 8005f56:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f58:	6863      	ldr	r3, [r4, #4]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d027      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d02c      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f66:	4a60      	ldr	r2, [pc, #384]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	f012 0f04 	tst.w	r2, #4
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8005f70:	2001      	movs	r0, #1
 8005f72:	e0ad      	b.n	80060d0 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005f7a:	f000 80ae 	beq.w	80060da <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f7e:	495a      	ldr	r1, [pc, #360]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005f80:	690a      	ldr	r2, [r1, #16]
 8005f82:	f022 0207 	bic.w	r2, r2, #7
 8005f86:	4313      	orrs	r3, r2
 8005f88:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8005f8a:	f7fc fb95 	bl	80026b8 <HAL_GetTick>
 8005f8e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f90:	4b55      	ldr	r3, [pc, #340]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f98:	6862      	ldr	r2, [r4, #4]
 8005f9a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005f9e:	d016      	beq.n	8005fce <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa0:	f7fc fb8a 	bl	80026b8 <HAL_GetTick>
 8005fa4:	1b80      	subs	r0, r0, r6
 8005fa6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005faa:	4298      	cmp	r0, r3
 8005fac:	d9f0      	bls.n	8005f90 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8005fae:	2003      	movs	r0, #3
 8005fb0:	e08e      	b.n	80060d0 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fb2:	4a4d      	ldr	r2, [pc, #308]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005fba:	d1e0      	bne.n	8005f7e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	e087      	b.n	80060d0 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fc0:	4a49      	ldr	r2, [pc, #292]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005fc8:	d1d9      	bne.n	8005f7e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8005fca:	2001      	movs	r0, #1
 8005fcc:	e080      	b.n	80060d0 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	f013 0f02 	tst.w	r3, #2
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fd6:	68e2      	ldr	r2, [r4, #12]
 8005fd8:	4b43      	ldr	r3, [pc, #268]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d205      	bcs.n	8005ff0 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe4:	4940      	ldr	r1, [pc, #256]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8005fe6:	698b      	ldr	r3, [r1, #24]
 8005fe8:	f023 030f 	bic.w	r3, r3, #15
 8005fec:	431a      	orrs	r2, r3
 8005fee:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80060e4 <HAL_RCC_ClockConfig+0x27c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	42ab      	cmp	r3, r5
 8005ffa:	d90a      	bls.n	8006012 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffc:	4a39      	ldr	r2, [pc, #228]	@ (80060e4 <HAL_RCC_ClockConfig+0x27c>)
 8005ffe:	6813      	ldr	r3, [r2, #0]
 8006000:	f023 030f 	bic.w	r3, r3, #15
 8006004:	432b      	orrs	r3, r5
 8006006:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006008:	6813      	ldr	r3, [r2, #0]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	42ab      	cmp	r3, r5
 8006010:	d165      	bne.n	80060de <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	f013 0f04 	tst.w	r3, #4
 8006018:	d00c      	beq.n	8006034 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800601a:	6922      	ldr	r2, [r4, #16]
 800601c:	4b32      	ldr	r3, [pc, #200]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006024:	429a      	cmp	r2, r3
 8006026:	d205      	bcs.n	8006034 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006028:	492f      	ldr	r1, [pc, #188]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 800602a:	698b      	ldr	r3, [r1, #24]
 800602c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006030:	431a      	orrs	r2, r3
 8006032:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	f013 0f08 	tst.w	r3, #8
 800603a:	d00c      	beq.n	8006056 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800603c:	6962      	ldr	r2, [r4, #20]
 800603e:	4b2a      	ldr	r3, [pc, #168]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006046:	429a      	cmp	r2, r3
 8006048:	d205      	bcs.n	8006056 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800604a:	4927      	ldr	r1, [pc, #156]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 800604c:	69cb      	ldr	r3, [r1, #28]
 800604e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006052:	431a      	orrs	r2, r3
 8006054:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f013 0f10 	tst.w	r3, #16
 800605c:	d00c      	beq.n	8006078 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800605e:	69a2      	ldr	r2, [r4, #24]
 8006060:	4b21      	ldr	r3, [pc, #132]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006068:	429a      	cmp	r2, r3
 800606a:	d205      	bcs.n	8006078 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800606c:	491e      	ldr	r1, [pc, #120]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 800606e:	69cb      	ldr	r3, [r1, #28]
 8006070:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006074:	431a      	orrs	r2, r3
 8006076:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	f013 0f20 	tst.w	r3, #32
 800607e:	d00c      	beq.n	800609a <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006080:	69e2      	ldr	r2, [r4, #28]
 8006082:	4b19      	ldr	r3, [pc, #100]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800608a:	429a      	cmp	r2, r3
 800608c:	d205      	bcs.n	800609a <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800608e:	4916      	ldr	r1, [pc, #88]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 8006090:	6a0b      	ldr	r3, [r1, #32]
 8006092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006096:	431a      	orrs	r2, r3
 8006098:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800609a:	f7ff fde9 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 800609e:	4912      	ldr	r1, [pc, #72]	@ (80060e8 <HAL_RCC_ClockConfig+0x280>)
 80060a0:	698b      	ldr	r3, [r1, #24]
 80060a2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80060a6:	4a11      	ldr	r2, [pc, #68]	@ (80060ec <HAL_RCC_ClockConfig+0x284>)
 80060a8:	5cd3      	ldrb	r3, [r2, r3]
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060b0:	698b      	ldr	r3, [r1, #24]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	5cd3      	ldrb	r3, [r2, r3]
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	fa20 f303 	lsr.w	r3, r0, r3
 80060c0:	4a0b      	ldr	r2, [pc, #44]	@ (80060f0 <HAL_RCC_ClockConfig+0x288>)
 80060c2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80060c4:	4b0b      	ldr	r3, [pc, #44]	@ (80060f4 <HAL_RCC_ClockConfig+0x28c>)
 80060c6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80060c8:	4b0b      	ldr	r3, [pc, #44]	@ (80060f8 <HAL_RCC_ClockConfig+0x290>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	f7fc fa92 	bl	80025f4 <HAL_InitTick>
}
 80060d0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80060d2:	2001      	movs	r0, #1
}
 80060d4:	4770      	bx	lr
      return HAL_ERROR;
 80060d6:	2001      	movs	r0, #1
 80060d8:	e7fa      	b.n	80060d0 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 80060da:	2001      	movs	r0, #1
 80060dc:	e7f8      	b.n	80060d0 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80060de:	2001      	movs	r0, #1
 80060e0:	e7f6      	b.n	80060d0 <HAL_RCC_ClockConfig+0x268>
 80060e2:	bf00      	nop
 80060e4:	52002000 	.word	0x52002000
 80060e8:	58024400 	.word	0x58024400
 80060ec:	0800e3b0 	.word	0x0800e3b0
 80060f0:	24000024 	.word	0x24000024
 80060f4:	24000028 	.word	0x24000028
 80060f8:	24000030 	.word	0x24000030

080060fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060fc:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060fe:	f7ff fdb7 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8006102:	4a0b      	ldr	r2, [pc, #44]	@ (8006130 <HAL_RCC_GetHCLKFreq+0x34>)
 8006104:	6993      	ldr	r3, [r2, #24]
 8006106:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800610a:	490a      	ldr	r1, [pc, #40]	@ (8006134 <HAL_RCC_GetHCLKFreq+0x38>)
 800610c:	5ccb      	ldrb	r3, [r1, r3]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006116:	6992      	ldr	r2, [r2, #24]
 8006118:	f002 020f 	and.w	r2, r2, #15
 800611c:	5c88      	ldrb	r0, [r1, r2]
 800611e:	f000 001f 	and.w	r0, r0, #31
 8006122:	fa23 f000 	lsr.w	r0, r3, r0
 8006126:	4a04      	ldr	r2, [pc, #16]	@ (8006138 <HAL_RCC_GetHCLKFreq+0x3c>)
 8006128:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800612a:	4a04      	ldr	r2, [pc, #16]	@ (800613c <HAL_RCC_GetHCLKFreq+0x40>)
 800612c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800612e:	bd08      	pop	{r3, pc}
 8006130:	58024400 	.word	0x58024400
 8006134:	0800e3b0 	.word	0x0800e3b0
 8006138:	24000024 	.word	0x24000024
 800613c:	24000028 	.word	0x24000028

08006140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006140:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006142:	f7ff ffdb 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8006146:	4b05      	ldr	r3, [pc, #20]	@ (800615c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800614e:	4a04      	ldr	r2, [pc, #16]	@ (8006160 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006150:	5cd3      	ldrb	r3, [r2, r3]
 8006152:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006156:	40d8      	lsrs	r0, r3
 8006158:	bd08      	pop	{r3, pc}
 800615a:	bf00      	nop
 800615c:	58024400 	.word	0x58024400
 8006160:	0800e3b0 	.word	0x0800e3b0

08006164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006164:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006166:	f7ff ffc9 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 800616a:	4b05      	ldr	r3, [pc, #20]	@ (8006180 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006172:	4a04      	ldr	r2, [pc, #16]	@ (8006184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006174:	5cd3      	ldrb	r3, [r2, r3]
 8006176:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800617a:	40d8      	lsrs	r0, r3
 800617c:	bd08      	pop	{r3, pc}
 800617e:	bf00      	nop
 8006180:	58024400 	.word	0x58024400
 8006184:	0800e3b0 	.word	0x0800e3b0

08006188 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006188:	4b40      	ldr	r3, [pc, #256]	@ (800628c <RCCEx_PLL2_Config+0x104>)
 800618a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b03      	cmp	r3, #3
 8006192:	d079      	beq.n	8006288 <RCCEx_PLL2_Config+0x100>
{
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4605      	mov	r5, r0
 8006198:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800619a:	4a3c      	ldr	r2, [pc, #240]	@ (800628c <RCCEx_PLL2_Config+0x104>)
 800619c:	6813      	ldr	r3, [r2, #0]
 800619e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a4:	f7fc fa88 	bl	80026b8 <HAL_GetTick>
 80061a8:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061aa:	4b38      	ldr	r3, [pc, #224]	@ (800628c <RCCEx_PLL2_Config+0x104>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80061b2:	d006      	beq.n	80061c2 <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061b4:	f7fc fa80 	bl	80026b8 <HAL_GetTick>
 80061b8:	1b03      	subs	r3, r0, r4
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d9f5      	bls.n	80061aa <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 80061be:	2003      	movs	r0, #3

  }


  return status;
}
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061c2:	4b32      	ldr	r3, [pc, #200]	@ (800628c <RCCEx_PLL2_Config+0x104>)
 80061c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061c6:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 80061ca:	6829      	ldr	r1, [r5, #0]
 80061cc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80061d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80061d2:	686a      	ldr	r2, [r5, #4]
 80061d4:	3a01      	subs	r2, #1
 80061d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061da:	68a9      	ldr	r1, [r5, #8]
 80061dc:	3901      	subs	r1, #1
 80061de:	0249      	lsls	r1, r1, #9
 80061e0:	b289      	uxth	r1, r1
 80061e2:	430a      	orrs	r2, r1
 80061e4:	68e9      	ldr	r1, [r5, #12]
 80061e6:	3901      	subs	r1, #1
 80061e8:	0409      	lsls	r1, r1, #16
 80061ea:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80061ee:	430a      	orrs	r2, r1
 80061f0:	6929      	ldr	r1, [r5, #16]
 80061f2:	3901      	subs	r1, #1
 80061f4:	0609      	lsls	r1, r1, #24
 80061f6:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80061fa:	430a      	orrs	r2, r1
 80061fc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006200:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8006204:	6969      	ldr	r1, [r5, #20]
 8006206:	430a      	orrs	r2, r1
 8006208:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800620a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620c:	f022 0220 	bic.w	r2, r2, #32
 8006210:	69a9      	ldr	r1, [r5, #24]
 8006212:	430a      	orrs	r2, r1
 8006214:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006218:	f022 0210 	bic.w	r2, r2, #16
 800621c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800621e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006220:	f36f 02cf 	bfc	r2, #3, #13
 8006224:	69e9      	ldr	r1, [r5, #28]
 8006226:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800622a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800622c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622e:	f042 0210 	orr.w	r2, r2, #16
 8006232:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006234:	b9c6      	cbnz	r6, 8006268 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006236:	461a      	mov	r2, r3
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800623e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8006240:	4a12      	ldr	r2, [pc, #72]	@ (800628c <RCCEx_PLL2_Config+0x104>)
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006248:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800624a:	f7fc fa35 	bl	80026b8 <HAL_GetTick>
 800624e:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006250:	4b0e      	ldr	r3, [pc, #56]	@ (800628c <RCCEx_PLL2_Config+0x104>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8006258:	d114      	bne.n	8006284 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800625a:	f7fc fa2d 	bl	80026b8 <HAL_GetTick>
 800625e:	1b00      	subs	r0, r0, r4
 8006260:	2802      	cmp	r0, #2
 8006262:	d9f5      	bls.n	8006250 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8006264:	2003      	movs	r0, #3
 8006266:	e7ab      	b.n	80061c0 <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8006268:	2e01      	cmp	r6, #1
 800626a:	d005      	beq.n	8006278 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800626c:	4a07      	ldr	r2, [pc, #28]	@ (800628c <RCCEx_PLL2_Config+0x104>)
 800626e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006274:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006276:	e7e3      	b.n	8006240 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006278:	4a04      	ldr	r2, [pc, #16]	@ (800628c <RCCEx_PLL2_Config+0x104>)
 800627a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800627c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006280:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006282:	e7dd      	b.n	8006240 <RCCEx_PLL2_Config+0xb8>
  return status;
 8006284:	2000      	movs	r0, #0
 8006286:	e79b      	b.n	80061c0 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8006288:	2001      	movs	r0, #1
}
 800628a:	4770      	bx	lr
 800628c:	58024400 	.word	0x58024400

08006290 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006290:	4b40      	ldr	r3, [pc, #256]	@ (8006394 <RCCEx_PLL3_Config+0x104>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	2b03      	cmp	r3, #3
 800629a:	d079      	beq.n	8006390 <RCCEx_PLL3_Config+0x100>
{
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4605      	mov	r5, r0
 80062a0:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062a2:	4a3c      	ldr	r2, [pc, #240]	@ (8006394 <RCCEx_PLL3_Config+0x104>)
 80062a4:	6813      	ldr	r3, [r2, #0]
 80062a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ac:	f7fc fa04 	bl	80026b8 <HAL_GetTick>
 80062b0:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062b2:	4b38      	ldr	r3, [pc, #224]	@ (8006394 <RCCEx_PLL3_Config+0x104>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80062ba:	d006      	beq.n	80062ca <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062bc:	f7fc f9fc 	bl	80026b8 <HAL_GetTick>
 80062c0:	1b03      	subs	r3, r0, r4
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d9f5      	bls.n	80062b2 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 80062c6:	2003      	movs	r0, #3

  }


  return status;
}
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062ca:	4b32      	ldr	r3, [pc, #200]	@ (8006394 <RCCEx_PLL3_Config+0x104>)
 80062cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062ce:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 80062d2:	6829      	ldr	r1, [r5, #0]
 80062d4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80062d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80062da:	686a      	ldr	r2, [r5, #4]
 80062dc:	3a01      	subs	r2, #1
 80062de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e2:	68a9      	ldr	r1, [r5, #8]
 80062e4:	3901      	subs	r1, #1
 80062e6:	0249      	lsls	r1, r1, #9
 80062e8:	b289      	uxth	r1, r1
 80062ea:	430a      	orrs	r2, r1
 80062ec:	68e9      	ldr	r1, [r5, #12]
 80062ee:	3901      	subs	r1, #1
 80062f0:	0409      	lsls	r1, r1, #16
 80062f2:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80062f6:	430a      	orrs	r2, r1
 80062f8:	6929      	ldr	r1, [r5, #16]
 80062fa:	3901      	subs	r1, #1
 80062fc:	0609      	lsls	r1, r1, #24
 80062fe:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8006302:	430a      	orrs	r2, r1
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800630c:	6969      	ldr	r1, [r5, #20]
 800630e:	430a      	orrs	r2, r1
 8006310:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006314:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006318:	69a9      	ldr	r1, [r5, #24]
 800631a:	430a      	orrs	r2, r1
 800631c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800631e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006324:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006326:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006328:	f36f 02cf 	bfc	r2, #3, #13
 800632c:	69e9      	ldr	r1, [r5, #28]
 800632e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006332:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800633a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800633c:	b9c6      	cbnz	r6, 8006370 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800633e:	461a      	mov	r2, r3
 8006340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006342:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006346:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8006348:	4a12      	ldr	r2, [pc, #72]	@ (8006394 <RCCEx_PLL3_Config+0x104>)
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006350:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006352:	f7fc f9b1 	bl	80026b8 <HAL_GetTick>
 8006356:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006358:	4b0e      	ldr	r3, [pc, #56]	@ (8006394 <RCCEx_PLL3_Config+0x104>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8006360:	d114      	bne.n	800638c <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006362:	f7fc f9a9 	bl	80026b8 <HAL_GetTick>
 8006366:	1b00      	subs	r0, r0, r4
 8006368:	2802      	cmp	r0, #2
 800636a:	d9f5      	bls.n	8006358 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800636c:	2003      	movs	r0, #3
 800636e:	e7ab      	b.n	80062c8 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8006370:	2e01      	cmp	r6, #1
 8006372:	d005      	beq.n	8006380 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006374:	4a07      	ldr	r2, [pc, #28]	@ (8006394 <RCCEx_PLL3_Config+0x104>)
 8006376:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006378:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800637c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800637e:	e7e3      	b.n	8006348 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006380:	4a04      	ldr	r2, [pc, #16]	@ (8006394 <RCCEx_PLL3_Config+0x104>)
 8006382:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006388:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800638a:	e7dd      	b.n	8006348 <RCCEx_PLL3_Config+0xb8>
  return status;
 800638c:	2000      	movs	r0, #0
 800638e:	e79b      	b.n	80062c8 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8006390:	2001      	movs	r0, #1
}
 8006392:	4770      	bx	lr
 8006394:	58024400 	.word	0x58024400

08006398 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800639c:	6803      	ldr	r3, [r0, #0]
 800639e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80063a2:	d030      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80063a4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80063a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063aa:	d026      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x62>
 80063ac:	d80e      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80063ae:	b1ab      	cbz	r3, 80063dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80063b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063b4:	d107      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063b6:	2102      	movs	r1, #2
 80063b8:	3008      	adds	r0, #8
 80063ba:	f7ff fee5 	bl	8006188 <RCCEx_PLL2_Config>
 80063be:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80063c0:	b195      	cbz	r5, 80063e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      status = ret;
 80063c2:	462e      	mov	r6, r5
 80063c4:	e021      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80063c6:	2601      	movs	r6, #1
 80063c8:	4635      	mov	r5, r6
 80063ca:	e01e      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80063cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063d0:	d101      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80063d2:	2500      	movs	r5, #0
 80063d4:	e008      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80063d6:	2601      	movs	r6, #1
 80063d8:	4635      	mov	r5, r6
 80063da:	e016      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063dc:	4a98      	ldr	r2, [pc, #608]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80063de:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80063e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063e6:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80063e8:	4a95      	ldr	r2, [pc, #596]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80063ea:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80063ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063f0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80063f2:	430b      	orrs	r3, r1
 80063f4:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063f6:	2600      	movs	r6, #0
 80063f8:	e007      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063fa:	2102      	movs	r1, #2
 80063fc:	3028      	adds	r0, #40	@ 0x28
 80063fe:	f7ff ff47 	bl	8006290 <RCCEx_PLL3_Config>
 8006402:	4605      	mov	r5, r0
        break;
 8006404:	e7dc      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006406:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006408:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006410:	d014      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006412:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006414:	2b04      	cmp	r3, #4
 8006416:	d831      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8006418:	e8df f003 	tbb	[pc, r3]
 800641c:	08292203 	.word	0x08292203
 8006420:	08          	.byte	0x08
 8006421:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006422:	4a87      	ldr	r2, [pc, #540]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006424:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800642c:	bb4d      	cbnz	r5, 8006482 <HAL_RCCEx_PeriphCLKConfig+0xea>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800642e:	4a84      	ldr	r2, [pc, #528]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006430:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006438:	430b      	orrs	r3, r1
 800643a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006442:	d038      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai23ClockSelection)
 8006444:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006446:	2b80      	cmp	r3, #128	@ 0x80
 8006448:	d04a      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800644a:	d81f      	bhi.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800644c:	b333      	cbz	r3, 800649c <HAL_RCCEx_PeriphCLKConfig+0x104>
 800644e:	2b40      	cmp	r3, #64	@ 0x40
 8006450:	d119      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006452:	2100      	movs	r1, #0
 8006454:	f104 0008 	add.w	r0, r4, #8
 8006458:	f7ff fe96 	bl	8006188 <RCCEx_PLL2_Config>
 800645c:	4605      	mov	r5, r0
        break;
 800645e:	e022      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006460:	2100      	movs	r1, #0
 8006462:	f104 0008 	add.w	r0, r4, #8
 8006466:	f7ff fe8f 	bl	8006188 <RCCEx_PLL2_Config>
 800646a:	4605      	mov	r5, r0
        break;
 800646c:	e7de      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800646e:	2100      	movs	r1, #0
 8006470:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006474:	f7ff ff0c 	bl	8006290 <RCCEx_PLL3_Config>
 8006478:	4605      	mov	r5, r0
        break;
 800647a:	e7d7      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 800647c:	2601      	movs	r6, #1
 800647e:	4635      	mov	r5, r6
 8006480:	e7dc      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      status = ret;
 8006482:	462e      	mov	r6, r5
 8006484:	e7da      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8006486:	2601      	movs	r6, #1
 8006488:	4635      	mov	r5, r6
 800648a:	e014      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800648c:	2bc0      	cmp	r3, #192	@ 0xc0
 800648e:	d00a      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8006490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006494:	d007      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8006496:	2601      	movs	r6, #1
 8006498:	4635      	mov	r5, r6
 800649a:	e00c      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800649c:	4a68      	ldr	r2, [pc, #416]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800649e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80064a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80064a6:	bb15      	cbnz	r5, 80064ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80064a8:	4a65      	ldr	r2, [pc, #404]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80064aa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80064ac:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 80064b0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80064bc:	d03c      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch (PeriphClkInit->Sai4AClockSelection)
 80064be:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 80064c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064c6:	d02f      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80064c8:	d816      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80064ca:	b1f3      	cbz	r3, 800650a <HAL_RCCEx_PeriphCLKConfig+0x172>
 80064cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064d0:	d10f      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064d2:	2100      	movs	r1, #0
 80064d4:	f104 0008 	add.w	r0, r4, #8
 80064d8:	f7ff fe56 	bl	8006188 <RCCEx_PLL2_Config>
 80064dc:	4605      	mov	r5, r0
        break;
 80064de:	e019      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064e0:	2100      	movs	r1, #0
 80064e2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80064e6:	f7ff fed3 	bl	8006290 <RCCEx_PLL3_Config>
 80064ea:	4605      	mov	r5, r0
        break;
 80064ec:	e7db      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      status = ret;
 80064ee:	462e      	mov	r6, r5
 80064f0:	e7e1      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 80064f2:	2601      	movs	r6, #1
 80064f4:	4635      	mov	r5, r6
 80064f6:	e01f      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80064f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80064fc:	d00a      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80064fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006502:	d007      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006504:	2601      	movs	r6, #1
 8006506:	4635      	mov	r5, r6
 8006508:	e016      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650a:	4a4d      	ldr	r2, [pc, #308]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800650c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800650e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006512:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006514:	b97d      	cbnz	r5, 8006536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006516:	4a4a      	ldr	r2, [pc, #296]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006518:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800651a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800651e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8006522:	430b      	orrs	r3, r1
 8006524:	6593      	str	r3, [r2, #88]	@ 0x58
 8006526:	e007      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006528:	2100      	movs	r1, #0
 800652a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800652e:	f7ff feaf 	bl	8006290 <RCCEx_PLL3_Config>
 8006532:	4605      	mov	r5, r0
        break;
 8006534:	e7ee      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      status = ret;
 8006536:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800653e:	d02b      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Sai4BClockSelection)
 8006540:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8006544:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006548:	d053      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800654a:	d80d      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800654c:	b1ab      	cbz	r3, 800657a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800654e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006552:	d106      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006554:	2100      	movs	r1, #0
 8006556:	f104 0008 	add.w	r0, r4, #8
 800655a:	f7ff fe15 	bl	8006188 <RCCEx_PLL2_Config>
 800655e:	4605      	mov	r5, r0
        break;
 8006560:	e010      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch (PeriphClkInit->Sai4BClockSelection)
 8006562:	2601      	movs	r6, #1
 8006564:	4635      	mov	r5, r6
 8006566:	e017      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006568:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800656c:	d00a      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800656e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006572:	d007      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8006574:	2601      	movs	r6, #1
 8006576:	4635      	mov	r5, r6
 8006578:	e00e      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x200>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657a:	4a31      	ldr	r2, [pc, #196]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800657c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800657e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006582:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006584:	2d00      	cmp	r5, #0
 8006586:	d13b      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006588:	4a2d      	ldr	r2, [pc, #180]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800658a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800658c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006590:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8006594:	430b      	orrs	r3, r1
 8006596:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800659e:	d013      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
    switch (PeriphClkInit->QspiClockSelection)
 80065a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d036      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80065a6:	d830      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80065a8:	b133      	cbz	r3, 80065b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80065aa:	2b10      	cmp	r3, #16
 80065ac:	d12a      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ae:	4a24      	ldr	r2, [pc, #144]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80065b0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80065b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80065b8:	bb9d      	cbnz	r5, 8006622 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065ba:	4a21      	ldr	r2, [pc, #132]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80065bc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80065be:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80065c2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80065c4:	430b      	orrs	r3, r1
 80065c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80065ce:	d047      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    switch (PeriphClkInit->Spi123ClockSelection)
 80065d0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d6:	f000 808d 	beq.w	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80065da:	d827      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x294>
 80065dc:	b393      	cbz	r3, 8006644 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80065de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e2:	d120      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x28e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065e4:	2100      	movs	r1, #0
 80065e6:	f104 0008 	add.w	r0, r4, #8
 80065ea:	f7ff fdcd 	bl	8006188 <RCCEx_PLL2_Config>
 80065ee:	4605      	mov	r5, r0
        break;
 80065f0:	e02d      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065f2:	2100      	movs	r1, #0
 80065f4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80065f8:	f7ff fe4a 	bl	8006290 <RCCEx_PLL3_Config>
 80065fc:	4605      	mov	r5, r0
        break;
 80065fe:	e7c1      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8006600:	462e      	mov	r6, r5
 8006602:	e7c9      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->QspiClockSelection)
 8006604:	2601      	movs	r6, #1
 8006606:	4635      	mov	r5, r6
 8006608:	e7de      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800660a:	2b30      	cmp	r3, #48	@ 0x30
 800660c:	d0d4      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800660e:	2601      	movs	r6, #1
 8006610:	4635      	mov	r5, r6
 8006612:	e7d9      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006614:	2102      	movs	r1, #2
 8006616:	f104 0008 	add.w	r0, r4, #8
 800661a:	f7ff fdb5 	bl	8006188 <RCCEx_PLL2_Config>
 800661e:	4605      	mov	r5, r0
        break;
 8006620:	e7ca      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      status = ret;
 8006622:	462e      	mov	r6, r5
 8006624:	e7d0      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006626:	2601      	movs	r6, #1
 8006628:	4635      	mov	r5, r6
 800662a:	e019      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800662c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006630:	d00d      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006636:	d00a      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006638:	2601      	movs	r6, #1
 800663a:	4635      	mov	r5, r6
 800663c:	e010      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800663e:	bf00      	nop
 8006640:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006644:	4a77      	ldr	r2, [pc, #476]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8006646:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800664c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800664e:	2d00      	cmp	r5, #0
 8006650:	d157      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006652:	4a74      	ldr	r2, [pc, #464]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8006654:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800665a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800665c:	430b      	orrs	r3, r1
 800665e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006666:	d017      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006668:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800666a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800666e:	d059      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006670:	d84c      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006672:	b143      	cbz	r3, 8006686 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006678:	d145      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800667a:	2101      	movs	r1, #1
 800667c:	f104 0008 	add.w	r0, r4, #8
 8006680:	f7ff fd82 	bl	8006188 <RCCEx_PLL2_Config>
 8006684:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006686:	2d00      	cmp	r5, #0
 8006688:	d153      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800668a:	4a66      	ldr	r2, [pc, #408]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800668c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800668e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006692:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8006694:	430b      	orrs	r3, r1
 8006696:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800669e:	d019      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi6ClockSelection)
 80066a0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a8:	d054      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80066aa:	d847      	bhi.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80066ac:	b143      	cbz	r3, 80066c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80066ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b2:	d140      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b4:	2101      	movs	r1, #1
 80066b6:	f104 0008 	add.w	r0, r4, #8
 80066ba:	f7ff fd65 	bl	8006188 <RCCEx_PLL2_Config>
 80066be:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	d14e      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066c4:	4a57      	ldr	r2, [pc, #348]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80066c6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80066c8:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80066cc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80066da:	d051      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch (PeriphClkInit->FdcanClockSelection)
 80066dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80066de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e2:	d040      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80066e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066e8:	d055      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d040      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 80066ee:	2601      	movs	r6, #1
 80066f0:	4635      	mov	r5, r6
 80066f2:	e045      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066f4:	2100      	movs	r1, #0
 80066f6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80066fa:	f7ff fdc9 	bl	8006290 <RCCEx_PLL3_Config>
 80066fe:	4605      	mov	r5, r0
        break;
 8006700:	e7a5      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      status = ret;
 8006702:	462e      	mov	r6, r5
 8006704:	e7ac      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006706:	2601      	movs	r6, #1
 8006708:	4635      	mov	r5, r6
 800670a:	e7c5      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800670c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006710:	d0b9      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8006712:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006716:	d0b6      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8006718:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800671c:	d0b3      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 800671e:	2601      	movs	r6, #1
 8006720:	4635      	mov	r5, r6
 8006722:	e7b9      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006724:	2101      	movs	r1, #1
 8006726:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800672a:	f7ff fdb1 	bl	8006290 <RCCEx_PLL3_Config>
 800672e:	4605      	mov	r5, r0
        break;
 8006730:	e7a9      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      status = ret;
 8006732:	462e      	mov	r6, r5
 8006734:	e7b0      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006736:	2601      	movs	r6, #1
 8006738:	4635      	mov	r5, r6
 800673a:	e7cb      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800673c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006740:	d0be      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006742:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006746:	d0bb      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006748:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800674c:	d0b8      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800674e:	2601      	movs	r6, #1
 8006750:	4635      	mov	r5, r6
 8006752:	e7bf      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006754:	2101      	movs	r1, #1
 8006756:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800675a:	f7ff fd99 	bl	8006290 <RCCEx_PLL3_Config>
 800675e:	4605      	mov	r5, r0
        break;
 8006760:	e7ae      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
      status = ret;
 8006762:	462e      	mov	r6, r5
 8006764:	e7b6      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006766:	4a2f      	ldr	r2, [pc, #188]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8006768:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800676a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800676e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006770:	b9c5      	cbnz	r5, 80067a4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006772:	4a2c      	ldr	r2, [pc, #176]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8006774:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006776:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800677a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800677c:	430b      	orrs	r3, r1
 800677e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8006786:	d01c      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch (PeriphClkInit->FmcClockSelection)
 8006788:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800678a:	2b03      	cmp	r3, #3
 800678c:	d844      	bhi.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800678e:	e8df f003 	tbb	[pc, r3]
 8006792:	0b10      	.short	0x0b10
 8006794:	103c      	.short	0x103c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006796:	2101      	movs	r1, #1
 8006798:	f104 0008 	add.w	r0, r4, #8
 800679c:	f7ff fcf4 	bl	8006188 <RCCEx_PLL2_Config>
 80067a0:	4605      	mov	r5, r0
        break;
 80067a2:	e7e5      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      status = ret;
 80067a4:	462e      	mov	r6, r5
 80067a6:	e7eb      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80067aa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80067ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80067b2:	bba5      	cbnz	r5, 800681e <HAL_RCCEx_PeriphCLKConfig+0x486>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80067b6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80067b8:	f023 0303 	bic.w	r3, r3, #3
 80067bc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80067be:	430b      	orrs	r3, r1
 80067c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80067c8:	d12e      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f013 0f01 	tst.w	r3, #1
 80067d0:	f000 80a6 	beq.w	8006920 <HAL_RCCEx_PeriphCLKConfig+0x588>
    switch (PeriphClkInit->Usart16ClockSelection)
 80067d4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80067d6:	2b28      	cmp	r3, #40	@ 0x28
 80067d8:	f200 80a0 	bhi.w	800691c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80067dc:	e8df f003 	tbb	[pc, r3]
 80067e0:	9e9e9e8e 	.word	0x9e9e9e8e
 80067e4:	9e9e9e9e 	.word	0x9e9e9e9e
 80067e8:	9e9e9e88 	.word	0x9e9e9e88
 80067ec:	9e9e9e9e 	.word	0x9e9e9e9e
 80067f0:	9e9e9e97 	.word	0x9e9e9e97
 80067f4:	9e9e9e9e 	.word	0x9e9e9e9e
 80067f8:	9e9e9e8e 	.word	0x9e9e9e8e
 80067fc:	9e9e9e9e 	.word	0x9e9e9e9e
 8006800:	9e9e9e8e 	.word	0x9e9e9e8e
 8006804:	9e9e9e9e 	.word	0x9e9e9e9e
 8006808:	8e          	.byte	0x8e
 8006809:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800680a:	2102      	movs	r1, #2
 800680c:	f104 0008 	add.w	r0, r4, #8
 8006810:	f7ff fcba 	bl	8006188 <RCCEx_PLL2_Config>
 8006814:	4605      	mov	r5, r0
        break;
 8006816:	e7cc      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    switch (PeriphClkInit->FmcClockSelection)
 8006818:	2601      	movs	r6, #1
 800681a:	4635      	mov	r5, r6
 800681c:	e7d1      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      status = ret;
 800681e:	462e      	mov	r6, r5
 8006820:	e7cf      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006822:	bf00      	nop
 8006824:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006828:	4a58      	ldr	r2, [pc, #352]	@ (800698c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800682a:	6813      	ldr	r3, [r2, #0]
 800682c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006830:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006832:	f7fb ff41 	bl	80026b8 <HAL_GetTick>
 8006836:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006838:	4b54      	ldr	r3, [pc, #336]	@ (800698c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006840:	d105      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006842:	f7fb ff39 	bl	80026b8 <HAL_GetTick>
 8006846:	1bc0      	subs	r0, r0, r7
 8006848:	2864      	cmp	r0, #100	@ 0x64
 800684a:	d9f5      	bls.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        ret = HAL_TIMEOUT;
 800684c:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 800684e:	2d00      	cmp	r5, #0
 8006850:	d14a      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006852:	4b4f      	ldr	r3, [pc, #316]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006856:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 800685a:	4053      	eors	r3, r2
 800685c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006860:	d00c      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006862:	4b4b      	ldr	r3, [pc, #300]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006864:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006866:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800686a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800686c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8006870:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006872:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006874:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006878:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800687a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800687c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8006880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006884:	d015      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      if (ret == HAL_OK)
 8006886:	bb8d      	cbnz	r5, 80068ec <HAL_RCCEx_PeriphCLKConfig+0x554>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006888:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800688c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006890:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8006894:	d01e      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006896:	4a3e      	ldr	r2, [pc, #248]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006898:	6913      	ldr	r3, [r2, #16]
 800689a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800689e:	6113      	str	r3, [r2, #16]
 80068a0:	493b      	ldr	r1, [pc, #236]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068a2:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80068a4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 80068a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80068ac:	4313      	orrs	r3, r2
 80068ae:	670b      	str	r3, [r1, #112]	@ 0x70
 80068b0:	e78b      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        tickstart = HAL_GetTick();
 80068b2:	f7fb ff01 	bl	80026b8 <HAL_GetTick>
 80068b6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b8:	4b35      	ldr	r3, [pc, #212]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068bc:	f013 0f02 	tst.w	r3, #2
 80068c0:	d1e1      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c2:	f7fb fef9 	bl	80026b8 <HAL_GetTick>
 80068c6:	1bc0      	subs	r0, r0, r7
 80068c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80068cc:	4298      	cmp	r0, r3
 80068ce:	d9f3      	bls.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x520>
            ret = HAL_TIMEOUT;
 80068d0:	2503      	movs	r5, #3
 80068d2:	e7d8      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d4:	482e      	ldr	r0, [pc, #184]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068d6:	6902      	ldr	r2, [r0, #16]
 80068d8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80068dc:	492d      	ldr	r1, [pc, #180]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 80068de:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 80068e2:	4313      	orrs	r3, r2
 80068e4:	6103      	str	r3, [r0, #16]
 80068e6:	e7db      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
      status = ret;
 80068e8:	462e      	mov	r6, r5
 80068ea:	e76e      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        status = ret;
 80068ec:	462e      	mov	r6, r5
 80068ee:	e76c      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068f0:	2101      	movs	r1, #1
 80068f2:	f104 0008 	add.w	r0, r4, #8
 80068f6:	f7ff fc47 	bl	8006188 <RCCEx_PLL2_Config>
 80068fa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80068fc:	b9e5      	cbnz	r5, 8006938 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068fe:	4a24      	ldr	r2, [pc, #144]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006900:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006902:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006906:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8006908:	430b      	orrs	r3, r1
 800690a:	6553      	str	r3, [r2, #84]	@ 0x54
 800690c:	e008      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x588>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800690e:	2101      	movs	r1, #1
 8006910:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006914:	f7ff fcbc 	bl	8006290 <RCCEx_PLL3_Config>
 8006918:	4605      	mov	r5, r0
        break;
 800691a:	e7ef      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->Usart16ClockSelection)
 800691c:	2601      	movs	r6, #1
 800691e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	f013 0f02 	tst.w	r3, #2
 8006926:	d017      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006928:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800692a:	2b05      	cmp	r3, #5
 800692c:	d829      	bhi.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800692e:	e8df f003 	tbb	[pc, r3]
 8006932:	050b      	.short	0x050b
 8006934:	0b0b0b21 	.word	0x0b0b0b21
      status = ret;
 8006938:	462e      	mov	r6, r5
 800693a:	e7f1      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x588>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800693c:	2101      	movs	r1, #1
 800693e:	f104 0008 	add.w	r0, r4, #8
 8006942:	f7ff fc21 	bl	8006188 <RCCEx_PLL2_Config>
 8006946:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006948:	b9f5      	cbnz	r5, 8006988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800694a:	4a11      	ldr	r2, [pc, #68]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800694c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800694e:	f023 0307 	bic.w	r3, r3, #7
 8006952:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8006954:	430b      	orrs	r3, r1
 8006956:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	f013 0f04 	tst.w	r3, #4
 800695e:	d02c      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006960:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8006964:	2b05      	cmp	r3, #5
 8006966:	f200 80dc 	bhi.w	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800696a:	e8df f003 	tbb	[pc, r3]
 800696e:	151b      	.short	0x151b
 8006970:	1b1b1bd3 	.word	0x1b1b1bd3
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006974:	2101      	movs	r1, #1
 8006976:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800697a:	f7ff fc89 	bl	8006290 <RCCEx_PLL3_Config>
 800697e:	4605      	mov	r5, r0
        break;
 8006980:	e7e2      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006982:	2601      	movs	r6, #1
 8006984:	4635      	mov	r5, r6
 8006986:	e7e7      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
      status = ret;
 8006988:	462e      	mov	r6, r5
 800698a:	e7e5      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800698c:	58024800 	.word	0x58024800
 8006990:	58024400 	.word	0x58024400
 8006994:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006998:	2101      	movs	r1, #1
 800699a:	f104 0008 	add.w	r0, r4, #8
 800699e:	f7ff fbf3 	bl	8006188 <RCCEx_PLL2_Config>
 80069a2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80069a4:	2d00      	cmp	r5, #0
 80069a6:	f040 80bf 	bne.w	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x790>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069aa:	4ab3      	ldr	r2, [pc, #716]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80069ac:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80069ae:	f023 0307 	bic.w	r3, r3, #7
 80069b2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80069b6:	430b      	orrs	r3, r1
 80069b8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	f013 0f20 	tst.w	r3, #32
 80069c0:	d01d      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80069c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80069c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ca:	f000 80c1 	beq.w	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80069ce:	f200 80b0 	bhi.w	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80069d2:	b14b      	cbz	r3, 80069e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80069d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069d8:	f040 80a8 	bne.w	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x794>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069dc:	2100      	movs	r1, #0
 80069de:	f104 0008 	add.w	r0, r4, #8
 80069e2:	f7ff fbd1 	bl	8006188 <RCCEx_PLL2_Config>
 80069e6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80069e8:	2d00      	cmp	r5, #0
 80069ea:	f040 80b8 	bne.w	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069ee:	4aa2      	ldr	r2, [pc, #648]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80069f0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80069f2:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80069f6:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80069fa:	430b      	orrs	r3, r1
 80069fc:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006a04:	d01d      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006a06:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0e:	f000 80ba 	beq.w	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8006a12:	f200 80a9 	bhi.w	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8006a16:	b14b      	cbz	r3, 8006a2c <HAL_RCCEx_PeriphCLKConfig+0x694>
 8006a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1c:	f040 80a1 	bne.w	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a20:	2100      	movs	r1, #0
 8006a22:	f104 0008 	add.w	r0, r4, #8
 8006a26:	f7ff fbaf 	bl	8006188 <RCCEx_PLL2_Config>
 8006a2a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	f040 80b1 	bne.w	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a32:	4a91      	ldr	r2, [pc, #580]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006a34:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006a36:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8006a3a:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a48:	d01d      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a4a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8006a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a52:	f000 80b3 	beq.w	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x824>
 8006a56:	f200 80a2 	bhi.w	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x806>
 8006a5a:	b14b      	cbz	r3, 8006a70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8006a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a60:	f040 809a 	bne.w	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x800>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a64:	2100      	movs	r1, #0
 8006a66:	f104 0008 	add.w	r0, r4, #8
 8006a6a:	f7ff fb8d 	bl	8006188 <RCCEx_PLL2_Config>
 8006a6e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	f040 80aa 	bne.w	8006bca <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a76:	4a80      	ldr	r2, [pc, #512]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006a78:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006a7a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8006a7e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8006a82:	430b      	orrs	r3, r1
 8006a84:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	f013 0f08 	tst.w	r3, #8
 8006a8c:	d00d      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x712>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a8e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8006a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a96:	f000 809a 	beq.w	8006bce <HAL_RCCEx_PeriphCLKConfig+0x836>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a9a:	4a77      	ldr	r2, [pc, #476]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006a9c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006a9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006aa2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	f013 0f10 	tst.w	r3, #16
 8006ab0:	d00d      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x736>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ab2:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aba:	f000 8092 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006abe:	4a6e      	ldr	r2, [pc, #440]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006ac0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac6:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8006aca:	430b      	orrs	r3, r1
 8006acc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8006ad4:	f000 809a 	beq.w	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x874>
    switch (PeriphClkInit->AdcClockSelection)
 8006ad8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae0:	f000 8089 	beq.w	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
 8006ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ae8:	d008      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x764>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 808a 	bne.w	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x86c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006af0:	2100      	movs	r1, #0
 8006af2:	f104 0008 	add.w	r0, r4, #8
 8006af6:	f7ff fb47 	bl	8006188 <RCCEx_PLL2_Config>
 8006afa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006afc:	2d00      	cmp	r5, #0
 8006afe:	f040 8084 	bne.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x872>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b02:	4a5d      	ldr	r2, [pc, #372]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006b04:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006b06:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006b0a:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b12:	e07b      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x874>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b14:	2101      	movs	r1, #1
 8006b16:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006b1a:	f7ff fbb9 	bl	8006290 <RCCEx_PLL3_Config>
 8006b1e:	4605      	mov	r5, r0
        break;
 8006b20:	e740      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b22:	2601      	movs	r6, #1
 8006b24:	4635      	mov	r5, r6
 8006b26:	e748      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      status = ret;
 8006b28:	462e      	mov	r6, r5
 8006b2a:	e746      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b2c:	2601      	movs	r6, #1
 8006b2e:	4635      	mov	r5, r6
 8006b30:	e765      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x666>
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b36:	f43f af57 	beq.w	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b3e:	f43f af53 	beq.w	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006b42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b46:	f43f af4f 	beq.w	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006b4a:	2601      	movs	r6, #1
 8006b4c:	4635      	mov	r5, r6
 8006b4e:	e756      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b50:	2102      	movs	r1, #2
 8006b52:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006b56:	f7ff fb9b 	bl	8006290 <RCCEx_PLL3_Config>
 8006b5a:	4605      	mov	r5, r0
        break;
 8006b5c:	e744      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      status = ret;
 8006b5e:	462e      	mov	r6, r5
 8006b60:	e74d      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b62:	2601      	movs	r6, #1
 8006b64:	4635      	mov	r5, r6
 8006b66:	e76c      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b6c:	f43f af5e 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x694>
 8006b70:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006b74:	f43f af5a 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x694>
 8006b78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b7c:	f43f af56 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x694>
 8006b80:	2601      	movs	r6, #1
 8006b82:	4635      	mov	r5, r6
 8006b84:	e75d      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b86:	2102      	movs	r1, #2
 8006b88:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006b8c:	f7ff fb80 	bl	8006290 <RCCEx_PLL3_Config>
 8006b90:	4605      	mov	r5, r0
        break;
 8006b92:	e74b      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x694>
      status = ret;
 8006b94:	462e      	mov	r6, r5
 8006b96:	e754      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006b98:	2601      	movs	r6, #1
 8006b9a:	4635      	mov	r5, r6
 8006b9c:	e773      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006b9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ba2:	f43f af65 	beq.w	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8006ba6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006baa:	f43f af61 	beq.w	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8006bae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006bb2:	f43f af5d 	beq.w	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8006bb6:	2601      	movs	r6, #1
 8006bb8:	4635      	mov	r5, r6
 8006bba:	e764      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bbc:	2102      	movs	r1, #2
 8006bbe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006bc2:	f7ff fb65 	bl	8006290 <RCCEx_PLL3_Config>
 8006bc6:	4605      	mov	r5, r0
        break;
 8006bc8:	e752      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      status = ret;
 8006bca:	462e      	mov	r6, r5
 8006bcc:	e75b      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bce:	2102      	movs	r1, #2
 8006bd0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006bd4:	f7ff fb5c 	bl	8006290 <RCCEx_PLL3_Config>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	f43f af5e 	beq.w	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x702>
        status = HAL_ERROR;
 8006bde:	2601      	movs	r6, #1
 8006be0:	e75b      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006be2:	2102      	movs	r1, #2
 8006be4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006be8:	f7ff fb52 	bl	8006290 <RCCEx_PLL3_Config>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f43f af66 	beq.w	8006abe <HAL_RCCEx_PeriphCLKConfig+0x726>
        status = HAL_ERROR;
 8006bf2:	2601      	movs	r6, #1
 8006bf4:	e763      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x726>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bf6:	2102      	movs	r1, #2
 8006bf8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006bfc:	f7ff fb48 	bl	8006290 <RCCEx_PLL3_Config>
 8006c00:	4605      	mov	r5, r0
        break;
 8006c02:	e77b      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x764>
    switch (PeriphClkInit->AdcClockSelection)
 8006c04:	2601      	movs	r6, #1
 8006c06:	4635      	mov	r5, r6
 8006c08:	e000      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x874>
      status = ret;
 8006c0a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006c12:	d018      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    switch (PeriphClkInit->UsbClockSelection)
 8006c14:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8006c18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c1c:	d01f      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8006c1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c22:	d007      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c28:	d120      	bne.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x8d4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c2a:	4a13      	ldr	r2, [pc, #76]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006c2c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c32:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006c34:	b9ed      	cbnz	r5, 8006c72 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c36:	4a10      	ldr	r2, [pc, #64]	@ (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006c38:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006c3a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006c3e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8006c42:	430b      	orrs	r3, r1
 8006c44:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006c4c:	d02c      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch (PeriphClkInit->SdmmcClockSelection)
 8006c4e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006c50:	b1a3      	cbz	r3, 8006c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8006c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c56:	d01f      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8006c58:	2601      	movs	r6, #1
 8006c5a:	4635      	mov	r5, r6
 8006c5c:	e024      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c5e:	2101      	movs	r1, #1
 8006c60:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006c64:	f7ff fb14 	bl	8006290 <RCCEx_PLL3_Config>
 8006c68:	4605      	mov	r5, r0
        break;
 8006c6a:	e7e3      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    switch (PeriphClkInit->UsbClockSelection)
 8006c6c:	2601      	movs	r6, #1
 8006c6e:	4635      	mov	r5, r6
 8006c70:	e7e9      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      status = ret;
 8006c72:	462e      	mov	r6, r5
 8006c74:	e7e7      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 8006c76:	bf00      	nop
 8006c78:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7c:	4a70      	ldr	r2, [pc, #448]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006c7e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006c86:	b975      	cbnz	r5, 8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c88:	4a6d      	ldr	r2, [pc, #436]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006c8a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8006c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c90:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006c92:	430b      	orrs	r3, r1
 8006c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c96:	e007      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c98:	2102      	movs	r1, #2
 8006c9a:	f104 0008 	add.w	r0, r4, #8
 8006c9e:	f7ff fa73 	bl	8006188 <RCCEx_PLL2_Config>
 8006ca2:	4605      	mov	r5, r0
        break;
 8006ca4:	e7ef      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      status = ret;
 8006ca6:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8006cae:	d111      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006cb6:	d028      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x972>
    switch (PeriphClkInit->RngClockSelection)
 8006cb8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8006cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc0:	d014      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x954>
 8006cc2:	d910      	bls.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cc8:	d015      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8006cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cce:	d012      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8006cd0:	2601      	movs	r6, #1
 8006cd2:	e01a      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x972>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006cda:	f7ff fad9 	bl	8006290 <RCCEx_PLL3_Config>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d0e6      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x918>
      status = HAL_ERROR;
 8006ce2:	2601      	movs	r6, #1
 8006ce4:	e7e4      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x918>
    switch (PeriphClkInit->RngClockSelection)
 8006ce6:	b133      	cbz	r3, 8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8006ce8:	2601      	movs	r6, #1
 8006cea:	e00e      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x972>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cec:	4a54      	ldr	r2, [pc, #336]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006cee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	d169      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xa36>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cfa:	4a51      	ldr	r2, [pc, #324]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006cfc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d02:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8006d06:	430b      	orrs	r3, r1
 8006d08:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8006d10:	d006      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x988>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d12:	4a4b      	ldr	r2, [pc, #300]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006d14:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006d16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d1a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8006d26:	d007      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d28:	4a45      	ldr	r2, [pc, #276]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006d2a:	6913      	ldr	r3, [r2, #16]
 8006d2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d30:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8006d3e:	d006      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d40:	4a3f      	ldr	r2, [pc, #252]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006d42:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006d44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d48:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d54:	d009      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d56:	4b3a      	ldr	r3, [pc, #232]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d5e:	611a      	str	r2, [r3, #16]
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	f8d4 10bc 	ldr.w	r1, [r4, #188]	@ 0xbc
 8006d66:	430a      	orrs	r2, r1
 8006d68:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da06      	bge.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d70:	4a33      	ldr	r2, [pc, #204]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006d72:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8006d74:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006d78:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006d84:	d007      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d86:	4a2e      	ldr	r2, [pc, #184]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8006d88:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8006d8a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8006d8e:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8006d92:	430b      	orrs	r3, r1
 8006d94:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d96:	6863      	ldr	r3, [r4, #4]
 8006d98:	f013 0f01 	tst.w	r3, #1
 8006d9c:	d119      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d9e:	6863      	ldr	r3, [r4, #4]
 8006da0:	f013 0f02 	tst.w	r3, #2
 8006da4:	d11e      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006da6:	6863      	ldr	r3, [r4, #4]
 8006da8:	f013 0f04 	tst.w	r3, #4
 8006dac:	d123      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006dae:	6863      	ldr	r3, [r4, #4]
 8006db0:	f013 0f08 	tst.w	r3, #8
 8006db4:	d128      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006db6:	6863      	ldr	r3, [r4, #4]
 8006db8:	f013 0f10 	tst.w	r3, #16
 8006dbc:	d12d      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	f013 0f20 	tst.w	r3, #32
 8006dc4:	d132      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa94>
  if (status == HAL_OK)
 8006dc6:	b106      	cbz	r6, 8006dca <HAL_RCCEx_PeriphCLKConfig+0xa32>
  return HAL_ERROR;
 8006dc8:	2601      	movs	r6, #1
}
 8006dca:	4630      	mov	r0, r6
 8006dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      status = ret;
 8006dce:	462e      	mov	r6, r5
 8006dd0:	e79b      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x972>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	f104 0008 	add.w	r0, r4, #8
 8006dd8:	f7ff f9d6 	bl	8006188 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d0de      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      status = ret;
 8006de0:	4606      	mov	r6, r0
 8006de2:	e7dc      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xa06>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006de4:	2101      	movs	r1, #1
 8006de6:	f104 0008 	add.w	r0, r4, #8
 8006dea:	f7ff f9cd 	bl	8006188 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d0d9      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
      status = ret;
 8006df2:	4606      	mov	r6, r0
 8006df4:	e7d7      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006df6:	2102      	movs	r1, #2
 8006df8:	f104 0008 	add.w	r0, r4, #8
 8006dfc:	f7ff f9c4 	bl	8006188 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d0d4      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xa16>
      status = ret;
 8006e04:	4606      	mov	r6, r0
 8006e06:	e7d2      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xa16>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e08:	2100      	movs	r1, #0
 8006e0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e0e:	f7ff fa3f 	bl	8006290 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d0cf      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
      status = ret;
 8006e16:	4606      	mov	r6, r0
 8006e18:	e7cd      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e20:	f7ff fa36 	bl	8006290 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d0ca      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xa26>
      status = ret;
 8006e28:	4606      	mov	r6, r0
 8006e2a:	e7c8      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xa26>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e32:	f7ff fa2d 	bl	8006290 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d0c5      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
  return HAL_ERROR;
 8006e3a:	2601      	movs	r6, #1
 8006e3c:	e7c5      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006e3e:	bf00      	nop
 8006e40:	58024400 	.word	0x58024400

08006e44 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8006e44:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e46:	f7ff f959 	bl	80060fc <HAL_RCC_GetHCLKFreq>
 8006e4a:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006e52:	4a04      	ldr	r2, [pc, #16]	@ (8006e64 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8006e54:	5cd3      	ldrb	r3, [r2, r3]
 8006e56:	f003 031f 	and.w	r3, r3, #31
}
 8006e5a:	40d8      	lsrs	r0, r3
 8006e5c:	bd08      	pop	{r3, pc}
 8006e5e:	bf00      	nop
 8006e60:	58024400 	.word	0x58024400
 8006e64:	0800e3b0 	.word	0x0800e3b0

08006e68 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8006e68:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e6a:	4b79      	ldr	r3, [pc, #484]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8006e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e6e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006e70:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e76:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8006e80:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 8006e84:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 8006e88:	f000 80dd 	beq.w	8007046 <HAL_RCCEx_GetPLL2ClockFreq+0x1de>
 8006e8c:	f002 0203 	and.w	r2, r2, #3
 8006e90:	ee07 3a90 	vmov	s15, r3
 8006e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8006e98:	2a01      	cmp	r2, #1
 8006e9a:	d04b      	beq.n	8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0xcc>
 8006e9c:	2a02      	cmp	r2, #2
 8006e9e:	f000 8098 	beq.w	8006fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	f040 80b2 	bne.w	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ea8:	4b69      	ldr	r3, [pc, #420]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f013 0f20 	tst.w	r3, #32
 8006eb0:	d023      	beq.n	8006efa <HAL_RCCEx_GetPLL2ClockFreq+0x92>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb2:	4967      	ldr	r1, [pc, #412]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8006eb4:	680a      	ldr	r2, [r1, #0]
 8006eb6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006eba:	4b66      	ldr	r3, [pc, #408]	@ (8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8006ebc:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ebe:	ee07 3a10 	vmov	s14, r3
 8006ec2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006ec6:	ee07 ca10 	vmov	s14, ip
 8006eca:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8006ece:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8006ed2:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8006ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed8:	ee06 3a90 	vmov	s13, r3
 8006edc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006ee0:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8006ee4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ef8:	e038      	b.n	8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006efa:	ee07 ca10 	vmov	s14, ip
 8006efe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006f02:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 800705c <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8006f06:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006f0a:	4b51      	ldr	r3, [pc, #324]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	ee06 3a90 	vmov	s13, r3
 8006f16:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006f1a:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8006f1e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f32:	e01b      	b.n	8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f34:	ee07 ca10 	vmov	s14, ip
 8006f38:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006f3c:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8006f40:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006f44:	4b42      	ldr	r3, [pc, #264]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4c:	ee06 3a90 	vmov	s13, r3
 8006f50:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006f54:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8006f58:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f68:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006f6c:	4a38      	ldr	r2, [pc, #224]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8006f6e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006f70:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f84:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006f88:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8006f8c:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006f90:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006f92:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006fa6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8006faa:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006fae:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006fb0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006fc4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006fc8:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8006fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd0:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fd2:	ee07 ca10 	vmov	s14, ip
 8006fd6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006fda:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x1fc>
 8006fde:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fea:	ee06 3a90 	vmov	s13, r3
 8006fee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006ff2:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8006ff6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007006:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800700a:	e7af      	b.n	8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800700c:	ee07 ca10 	vmov	s14, ip
 8007010:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007014:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8007018:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800701c:	4b0c      	ldr	r3, [pc, #48]	@ (8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007024:	ee06 3a90 	vmov	s13, r3
 8007028:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800702c:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8007030:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007040:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007044:	e792      	b.n	8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800704a:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800704c:	6083      	str	r3, [r0, #8]
}
 800704e:	e7bd      	b.n	8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x164>
 8007050:	58024400 	.word	0x58024400
 8007054:	03d09000 	.word	0x03d09000
 8007058:	39000000 	.word	0x39000000
 800705c:	4c742400 	.word	0x4c742400
 8007060:	4a742400 	.word	0x4a742400
 8007064:	4bbebc20 	.word	0x4bbebc20

08007068 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8007068:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800706a:	4b79      	ldr	r3, [pc, #484]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 800706c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800706e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007070:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007074:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007076:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800707a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007080:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8007084:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 8007088:	f000 80dd 	beq.w	8007246 <HAL_RCCEx_GetPLL3ClockFreq+0x1de>
 800708c:	f002 0203 	and.w	r2, r2, #3
 8007090:	ee07 3a90 	vmov	s15, r3
 8007094:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8007098:	2a01      	cmp	r2, #1
 800709a:	d04b      	beq.n	8007134 <HAL_RCCEx_GetPLL3ClockFreq+0xcc>
 800709c:	2a02      	cmp	r2, #2
 800709e:	f000 8098 	beq.w	80071d2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80070a2:	2a00      	cmp	r2, #0
 80070a4:	f040 80b2 	bne.w	800720c <HAL_RCCEx_GetPLL3ClockFreq+0x1a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a8:	4b69      	ldr	r3, [pc, #420]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f013 0f20 	tst.w	r3, #32
 80070b0:	d023      	beq.n	80070fa <HAL_RCCEx_GetPLL3ClockFreq+0x92>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070b2:	4967      	ldr	r1, [pc, #412]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 80070b4:	680a      	ldr	r2, [r1, #0]
 80070b6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80070ba:	4b66      	ldr	r3, [pc, #408]	@ (8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 80070bc:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070be:	ee07 3a10 	vmov	s14, r3
 80070c2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80070c6:	ee07 ca10 	vmov	s14, ip
 80070ca:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80070ce:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80070d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d8:	ee06 3a90 	vmov	s13, r3
 80070dc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80070e0:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80070e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80070e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070f8:	e038      	b.n	800716c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070fa:	ee07 ca10 	vmov	s14, ip
 80070fe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007102:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 800725c <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8007106:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800710a:	4b51      	ldr	r3, [pc, #324]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee06 3a90 	vmov	s13, r3
 8007116:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800711a:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 800711e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007132:	e01b      	b.n	800716c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007134:	ee07 ca10 	vmov	s14, ip
 8007138:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800713c:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8007260 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8007140:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007144:	4b42      	ldr	r3, [pc, #264]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714c:	ee06 3a90 	vmov	s13, r3
 8007150:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007154:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8007158:	ee67 7a86 	vmul.f32	s15, s15, s12
 800715c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007168:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800716c:	4a38      	ldr	r2, [pc, #224]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 800716e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007170:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007184:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007188:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800718c:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007190:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007192:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80071a6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80071aa:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80071ae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80071b0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80071c4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80071c8:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80071cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d0:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d2:	ee07 ca10 	vmov	s14, ip
 80071d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80071da:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8007264 <HAL_RCCEx_GetPLL3ClockFreq+0x1fc>
 80071de:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80071e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee06 3a90 	vmov	s13, r3
 80071ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80071f2:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80071f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800720a:	e7af      	b.n	800716c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800720c:	ee07 ca10 	vmov	s14, ip
 8007210:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007214:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8007260 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8007218:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800721c:	4b0c      	ldr	r3, [pc, #48]	@ (8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 800721e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007224:	ee06 3a90 	vmov	s13, r3
 8007228:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800722c:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8007230:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007238:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007240:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007244:	e792      	b.n	800716c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800724a:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800724c:	6083      	str	r3, [r0, #8]
}
 800724e:	e7bd      	b.n	80071cc <HAL_RCCEx_GetPLL3ClockFreq+0x164>
 8007250:	58024400 	.word	0x58024400
 8007254:	03d09000 	.word	0x03d09000
 8007258:	39000000 	.word	0x39000000
 800725c:	4c742400 	.word	0x4c742400
 8007260:	4a742400 	.word	0x4a742400
 8007264:	4bbebc20 	.word	0x4bbebc20

08007268 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007268:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800726a:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800726c:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800726e:	3008      	adds	r0, #8
 8007270:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8007272:	fb03 0000 	mla	r0, r3, r0, r0
 8007276:	4770      	bx	lr

08007278 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007278:	2800      	cmp	r0, #0
 800727a:	f000 80b7 	beq.w	80073ec <HAL_SPI_Init+0x174>
{
 800727e:	b570      	push	{r4, r5, r6, lr}
 8007280:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007282:	2300      	movs	r3, #0
 8007284:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007286:	6805      	ldr	r5, [r0, #0]
 8007288:	4b5c      	ldr	r3, [pc, #368]	@ (80073fc <HAL_SPI_Init+0x184>)
 800728a:	4e5d      	ldr	r6, [pc, #372]	@ (8007400 <HAL_SPI_Init+0x188>)
 800728c:	429d      	cmp	r5, r3
 800728e:	bf18      	it	ne
 8007290:	42b5      	cmpne	r5, r6
 8007292:	bf14      	ite	ne
 8007294:	2601      	movne	r6, #1
 8007296:	2600      	moveq	r6, #0
 8007298:	d007      	beq.n	80072aa <HAL_SPI_Init+0x32>
 800729a:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
 800729e:	429d      	cmp	r5, r3
 80072a0:	d003      	beq.n	80072aa <HAL_SPI_Init+0x32>
 80072a2:	68c3      	ldr	r3, [r0, #12]
 80072a4:	2b0f      	cmp	r3, #15
 80072a6:	f200 80a3 	bhi.w	80073f0 <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7ff ffdc 	bl	8007268 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072b0:	b12e      	cbz	r6, 80072be <HAL_SPI_Init+0x46>
 80072b2:	4b54      	ldr	r3, [pc, #336]	@ (8007404 <HAL_SPI_Init+0x18c>)
 80072b4:	429d      	cmp	r5, r3
 80072b6:	d002      	beq.n	80072be <HAL_SPI_Init+0x46>
 80072b8:	2808      	cmp	r0, #8
 80072ba:	f200 809b 	bhi.w	80073f4 <HAL_SPI_Init+0x17c>
 80072be:	4a4f      	ldr	r2, [pc, #316]	@ (80073fc <HAL_SPI_Init+0x184>)
 80072c0:	4b4f      	ldr	r3, [pc, #316]	@ (8007400 <HAL_SPI_Init+0x188>)
 80072c2:	429d      	cmp	r5, r3
 80072c4:	bf18      	it	ne
 80072c6:	4295      	cmpne	r5, r2
 80072c8:	d003      	beq.n	80072d2 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ce:	429d      	cmp	r5, r3
 80072d0:	d102      	bne.n	80072d8 <HAL_SPI_Init+0x60>
 80072d2:	2810      	cmp	r0, #16
 80072d4:	f200 8090 	bhi.w	80073f8 <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80072d8:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 80072dc:	b1f3      	cbz	r3, 800731c <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
 80072de:	2302      	movs	r3, #2
 80072e0:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 80072e4:	6822      	ldr	r2, [r4, #0]
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072f6:	69a1      	ldr	r1, [r4, #24]
 80072f8:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 80072fc:	d014      	beq.n	8007328 <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80072fe:	6863      	ldr	r3, [r4, #4]
 8007300:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8007304:	d023      	beq.n	800734e <HAL_SPI_Init+0xd6>
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	2b06      	cmp	r3, #6
 800730a:	d920      	bls.n	800734e <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800730c:	6821      	ldr	r1, [r4, #0]
 800730e:	680b      	ldr	r3, [r1, #0]
 8007310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007314:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8007316:	4303      	orrs	r3, r0
 8007318:	600b      	str	r3, [r1, #0]
 800731a:	e01d      	b.n	8007358 <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
 800731c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 8007320:	4620      	mov	r0, r4
 8007322:	f7fa fdd5 	bl	8001ed0 <HAL_SPI_MspInit>
 8007326:	e7da      	b.n	80072de <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007328:	6861      	ldr	r1, [r4, #4]
 800732a:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800732e:	d006      	beq.n	800733e <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007330:	2900      	cmp	r1, #0
 8007332:	d1e4      	bne.n	80072fe <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007334:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007336:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800733a:	d1e0      	bne.n	80072fe <HAL_SPI_Init+0x86>
 800733c:	e002      	b.n	8007344 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800733e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007340:	2800      	cmp	r0, #0
 8007342:	d1f5      	bne.n	8007330 <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007344:	6819      	ldr	r1, [r3, #0]
 8007346:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800734a:	6019      	str	r1, [r3, #0]
 800734c:	e7d7      	b.n	80072fe <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800734e:	6821      	ldr	r1, [r4, #0]
 8007350:	680b      	ldr	r3, [r1, #0]
 8007352:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007356:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007358:	69e3      	ldr	r3, [r4, #28]
 800735a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800735c:	430b      	orrs	r3, r1
 800735e:	4313      	orrs	r3, r2
 8007360:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007362:	4313      	orrs	r3, r2
 8007364:	68e1      	ldr	r1, [r4, #12]
 8007366:	6822      	ldr	r2, [r4, #0]
 8007368:	430b      	orrs	r3, r1
 800736a:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800736c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800736e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007370:	4313      	orrs	r3, r2
 8007372:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007374:	4313      	orrs	r3, r2
 8007376:	69a2      	ldr	r2, [r4, #24]
 8007378:	4313      	orrs	r3, r2
 800737a:	6922      	ldr	r2, [r4, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	6962      	ldr	r2, [r4, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	6a22      	ldr	r2, [r4, #32]
 8007384:	4313      	orrs	r3, r2
 8007386:	6862      	ldr	r2, [r4, #4]
 8007388:	4313      	orrs	r3, r2
 800738a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800738c:	4313      	orrs	r3, r2
 800738e:	68a2      	ldr	r2, [r4, #8]
 8007390:	4313      	orrs	r3, r2
 8007392:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8007394:	4313      	orrs	r3, r2
 8007396:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	430b      	orrs	r3, r1
 800739c:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800739e:	6863      	ldr	r3, [r4, #4]
 80073a0:	b96b      	cbnz	r3, 80073be <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	6893      	ldr	r3, [r2, #8]
 80073a6:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80073aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80073ae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80073b0:	6822      	ldr	r2, [r4, #0]
 80073b2:	6893      	ldr	r3, [r2, #8]
 80073b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80073b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80073bc:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073be:	6822      	ldr	r2, [r4, #0]
 80073c0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80073c2:	f023 0301 	bic.w	r3, r3, #1
 80073c6:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80073ce:	d006      	beq.n	80073de <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	68d3      	ldr	r3, [r2, #12]
 80073d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073d8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80073da:	430b      	orrs	r3, r1
 80073dc:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073de:	2000      	movs	r0, #0
 80073e0:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
}
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80073ec:	2001      	movs	r0, #1
}
 80073ee:	4770      	bx	lr
    return HAL_ERROR;
 80073f0:	2001      	movs	r0, #1
 80073f2:	e7fa      	b.n	80073ea <HAL_SPI_Init+0x172>
    return HAL_ERROR;
 80073f4:	2001      	movs	r0, #1
 80073f6:	e7f8      	b.n	80073ea <HAL_SPI_Init+0x172>
 80073f8:	2001      	movs	r0, #1
 80073fa:	e7f6      	b.n	80073ea <HAL_SPI_Init+0x172>
 80073fc:	40013000 	.word	0x40013000
 8007400:	40003800 	.word	0x40003800
 8007404:	40003c00 	.word	0x40003c00

08007408 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007408:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	e852 3f00 	ldrex	r3, [r2]
 800740e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	e842 3100 	strex	r1, r3, [r2]
 8007416:	2900      	cmp	r1, #0
 8007418:	d1f6      	bne.n	8007408 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800741a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	f102 0308 	add.w	r3, r2, #8
 8007420:	e853 1f00 	ldrex	r1, [r3]
 8007424:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <UART_EndRxTransfer+0x54>)
 8007426:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	3208      	adds	r2, #8
 800742a:	e842 3100 	strex	r1, r3, [r2]
 800742e:	2900      	cmp	r1, #0
 8007430:	d1f3      	bne.n	800741a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007432:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d006      	beq.n	8007446 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007438:	2320      	movs	r3, #32
 800743a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743e:	2300      	movs	r3, #0
 8007440:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007442:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8007444:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007446:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	e852 3f00 	ldrex	r3, [r2]
 800744c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	e842 3100 	strex	r1, r3, [r2]
 8007454:	2900      	cmp	r1, #0
 8007456:	d1f6      	bne.n	8007446 <UART_EndRxTransfer+0x3e>
 8007458:	e7ee      	b.n	8007438 <UART_EndRxTransfer+0x30>
 800745a:	bf00      	nop
 800745c:	effffffe 	.word	0xeffffffe

08007460 <UART_SetConfig>:
{
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007466:	6883      	ldr	r3, [r0, #8]
 8007468:	6902      	ldr	r2, [r0, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	6942      	ldr	r2, [r0, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	69c2      	ldr	r2, [r0, #28]
 8007472:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007474:	6801      	ldr	r1, [r0, #0]
 8007476:	6808      	ldr	r0, [r1, #0]
 8007478:	4a88      	ldr	r2, [pc, #544]	@ (800769c <UART_SetConfig+0x23c>)
 800747a:	4002      	ands	r2, r0
 800747c:	431a      	orrs	r2, r3
 800747e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	6853      	ldr	r3, [r2, #4]
 8007484:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007488:	68e1      	ldr	r1, [r4, #12]
 800748a:	430b      	orrs	r3, r1
 800748c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800748e:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007490:	6822      	ldr	r2, [r4, #0]
 8007492:	4b83      	ldr	r3, [pc, #524]	@ (80076a0 <UART_SetConfig+0x240>)
 8007494:	429a      	cmp	r2, r3
 8007496:	d001      	beq.n	800749c <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8007498:	6a23      	ldr	r3, [r4, #32]
 800749a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800749c:	6890      	ldr	r0, [r2, #8]
 800749e:	4b81      	ldr	r3, [pc, #516]	@ (80076a4 <UART_SetConfig+0x244>)
 80074a0:	4003      	ands	r3, r0
 80074a2:	430b      	orrs	r3, r1
 80074a4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80074aa:	f023 030f 	bic.w	r3, r3, #15
 80074ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80074b0:	430b      	orrs	r3, r1
 80074b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	4a7c      	ldr	r2, [pc, #496]	@ (80076a8 <UART_SetConfig+0x248>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d021      	beq.n	8007500 <UART_SetConfig+0xa0>
 80074bc:	4a7b      	ldr	r2, [pc, #492]	@ (80076ac <UART_SetConfig+0x24c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	f000 808c 	beq.w	80075dc <UART_SetConfig+0x17c>
 80074c4:	4a7a      	ldr	r2, [pc, #488]	@ (80076b0 <UART_SetConfig+0x250>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	f000 80a2 	beq.w	8007610 <UART_SetConfig+0x1b0>
 80074cc:	4a79      	ldr	r2, [pc, #484]	@ (80076b4 <UART_SetConfig+0x254>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	f000 80b5 	beq.w	800763e <UART_SetConfig+0x1de>
 80074d4:	4a78      	ldr	r2, [pc, #480]	@ (80076b8 <UART_SetConfig+0x258>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	f000 80c8 	beq.w	800766c <UART_SetConfig+0x20c>
 80074dc:	4a77      	ldr	r2, [pc, #476]	@ (80076bc <UART_SetConfig+0x25c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	f000 80f4 	beq.w	80076cc <UART_SetConfig+0x26c>
 80074e4:	4a76      	ldr	r2, [pc, #472]	@ (80076c0 <UART_SetConfig+0x260>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	f000 8119 	beq.w	800771e <UART_SetConfig+0x2be>
 80074ec:	4a75      	ldr	r2, [pc, #468]	@ (80076c4 <UART_SetConfig+0x264>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	f000 812c 	beq.w	800774c <UART_SetConfig+0x2ec>
 80074f4:	4a6a      	ldr	r2, [pc, #424]	@ (80076a0 <UART_SetConfig+0x240>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	f000 813f 	beq.w	800777a <UART_SetConfig+0x31a>
 80074fc:	2280      	movs	r2, #128	@ 0x80
 80074fe:	e033      	b.n	8007568 <UART_SetConfig+0x108>
 8007500:	4a71      	ldr	r2, [pc, #452]	@ (80076c8 <UART_SetConfig+0x268>)
 8007502:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007504:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8007508:	2a28      	cmp	r2, #40	@ 0x28
 800750a:	d865      	bhi.n	80075d8 <UART_SetConfig+0x178>
 800750c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007510:	00640029 	.word	0x00640029
 8007514:	00640064 	.word	0x00640064
 8007518:	00640064 	.word	0x00640064
 800751c:	00640064 	.word	0x00640064
 8007520:	0064014d 	.word	0x0064014d
 8007524:	00640064 	.word	0x00640064
 8007528:	00640064 	.word	0x00640064
 800752c:	00640064 	.word	0x00640064
 8007530:	0064002b 	.word	0x0064002b
 8007534:	00640064 	.word	0x00640064
 8007538:	00640064 	.word	0x00640064
 800753c:	00640064 	.word	0x00640064
 8007540:	0064005e 	.word	0x0064005e
 8007544:	00640064 	.word	0x00640064
 8007548:	00640064 	.word	0x00640064
 800754c:	00640064 	.word	0x00640064
 8007550:	00640060 	.word	0x00640060
 8007554:	00640064 	.word	0x00640064
 8007558:	00640064 	.word	0x00640064
 800755c:	00640064 	.word	0x00640064
 8007560:	0062      	.short	0x0062
 8007562:	2201      	movs	r2, #1
 8007564:	e000      	b.n	8007568 <UART_SetConfig+0x108>
 8007566:	2208      	movs	r2, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 8007568:	494d      	ldr	r1, [pc, #308]	@ (80076a0 <UART_SetConfig+0x240>)
 800756a:	428b      	cmp	r3, r1
 800756c:	f000 812f 	beq.w	80077ce <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007570:	69e0      	ldr	r0, [r4, #28]
 8007572:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007576:	f000 81af 	beq.w	80078d8 <UART_SetConfig+0x478>
    switch (clocksource)
 800757a:	2a20      	cmp	r2, #32
 800757c:	f200 8206 	bhi.w	800798c <UART_SetConfig+0x52c>
 8007580:	2a20      	cmp	r2, #32
 8007582:	f200 8253 	bhi.w	8007a2c <UART_SetConfig+0x5cc>
 8007586:	e8df f012 	tbh	[pc, r2, lsl #1]
 800758a:	0208      	.short	0x0208
 800758c:	02510222 	.word	0x02510222
 8007590:	02250251 	.word	0x02250251
 8007594:	02510251 	.word	0x02510251
 8007598:	022a0251 	.word	0x022a0251
 800759c:	02510251 	.word	0x02510251
 80075a0:	02510251 	.word	0x02510251
 80075a4:	02510251 	.word	0x02510251
 80075a8:	022f0251 	.word	0x022f0251
 80075ac:	02510251 	.word	0x02510251
 80075b0:	02510251 	.word	0x02510251
 80075b4:	02510251 	.word	0x02510251
 80075b8:	02510251 	.word	0x02510251
 80075bc:	02510251 	.word	0x02510251
 80075c0:	02510251 	.word	0x02510251
 80075c4:	02510251 	.word	0x02510251
 80075c8:	023b0251 	.word	0x023b0251
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075cc:	2210      	movs	r2, #16
 80075ce:	e7cb      	b.n	8007568 <UART_SetConfig+0x108>
 80075d0:	2220      	movs	r2, #32
 80075d2:	e7c9      	b.n	8007568 <UART_SetConfig+0x108>
 80075d4:	2240      	movs	r2, #64	@ 0x40
 80075d6:	e7c7      	b.n	8007568 <UART_SetConfig+0x108>
 80075d8:	2280      	movs	r2, #128	@ 0x80
 80075da:	e7c5      	b.n	8007568 <UART_SetConfig+0x108>
 80075dc:	4a3a      	ldr	r2, [pc, #232]	@ (80076c8 <UART_SetConfig+0x268>)
 80075de:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80075e0:	f002 0207 	and.w	r2, r2, #7
 80075e4:	2a05      	cmp	r2, #5
 80075e6:	d811      	bhi.n	800760c <UART_SetConfig+0x1ac>
 80075e8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80075ec:	00e10006 	.word	0x00e10006
 80075f0:	000a0008 	.word	0x000a0008
 80075f4:	000e000c 	.word	0x000e000c
 80075f8:	2200      	movs	r2, #0
 80075fa:	e7b5      	b.n	8007568 <UART_SetConfig+0x108>
 80075fc:	2208      	movs	r2, #8
 80075fe:	e7b3      	b.n	8007568 <UART_SetConfig+0x108>
 8007600:	2210      	movs	r2, #16
 8007602:	e7b1      	b.n	8007568 <UART_SetConfig+0x108>
 8007604:	2220      	movs	r2, #32
 8007606:	e7af      	b.n	8007568 <UART_SetConfig+0x108>
 8007608:	2240      	movs	r2, #64	@ 0x40
 800760a:	e7ad      	b.n	8007568 <UART_SetConfig+0x108>
 800760c:	2280      	movs	r2, #128	@ 0x80
 800760e:	e7ab      	b.n	8007568 <UART_SetConfig+0x108>
 8007610:	4a2d      	ldr	r2, [pc, #180]	@ (80076c8 <UART_SetConfig+0x268>)
 8007612:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007614:	f002 0207 	and.w	r2, r2, #7
 8007618:	2a05      	cmp	r2, #5
 800761a:	d80e      	bhi.n	800763a <UART_SetConfig+0x1da>
 800761c:	e8df f002 	tbb	[pc, r2]
 8007620:	0705c903 	.word	0x0705c903
 8007624:	0b09      	.short	0x0b09
 8007626:	2200      	movs	r2, #0
 8007628:	e79e      	b.n	8007568 <UART_SetConfig+0x108>
 800762a:	2208      	movs	r2, #8
 800762c:	e79c      	b.n	8007568 <UART_SetConfig+0x108>
 800762e:	2210      	movs	r2, #16
 8007630:	e79a      	b.n	8007568 <UART_SetConfig+0x108>
 8007632:	2220      	movs	r2, #32
 8007634:	e798      	b.n	8007568 <UART_SetConfig+0x108>
 8007636:	2240      	movs	r2, #64	@ 0x40
 8007638:	e796      	b.n	8007568 <UART_SetConfig+0x108>
 800763a:	2280      	movs	r2, #128	@ 0x80
 800763c:	e794      	b.n	8007568 <UART_SetConfig+0x108>
 800763e:	4a22      	ldr	r2, [pc, #136]	@ (80076c8 <UART_SetConfig+0x268>)
 8007640:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007642:	f002 0207 	and.w	r2, r2, #7
 8007646:	2a05      	cmp	r2, #5
 8007648:	d80e      	bhi.n	8007668 <UART_SetConfig+0x208>
 800764a:	e8df f002 	tbb	[pc, r2]
 800764e:	b403      	.short	0xb403
 8007650:	0b090705 	.word	0x0b090705
 8007654:	2200      	movs	r2, #0
 8007656:	e787      	b.n	8007568 <UART_SetConfig+0x108>
 8007658:	2208      	movs	r2, #8
 800765a:	e785      	b.n	8007568 <UART_SetConfig+0x108>
 800765c:	2210      	movs	r2, #16
 800765e:	e783      	b.n	8007568 <UART_SetConfig+0x108>
 8007660:	2220      	movs	r2, #32
 8007662:	e781      	b.n	8007568 <UART_SetConfig+0x108>
 8007664:	2240      	movs	r2, #64	@ 0x40
 8007666:	e77f      	b.n	8007568 <UART_SetConfig+0x108>
 8007668:	2280      	movs	r2, #128	@ 0x80
 800766a:	e77d      	b.n	8007568 <UART_SetConfig+0x108>
 800766c:	4a16      	ldr	r2, [pc, #88]	@ (80076c8 <UART_SetConfig+0x268>)
 800766e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007670:	f002 0207 	and.w	r2, r2, #7
 8007674:	2a05      	cmp	r2, #5
 8007676:	d80e      	bhi.n	8007696 <UART_SetConfig+0x236>
 8007678:	e8df f002 	tbb	[pc, r2]
 800767c:	07059f03 	.word	0x07059f03
 8007680:	0b09      	.short	0x0b09
 8007682:	2200      	movs	r2, #0
 8007684:	e770      	b.n	8007568 <UART_SetConfig+0x108>
 8007686:	2208      	movs	r2, #8
 8007688:	e76e      	b.n	8007568 <UART_SetConfig+0x108>
 800768a:	2210      	movs	r2, #16
 800768c:	e76c      	b.n	8007568 <UART_SetConfig+0x108>
 800768e:	2220      	movs	r2, #32
 8007690:	e76a      	b.n	8007568 <UART_SetConfig+0x108>
 8007692:	2240      	movs	r2, #64	@ 0x40
 8007694:	e768      	b.n	8007568 <UART_SetConfig+0x108>
 8007696:	2280      	movs	r2, #128	@ 0x80
 8007698:	e766      	b.n	8007568 <UART_SetConfig+0x108>
 800769a:	bf00      	nop
 800769c:	cfff69f3 	.word	0xcfff69f3
 80076a0:	58000c00 	.word	0x58000c00
 80076a4:	11fff4ff 	.word	0x11fff4ff
 80076a8:	40011000 	.word	0x40011000
 80076ac:	40004400 	.word	0x40004400
 80076b0:	40004800 	.word	0x40004800
 80076b4:	40004c00 	.word	0x40004c00
 80076b8:	40005000 	.word	0x40005000
 80076bc:	40011400 	.word	0x40011400
 80076c0:	40007800 	.word	0x40007800
 80076c4:	40007c00 	.word	0x40007c00
 80076c8:	58024400 	.word	0x58024400
 80076cc:	4a7d      	ldr	r2, [pc, #500]	@ (80078c4 <UART_SetConfig+0x464>)
 80076ce:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80076d0:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80076d4:	2a28      	cmp	r2, #40	@ 0x28
 80076d6:	d820      	bhi.n	800771a <UART_SetConfig+0x2ba>
 80076d8:	e8df f002 	tbb	[pc, r2]
 80076dc:	1f1f1f15 	.word	0x1f1f1f15
 80076e0:	1f1f1f1f 	.word	0x1f1f1f1f
 80076e4:	1f1f1f71 	.word	0x1f1f1f71
 80076e8:	1f1f1f1f 	.word	0x1f1f1f1f
 80076ec:	1f1f1f17 	.word	0x1f1f1f17
 80076f0:	1f1f1f1f 	.word	0x1f1f1f1f
 80076f4:	1f1f1f19 	.word	0x1f1f1f19
 80076f8:	1f1f1f1f 	.word	0x1f1f1f1f
 80076fc:	1f1f1f1b 	.word	0x1f1f1f1b
 8007700:	1f1f1f1f 	.word	0x1f1f1f1f
 8007704:	1d          	.byte	0x1d
 8007705:	00          	.byte	0x00
 8007706:	2201      	movs	r2, #1
 8007708:	e72e      	b.n	8007568 <UART_SetConfig+0x108>
 800770a:	2208      	movs	r2, #8
 800770c:	e72c      	b.n	8007568 <UART_SetConfig+0x108>
 800770e:	2210      	movs	r2, #16
 8007710:	e72a      	b.n	8007568 <UART_SetConfig+0x108>
 8007712:	2220      	movs	r2, #32
 8007714:	e728      	b.n	8007568 <UART_SetConfig+0x108>
 8007716:	2240      	movs	r2, #64	@ 0x40
 8007718:	e726      	b.n	8007568 <UART_SetConfig+0x108>
 800771a:	2280      	movs	r2, #128	@ 0x80
 800771c:	e724      	b.n	8007568 <UART_SetConfig+0x108>
 800771e:	4a69      	ldr	r2, [pc, #420]	@ (80078c4 <UART_SetConfig+0x464>)
 8007720:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007722:	f002 0207 	and.w	r2, r2, #7
 8007726:	2a05      	cmp	r2, #5
 8007728:	d80e      	bhi.n	8007748 <UART_SetConfig+0x2e8>
 800772a:	e8df f002 	tbb	[pc, r2]
 800772e:	4a03      	.short	0x4a03
 8007730:	0b090705 	.word	0x0b090705
 8007734:	2200      	movs	r2, #0
 8007736:	e717      	b.n	8007568 <UART_SetConfig+0x108>
 8007738:	2208      	movs	r2, #8
 800773a:	e715      	b.n	8007568 <UART_SetConfig+0x108>
 800773c:	2210      	movs	r2, #16
 800773e:	e713      	b.n	8007568 <UART_SetConfig+0x108>
 8007740:	2220      	movs	r2, #32
 8007742:	e711      	b.n	8007568 <UART_SetConfig+0x108>
 8007744:	2240      	movs	r2, #64	@ 0x40
 8007746:	e70f      	b.n	8007568 <UART_SetConfig+0x108>
 8007748:	2280      	movs	r2, #128	@ 0x80
 800774a:	e70d      	b.n	8007568 <UART_SetConfig+0x108>
 800774c:	4a5d      	ldr	r2, [pc, #372]	@ (80078c4 <UART_SetConfig+0x464>)
 800774e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007750:	f002 0207 	and.w	r2, r2, #7
 8007754:	2a05      	cmp	r2, #5
 8007756:	d80e      	bhi.n	8007776 <UART_SetConfig+0x316>
 8007758:	e8df f002 	tbb	[pc, r2]
 800775c:	07053503 	.word	0x07053503
 8007760:	0b09      	.short	0x0b09
 8007762:	2200      	movs	r2, #0
 8007764:	e700      	b.n	8007568 <UART_SetConfig+0x108>
 8007766:	2208      	movs	r2, #8
 8007768:	e6fe      	b.n	8007568 <UART_SetConfig+0x108>
 800776a:	2210      	movs	r2, #16
 800776c:	e6fc      	b.n	8007568 <UART_SetConfig+0x108>
 800776e:	2220      	movs	r2, #32
 8007770:	e6fa      	b.n	8007568 <UART_SetConfig+0x108>
 8007772:	2240      	movs	r2, #64	@ 0x40
 8007774:	e6f8      	b.n	8007568 <UART_SetConfig+0x108>
 8007776:	2280      	movs	r2, #128	@ 0x80
 8007778:	e6f6      	b.n	8007568 <UART_SetConfig+0x108>
 800777a:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 800777e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007780:	f002 0207 	and.w	r2, r2, #7
 8007784:	2a05      	cmp	r2, #5
 8007786:	d80e      	bhi.n	80077a6 <UART_SetConfig+0x346>
 8007788:	e8df f002 	tbb	[pc, r2]
 800778c:	07051f03 	.word	0x07051f03
 8007790:	0b09      	.short	0x0b09
 8007792:	2202      	movs	r2, #2
 8007794:	e6e8      	b.n	8007568 <UART_SetConfig+0x108>
 8007796:	2208      	movs	r2, #8
 8007798:	e6e6      	b.n	8007568 <UART_SetConfig+0x108>
 800779a:	2210      	movs	r2, #16
 800779c:	e6e4      	b.n	8007568 <UART_SetConfig+0x108>
 800779e:	2220      	movs	r2, #32
 80077a0:	e6e2      	b.n	8007568 <UART_SetConfig+0x108>
 80077a2:	2240      	movs	r2, #64	@ 0x40
 80077a4:	e6e0      	b.n	8007568 <UART_SetConfig+0x108>
 80077a6:	2280      	movs	r2, #128	@ 0x80
 80077a8:	e6de      	b.n	8007568 <UART_SetConfig+0x108>
 80077aa:	2204      	movs	r2, #4
 80077ac:	e6dc      	b.n	8007568 <UART_SetConfig+0x108>
 80077ae:	2204      	movs	r2, #4
 80077b0:	e6da      	b.n	8007568 <UART_SetConfig+0x108>
 80077b2:	2204      	movs	r2, #4
 80077b4:	e6d8      	b.n	8007568 <UART_SetConfig+0x108>
 80077b6:	2204      	movs	r2, #4
 80077b8:	e6d6      	b.n	8007568 <UART_SetConfig+0x108>
 80077ba:	2204      	movs	r2, #4
 80077bc:	e6d4      	b.n	8007568 <UART_SetConfig+0x108>
 80077be:	2204      	movs	r2, #4
 80077c0:	e6d2      	b.n	8007568 <UART_SetConfig+0x108>
 80077c2:	2204      	movs	r2, #4
 80077c4:	e6d0      	b.n	8007568 <UART_SetConfig+0x108>
 80077c6:	2204      	movs	r2, #4
 80077c8:	e6ce      	b.n	8007568 <UART_SetConfig+0x108>
 80077ca:	2204      	movs	r2, #4
 80077cc:	e6cc      	b.n	8007568 <UART_SetConfig+0x108>
    switch (clocksource)
 80077ce:	2a20      	cmp	r2, #32
 80077d0:	d827      	bhi.n	8007822 <UART_SetConfig+0x3c2>
 80077d2:	2a02      	cmp	r2, #2
 80077d4:	f0c0 8118 	bcc.w	8007a08 <UART_SetConfig+0x5a8>
 80077d8:	3a02      	subs	r2, #2
 80077da:	2a1e      	cmp	r2, #30
 80077dc:	f200 8116 	bhi.w	8007a0c <UART_SetConfig+0x5ac>
 80077e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80077e4:	01140026 	.word	0x01140026
 80077e8:	01140056 	.word	0x01140056
 80077ec:	01140114 	.word	0x01140114
 80077f0:	0114005b 	.word	0x0114005b
 80077f4:	01140114 	.word	0x01140114
 80077f8:	01140114 	.word	0x01140114
 80077fc:	01140114 	.word	0x01140114
 8007800:	01140060 	.word	0x01140060
 8007804:	01140114 	.word	0x01140114
 8007808:	01140114 	.word	0x01140114
 800780c:	01140114 	.word	0x01140114
 8007810:	01140114 	.word	0x01140114
 8007814:	01140114 	.word	0x01140114
 8007818:	01140114 	.word	0x01140114
 800781c:	01140114 	.word	0x01140114
 8007820:	006c      	.short	0x006c
 8007822:	2a40      	cmp	r2, #64	@ 0x40
 8007824:	d102      	bne.n	800782c <UART_SetConfig+0x3cc>
        pclk = (uint32_t) LSE_VALUE;
 8007826:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800782a:	e006      	b.n	800783a <UART_SetConfig+0x3da>
    switch (clocksource)
 800782c:	2001      	movs	r0, #1
 800782e:	e0fe      	b.n	8007a2e <UART_SetConfig+0x5ce>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007830:	f7ff fb08 	bl	8006e44 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8007834:	2800      	cmp	r0, #0
 8007836:	f000 80eb 	beq.w	8007a10 <UART_SetConfig+0x5b0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800783a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800783c:	4b22      	ldr	r3, [pc, #136]	@ (80078c8 <UART_SetConfig+0x468>)
 800783e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007842:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007846:	6865      	ldr	r5, [r4, #4]
 8007848:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800784c:	4299      	cmp	r1, r3
 800784e:	f200 80e1 	bhi.w	8007a14 <UART_SetConfig+0x5b4>
 8007852:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007856:	f200 80df 	bhi.w	8007a18 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800785a:	2600      	movs	r6, #0
 800785c:	4633      	mov	r3, r6
 800785e:	4631      	mov	r1, r6
 8007860:	f7f8 fd8e 	bl	8000380 <__aeabi_uldivmod>
 8007864:	0209      	lsls	r1, r1, #8
 8007866:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800786a:	0200      	lsls	r0, r0, #8
 800786c:	086b      	lsrs	r3, r5, #1
 800786e:	18c0      	adds	r0, r0, r3
 8007870:	462a      	mov	r2, r5
 8007872:	4633      	mov	r3, r6
 8007874:	f141 0100 	adc.w	r1, r1, #0
 8007878:	f7f8 fd82 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800787c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007880:	4b12      	ldr	r3, [pc, #72]	@ (80078cc <UART_SetConfig+0x46c>)
 8007882:	429a      	cmp	r2, r3
 8007884:	f200 80ca 	bhi.w	8007a1c <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	60d8      	str	r0, [r3, #12]
 800788c:	4630      	mov	r0, r6
 800788e:	e0ce      	b.n	8007a2e <UART_SetConfig+0x5ce>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007890:	a803      	add	r0, sp, #12
 8007892:	f7ff fae9 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007896:	9804      	ldr	r0, [sp, #16]
        break;
 8007898:	e7cc      	b.n	8007834 <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800789a:	4668      	mov	r0, sp
 800789c:	f7ff fbe4 	bl	8007068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078a0:	9801      	ldr	r0, [sp, #4]
        break;
 80078a2:	e7c7      	b.n	8007834 <UART_SetConfig+0x3d4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078a4:	4b07      	ldr	r3, [pc, #28]	@ (80078c4 <UART_SetConfig+0x464>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f013 0f20 	tst.w	r3, #32
 80078ac:	d008      	beq.n	80078c0 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078ae:	4b05      	ldr	r3, [pc, #20]	@ (80078c4 <UART_SetConfig+0x464>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80078b6:	4806      	ldr	r0, [pc, #24]	@ (80078d0 <UART_SetConfig+0x470>)
 80078b8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80078ba:	e7be      	b.n	800783a <UART_SetConfig+0x3da>
    switch (clocksource)
 80078bc:	4805      	ldr	r0, [pc, #20]	@ (80078d4 <UART_SetConfig+0x474>)
 80078be:	e7bc      	b.n	800783a <UART_SetConfig+0x3da>
          pclk = (uint32_t) HSI_VALUE;
 80078c0:	4803      	ldr	r0, [pc, #12]	@ (80078d0 <UART_SetConfig+0x470>)
 80078c2:	e7ba      	b.n	800783a <UART_SetConfig+0x3da>
 80078c4:	58024400 	.word	0x58024400
 80078c8:	0800e3c0 	.word	0x0800e3c0
 80078cc:	000ffcff 	.word	0x000ffcff
 80078d0:	03d09000 	.word	0x03d09000
 80078d4:	003d0900 	.word	0x003d0900
    switch (clocksource)
 80078d8:	2a20      	cmp	r2, #32
 80078da:	d815      	bhi.n	8007908 <UART_SetConfig+0x4a8>
 80078dc:	2a20      	cmp	r2, #32
 80078de:	f200 809f 	bhi.w	8007a20 <UART_SetConfig+0x5c0>
 80078e2:	e8df f002 	tbb	[pc, r2]
 80078e6:	3615      	.short	0x3615
 80078e8:	9d399d9d 	.word	0x9d399d9d
 80078ec:	9d3e9d9d 	.word	0x9d3e9d9d
 80078f0:	9d9d9d9d 	.word	0x9d9d9d9d
 80078f4:	9d439d9d 	.word	0x9d439d9d
 80078f8:	9d9d9d9d 	.word	0x9d9d9d9d
 80078fc:	9d9d9d9d 	.word	0x9d9d9d9d
 8007900:	9d9d9d9d 	.word	0x9d9d9d9d
 8007904:	9d9d      	.short	0x9d9d
 8007906:	4f          	.byte	0x4f
 8007907:	00          	.byte	0x00
 8007908:	2a40      	cmp	r2, #64	@ 0x40
 800790a:	d006      	beq.n	800791a <UART_SetConfig+0x4ba>
 800790c:	2001      	movs	r0, #1
 800790e:	e08e      	b.n	8007a2e <UART_SetConfig+0x5ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fe fc16 	bl	8006140 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007914:	2800      	cmp	r0, #0
 8007916:	f000 8085 	beq.w	8007a24 <UART_SetConfig+0x5c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800791c:	4b4b      	ldr	r3, [pc, #300]	@ (8007a4c <UART_SetConfig+0x5ec>)
 800791e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007922:	fbb0 f0f3 	udiv	r0, r0, r3
 8007926:	6862      	ldr	r2, [r4, #4]
 8007928:	0853      	lsrs	r3, r2, #1
 800792a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800792e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007932:	f1a3 0110 	sub.w	r1, r3, #16
 8007936:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800793a:	4291      	cmp	r1, r2
 800793c:	d874      	bhi.n	8007a28 <UART_SetConfig+0x5c8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800793e:	b29a      	uxth	r2, r3
 8007940:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007944:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007948:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	60d3      	str	r3, [r2, #12]
 800794e:	2000      	movs	r0, #0
 8007950:	e06d      	b.n	8007a2e <UART_SetConfig+0x5ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007952:	f7fe fc07 	bl	8006164 <HAL_RCC_GetPCLK2Freq>
        break;
 8007956:	e7dd      	b.n	8007914 <UART_SetConfig+0x4b4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007958:	a803      	add	r0, sp, #12
 800795a:	f7ff fa85 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800795e:	9804      	ldr	r0, [sp, #16]
        break;
 8007960:	e7d8      	b.n	8007914 <UART_SetConfig+0x4b4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007962:	4668      	mov	r0, sp
 8007964:	f7ff fb80 	bl	8007068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007968:	9801      	ldr	r0, [sp, #4]
        break;
 800796a:	e7d3      	b.n	8007914 <UART_SetConfig+0x4b4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800796c:	4b38      	ldr	r3, [pc, #224]	@ (8007a50 <UART_SetConfig+0x5f0>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f013 0f20 	tst.w	r3, #32
 8007974:	d008      	beq.n	8007988 <UART_SetConfig+0x528>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007976:	4b36      	ldr	r3, [pc, #216]	@ (8007a50 <UART_SetConfig+0x5f0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800797e:	4835      	ldr	r0, [pc, #212]	@ (8007a54 <UART_SetConfig+0x5f4>)
 8007980:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8007982:	e7ca      	b.n	800791a <UART_SetConfig+0x4ba>
    switch (clocksource)
 8007984:	4834      	ldr	r0, [pc, #208]	@ (8007a58 <UART_SetConfig+0x5f8>)
 8007986:	e7c8      	b.n	800791a <UART_SetConfig+0x4ba>
          pclk = (uint32_t) HSI_VALUE;
 8007988:	4832      	ldr	r0, [pc, #200]	@ (8007a54 <UART_SetConfig+0x5f4>)
 800798a:	e7c6      	b.n	800791a <UART_SetConfig+0x4ba>
    switch (clocksource)
 800798c:	2a40      	cmp	r2, #64	@ 0x40
 800798e:	d102      	bne.n	8007996 <UART_SetConfig+0x536>
        pclk = (uint32_t) LSE_VALUE;
 8007990:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007994:	e005      	b.n	80079a2 <UART_SetConfig+0x542>
    switch (clocksource)
 8007996:	2001      	movs	r0, #1
 8007998:	e049      	b.n	8007a2e <UART_SetConfig+0x5ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 800799a:	f7fe fbd1 	bl	8006140 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800799e:	2800      	cmp	r0, #0
 80079a0:	d04f      	beq.n	8007a42 <UART_SetConfig+0x5e2>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80079a4:	4b29      	ldr	r3, [pc, #164]	@ (8007a4c <UART_SetConfig+0x5ec>)
 80079a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80079aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80079b4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b8:	f1a0 0210 	sub.w	r2, r0, #16
 80079bc:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d840      	bhi.n	8007a46 <UART_SetConfig+0x5e6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	b280      	uxth	r0, r0
 80079c8:	60d8      	str	r0, [r3, #12]
 80079ca:	2000      	movs	r0, #0
 80079cc:	e02f      	b.n	8007a2e <UART_SetConfig+0x5ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ce:	f7fe fbc9 	bl	8006164 <HAL_RCC_GetPCLK2Freq>
        break;
 80079d2:	e7e4      	b.n	800799e <UART_SetConfig+0x53e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d4:	a803      	add	r0, sp, #12
 80079d6:	f7ff fa47 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079da:	9804      	ldr	r0, [sp, #16]
        break;
 80079dc:	e7df      	b.n	800799e <UART_SetConfig+0x53e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079de:	4668      	mov	r0, sp
 80079e0:	f7ff fb42 	bl	8007068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079e4:	9801      	ldr	r0, [sp, #4]
        break;
 80079e6:	e7da      	b.n	800799e <UART_SetConfig+0x53e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e8:	4b19      	ldr	r3, [pc, #100]	@ (8007a50 <UART_SetConfig+0x5f0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f013 0f20 	tst.w	r3, #32
 80079f0:	d008      	beq.n	8007a04 <UART_SetConfig+0x5a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079f2:	4b17      	ldr	r3, [pc, #92]	@ (8007a50 <UART_SetConfig+0x5f0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80079fa:	4816      	ldr	r0, [pc, #88]	@ (8007a54 <UART_SetConfig+0x5f4>)
 80079fc:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80079fe:	e7d0      	b.n	80079a2 <UART_SetConfig+0x542>
    switch (clocksource)
 8007a00:	4815      	ldr	r0, [pc, #84]	@ (8007a58 <UART_SetConfig+0x5f8>)
 8007a02:	e7ce      	b.n	80079a2 <UART_SetConfig+0x542>
          pclk = (uint32_t) HSI_VALUE;
 8007a04:	4813      	ldr	r0, [pc, #76]	@ (8007a54 <UART_SetConfig+0x5f4>)
 8007a06:	e7cc      	b.n	80079a2 <UART_SetConfig+0x542>
    switch (clocksource)
 8007a08:	2001      	movs	r0, #1
 8007a0a:	e010      	b.n	8007a2e <UART_SetConfig+0x5ce>
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	e00e      	b.n	8007a2e <UART_SetConfig+0x5ce>
 8007a10:	2000      	movs	r0, #0
 8007a12:	e00c      	b.n	8007a2e <UART_SetConfig+0x5ce>
        ret = HAL_ERROR;
 8007a14:	2001      	movs	r0, #1
 8007a16:	e00a      	b.n	8007a2e <UART_SetConfig+0x5ce>
 8007a18:	2001      	movs	r0, #1
 8007a1a:	e008      	b.n	8007a2e <UART_SetConfig+0x5ce>
          ret = HAL_ERROR;
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	e006      	b.n	8007a2e <UART_SetConfig+0x5ce>
    switch (clocksource)
 8007a20:	2001      	movs	r0, #1
 8007a22:	e004      	b.n	8007a2e <UART_SetConfig+0x5ce>
 8007a24:	2000      	movs	r0, #0
 8007a26:	e002      	b.n	8007a2e <UART_SetConfig+0x5ce>
        ret = HAL_ERROR;
 8007a28:	2001      	movs	r0, #1
 8007a2a:	e000      	b.n	8007a2e <UART_SetConfig+0x5ce>
    switch (clocksource)
 8007a2c:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a34:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a3c:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8007a3e:	b006      	add	sp, #24
 8007a40:	bd70      	pop	{r4, r5, r6, pc}
 8007a42:	2000      	movs	r0, #0
 8007a44:	e7f3      	b.n	8007a2e <UART_SetConfig+0x5ce>
        ret = HAL_ERROR;
 8007a46:	2001      	movs	r0, #1
 8007a48:	e7f1      	b.n	8007a2e <UART_SetConfig+0x5ce>
 8007a4a:	bf00      	nop
 8007a4c:	0800e3c0 	.word	0x0800e3c0
 8007a50:	58024400 	.word	0x58024400
 8007a54:	03d09000 	.word	0x03d09000
 8007a58:	003d0900 	.word	0x003d0900

08007a5c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a5c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007a5e:	f013 0f08 	tst.w	r3, #8
 8007a62:	d006      	beq.n	8007a72 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a64:	6802      	ldr	r2, [r0, #0]
 8007a66:	6853      	ldr	r3, [r2, #4]
 8007a68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a6c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a72:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007a74:	f013 0f01 	tst.w	r3, #1
 8007a78:	d006      	beq.n	8007a88 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a7a:	6802      	ldr	r2, [r0, #0]
 8007a7c:	6853      	ldr	r3, [r2, #4]
 8007a7e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007a82:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007a84:	430b      	orrs	r3, r1
 8007a86:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a88:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007a8a:	f013 0f02 	tst.w	r3, #2
 8007a8e:	d006      	beq.n	8007a9e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a90:	6802      	ldr	r2, [r0, #0]
 8007a92:	6853      	ldr	r3, [r2, #4]
 8007a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a98:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a9e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007aa0:	f013 0f04 	tst.w	r3, #4
 8007aa4:	d006      	beq.n	8007ab4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aa6:	6802      	ldr	r2, [r0, #0]
 8007aa8:	6853      	ldr	r3, [r2, #4]
 8007aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007aae:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ab4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007ab6:	f013 0f10 	tst.w	r3, #16
 8007aba:	d006      	beq.n	8007aca <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007abc:	6802      	ldr	r2, [r0, #0]
 8007abe:	6893      	ldr	r3, [r2, #8]
 8007ac0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ac4:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aca:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007acc:	f013 0f20 	tst.w	r3, #32
 8007ad0:	d006      	beq.n	8007ae0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ad2:	6802      	ldr	r2, [r0, #0]
 8007ad4:	6893      	ldr	r3, [r2, #8]
 8007ad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ada:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ae0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007ae2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007ae6:	d00a      	beq.n	8007afe <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ae8:	6802      	ldr	r2, [r0, #0]
 8007aea:	6853      	ldr	r3, [r2, #4]
 8007aec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007af0:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8007af2:	430b      	orrs	r3, r1
 8007af4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007af6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007af8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007afc:	d00b      	beq.n	8007b16 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007afe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b04:	d006      	beq.n	8007b14 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b06:	6802      	ldr	r2, [r0, #0]
 8007b08:	6853      	ldr	r3, [r2, #4]
 8007b0a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007b0e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007b10:	430b      	orrs	r3, r1
 8007b12:	6053      	str	r3, [r2, #4]
}
 8007b14:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b16:	6802      	ldr	r2, [r0, #0]
 8007b18:	6853      	ldr	r3, [r2, #4]
 8007b1a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007b1e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6053      	str	r3, [r2, #4]
 8007b24:	e7eb      	b.n	8007afe <UART_AdvFeatureConfig+0xa2>

08007b26 <UART_WaitOnFlagUntilTimeout>:
{
 8007b26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	460e      	mov	r6, r1
 8007b2e:	4617      	mov	r7, r2
 8007b30:	4699      	mov	r9, r3
 8007b32:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	69dc      	ldr	r4, [r3, #28]
 8007b3a:	ea36 0404 	bics.w	r4, r6, r4
 8007b3e:	bf0c      	ite	eq
 8007b40:	2401      	moveq	r4, #1
 8007b42:	2400      	movne	r4, #0
 8007b44:	42bc      	cmp	r4, r7
 8007b46:	d13a      	bne.n	8007bbe <UART_WaitOnFlagUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8007b48:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007b4c:	d0f3      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b4e:	f7fa fdb3 	bl	80026b8 <HAL_GetTick>
 8007b52:	eba0 0009 	sub.w	r0, r0, r9
 8007b56:	4540      	cmp	r0, r8
 8007b58:	d834      	bhi.n	8007bc4 <UART_WaitOnFlagUntilTimeout+0x9e>
 8007b5a:	f1b8 0f00 	cmp.w	r8, #0
 8007b5e:	d033      	beq.n	8007bc8 <UART_WaitOnFlagUntilTimeout+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	f012 0f04 	tst.w	r2, #4
 8007b68:	d0e5      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x10>
 8007b6a:	f1b6 0240 	subs.w	r2, r6, #64	@ 0x40
 8007b6e:	bf18      	it	ne
 8007b70:	2201      	movne	r2, #1
 8007b72:	2e80      	cmp	r6, #128	@ 0x80
 8007b74:	d0df      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x10>
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	d0dd      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	f012 0f08 	tst.w	r2, #8
 8007b80:	d111      	bne.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8007b88:	d0d5      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b8e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8007b90:	4628      	mov	r0, r5
 8007b92:	f7ff fc39 	bl	8007408 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b96:	2320      	movs	r3, #32
 8007b98:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007ba2:	2003      	movs	r0, #3
 8007ba4:	e00c      	b.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ba6:	2408      	movs	r4, #8
 8007ba8:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7ff fc2c 	bl	8007408 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bb0:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 8007bba:	2001      	movs	r0, #1
 8007bbc:	e000      	b.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x9a>
  return HAL_OK;
 8007bbe:	2000      	movs	r0, #0
}
 8007bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8007bc4:	2003      	movs	r0, #3
 8007bc6:	e7fb      	b.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x9a>
 8007bc8:	2003      	movs	r0, #3
 8007bca:	e7f9      	b.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x9a>

08007bcc <UART_CheckIdleState>:
{
 8007bcc:	b530      	push	{r4, r5, lr}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8007bd8:	f7fa fd6e 	bl	80026b8 <HAL_GetTick>
 8007bdc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bde:	6822      	ldr	r2, [r4, #0]
 8007be0:	6812      	ldr	r2, [r2, #0]
 8007be2:	f012 0f08 	tst.w	r2, #8
 8007be6:	d110      	bne.n	8007c0a <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f013 0f04 	tst.w	r3, #4
 8007bf0:	d128      	bne.n	8007c44 <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 8007bf2:	2320      	movs	r3, #32
 8007bf4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bf8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c00:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8007c02:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8007c06:	b003      	add	sp, #12
 8007c08:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4603      	mov	r3, r0
 8007c12:	2200      	movs	r2, #0
 8007c14:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f7ff ff84 	bl	8007b26 <UART_WaitOnFlagUntilTimeout>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d0e2      	beq.n	8007be8 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	e852 3f00 	ldrex	r3, [r2]
 8007c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	e842 3100 	strex	r1, r3, [r2]
 8007c30:	2900      	cmp	r1, #0
 8007c32:	d1f6      	bne.n	8007c22 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8007c34:	2320      	movs	r3, #32
 8007c36:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 8007c40:	2003      	movs	r0, #3
 8007c42:	e7e0      	b.n	8007c06 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c52:	4620      	mov	r0, r4
 8007c54:	f7ff ff67 	bl	8007b26 <UART_WaitOnFlagUntilTimeout>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d0ca      	beq.n	8007bf2 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	e852 3f00 	ldrex	r3, [r2]
 8007c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	e842 3100 	strex	r1, r3, [r2]
 8007c6a:	2900      	cmp	r1, #0
 8007c6c:	d1f6      	bne.n	8007c5c <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	f102 0308 	add.w	r3, r2, #8
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	3208      	adds	r2, #8
 8007c7e:	e842 3100 	strex	r1, r3, [r2]
 8007c82:	2900      	cmp	r1, #0
 8007c84:	d1f3      	bne.n	8007c6e <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 8007c86:	2320      	movs	r3, #32
 8007c88:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 8007c92:	2003      	movs	r0, #3
 8007c94:	e7b7      	b.n	8007c06 <UART_CheckIdleState+0x3a>

08007c96 <HAL_UART_Init>:
  if (huart == NULL)
 8007c96:	b378      	cbz	r0, 8007cf8 <HAL_UART_Init+0x62>
{
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007c9c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8007ca0:	b30b      	cbz	r3, 8007ce6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007ca2:	2324      	movs	r3, #36	@ 0x24
 8007ca4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	6813      	ldr	r3, [r2, #0]
 8007cac:	f023 0301 	bic.w	r3, r3, #1
 8007cb0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cb2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007cb4:	b9e3      	cbnz	r3, 8007cf0 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff fbd2 	bl	8007460 <UART_SetConfig>
 8007cbc:	2801      	cmp	r0, #1
 8007cbe:	d011      	beq.n	8007ce4 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cc0:	6822      	ldr	r2, [r4, #0]
 8007cc2:	6853      	ldr	r3, [r2, #4]
 8007cc4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8007cc8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	6893      	ldr	r3, [r2, #8]
 8007cce:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8007cd2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007cd4:	6822      	ldr	r2, [r4, #0]
 8007cd6:	6813      	ldr	r3, [r2, #0]
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff ff74 	bl	8007bcc <UART_CheckIdleState>
}
 8007ce4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007ce6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8007cea:	f7fa fbfb 	bl	80024e4 <HAL_UART_MspInit>
 8007cee:	e7d8      	b.n	8007ca2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7ff feb3 	bl	8007a5c <UART_AdvFeatureConfig>
 8007cf6:	e7de      	b.n	8007cb6 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 8007cf8:	2001      	movs	r0, #1
}
 8007cfa:	4770      	bx	lr

08007cfc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cfc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007cfe:	b92b      	cbnz	r3, 8007d0c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d06:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8007d0a:	4770      	bx	lr
{
 8007d0c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d0e:	6803      	ldr	r3, [r0, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d16:	6899      	ldr	r1, [r3, #8]
 8007d18:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d1a:	4d09      	ldr	r5, [pc, #36]	@ (8007d40 <UARTEx_SetNbDataToProcess+0x44>)
 8007d1c:	5c6b      	ldrb	r3, [r5, r1]
 8007d1e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d20:	4c08      	ldr	r4, [pc, #32]	@ (8007d44 <UARTEx_SetNbDataToProcess+0x48>)
 8007d22:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d24:	fb93 f3f1 	sdiv	r3, r3, r1
 8007d28:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d2c:	5cab      	ldrb	r3, [r5, r2]
 8007d2e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d30:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d32:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d36:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8007d3a:	bc30      	pop	{r4, r5}
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	0800e3e0 	.word	0x0800e3e0
 8007d44:	0800e3d8 	.word	0x0800e3d8

08007d48 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007d48:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d018      	beq.n	8007d82 <HAL_UARTEx_DisableFifoMode+0x3a>
 8007d50:	2301      	movs	r3, #1
 8007d52:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007d56:	2324      	movs	r3, #36	@ 0x24
 8007d58:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d5c:	6803      	ldr	r3, [r0, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	f021 0101 	bic.w	r1, r1, #1
 8007d66:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d68:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d70:	6801      	ldr	r1, [r0, #0]
 8007d72:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007d7a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8007d7e:	4618      	mov	r0, r3
 8007d80:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007d82:	2002      	movs	r0, #2
}
 8007d84:	4770      	bx	lr

08007d86 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007d86:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007d88:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d01d      	beq.n	8007dcc <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007d90:	4604      	mov	r4, r0
 8007d92:	2301      	movs	r3, #1
 8007d94:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007d98:	2324      	movs	r3, #36	@ 0x24
 8007d9a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d9e:	6803      	ldr	r3, [r0, #0]
 8007da0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	f022 0201 	bic.w	r2, r2, #1
 8007da8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007daa:	6802      	ldr	r2, [r0, #0]
 8007dac:	6893      	ldr	r3, [r2, #8]
 8007dae:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8007db2:	4319      	orrs	r1, r3
 8007db4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007db6:	f7ff ffa1 	bl	8007cfc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007dbe:	2320      	movs	r3, #32
 8007dc0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007dcc:	2002      	movs	r0, #2
 8007dce:	e7fc      	b.n	8007dca <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007dd0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007dd0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007dd2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d01d      	beq.n	8007e16 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007dda:	4604      	mov	r4, r0
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007de2:	2324      	movs	r3, #36	@ 0x24
 8007de4:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007de8:	6803      	ldr	r3, [r0, #0]
 8007dea:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007df4:	6802      	ldr	r2, [r0, #0]
 8007df6:	6893      	ldr	r3, [r2, #8]
 8007df8:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8007dfc:	4319      	orrs	r1, r3
 8007dfe:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007e00:	f7ff ff7c 	bl	8007cfc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007e08:	2320      	movs	r3, #32
 8007e0a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007e16:	2002      	movs	r0, #2
 8007e18:	e7fc      	b.n	8007e14 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08007e1a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007e1a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007e1c:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8007e22:	b112      	cbz	r2, 8007e2a <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 8007e24:	fab2 f282 	clz	r2, r2
 8007e28:	e01b      	b.n	8007e62 <LL_GPIO_Init+0x48>
    return 32U;
 8007e2a:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007e2c:	e019      	b.n	8007e62 <LL_GPIO_Init+0x48>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007e2e:	68c4      	ldr	r4, [r0, #12]
 8007e30:	fb03 fe03 	mul.w	lr, r3, r3
 8007e34:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8007e38:	ea6f 0c05 	mvn.w	ip, r5
 8007e3c:	ea24 0405 	bic.w	r4, r4, r5
 8007e40:	690d      	ldr	r5, [r1, #16]
 8007e42:	fb0e f505 	mul.w	r5, lr, r5
 8007e46:	432c      	orrs	r4, r5
 8007e48:	60c4      	str	r4, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007e4a:	684c      	ldr	r4, [r1, #4]
 8007e4c:	2c02      	cmp	r4, #2
 8007e4e:	d02d      	beq.n	8007eac <LL_GPIO_Init+0x92>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007e50:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007e52:	6803      	ldr	r3, [r0, #0]
 8007e54:	ea0c 0303 	and.w	r3, ip, r3
 8007e58:	fb0e f404 	mul.w	r4, lr, r4
 8007e5c:	4323      	orrs	r3, r4
 8007e5e:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8007e60:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007e62:	680b      	ldr	r3, [r1, #0]
 8007e64:	fa33 f402 	lsrs.w	r4, r3, r2
 8007e68:	d043      	beq.n	8007ef2 <LL_GPIO_Init+0xd8>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007e6a:	f04f 0c01 	mov.w	ip, #1
 8007e6e:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00000000U)
 8007e72:	ea1c 0303 	ands.w	r3, ip, r3
 8007e76:	d0f3      	beq.n	8007e60 <LL_GPIO_Init+0x46>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007e78:	684c      	ldr	r4, [r1, #4]
 8007e7a:	3c01      	subs	r4, #1
 8007e7c:	2c01      	cmp	r4, #1
 8007e7e:	d8d6      	bhi.n	8007e2e <LL_GPIO_Init+0x14>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007e80:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007e82:	6884      	ldr	r4, [r0, #8]
 8007e84:	fb03 fc03 	mul.w	ip, r3, r3
 8007e88:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8007e8c:	ea24 0406 	bic.w	r4, r4, r6
 8007e90:	fb0c f505 	mul.w	r5, ip, r5
 8007e94:	432c      	orrs	r4, r5
 8007e96:	6084      	str	r4, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007e98:	680d      	ldr	r5, [r1, #0]
 8007e9a:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007e9c:	6844      	ldr	r4, [r0, #4]
 8007e9e:	ea24 0405 	bic.w	r4, r4, r5
 8007ea2:	fb06 f505 	mul.w	r5, r6, r5
 8007ea6:	432c      	orrs	r4, r5
 8007ea8:	6044      	str	r4, [r0, #4]
}
 8007eaa:	e7c0      	b.n	8007e2e <LL_GPIO_Init+0x14>
        if (currentpin < LL_GPIO_PIN_8)
 8007eac:	2bff      	cmp	r3, #255	@ 0xff
 8007eae:	d80e      	bhi.n	8007ece <LL_GPIO_Init+0xb4>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007eb0:	694c      	ldr	r4, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007eb2:	6a05      	ldr	r5, [r0, #32]
 8007eb4:	fb0e f603 	mul.w	r6, lr, r3
 8007eb8:	fb03 f606 	mul.w	r6, r3, r6
 8007ebc:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
 8007ec0:	ea25 0303 	bic.w	r3, r5, r3
 8007ec4:	fb06 f404 	mul.w	r4, r6, r4
 8007ec8:	4323      	orrs	r3, r4
 8007eca:	6203      	str	r3, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8007ecc:	e7c0      	b.n	8007e50 <LL_GPIO_Init+0x36>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007ece:	694c      	ldr	r4, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007ed0:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8007ed2:	0a1b      	lsrs	r3, r3, #8
 8007ed4:	fb03 f603 	mul.w	r6, r3, r3
 8007ed8:	fb03 f606 	mul.w	r6, r3, r6
 8007edc:	fb06 f303 	mul.w	r3, r6, r3
 8007ee0:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 8007ee4:	ea25 0506 	bic.w	r5, r5, r6
 8007ee8:	fb03 f404 	mul.w	r4, r3, r4
 8007eec:	432c      	orrs	r4, r5
 8007eee:	6244      	str	r4, [r0, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8007ef0:	e7ae      	b.n	8007e50 <LL_GPIO_Init+0x36>
  }

  return (SUCCESS);
}
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ef8 <LL_RCC_GetClockSource>:
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8007ef8:	b2c2      	uxtb	r2, r0
 8007efa:	4b05      	ldr	r3, [pc, #20]	@ (8007f10 <LL_RCC_GetClockSource+0x18>)
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8007efc:	58d3      	ldr	r3, [r2, r3]
 8007efe:	0e02      	lsrs	r2, r0, #24
 8007f00:	f3c0 2104 	ubfx	r1, r0, #8, #5
 8007f04:	408a      	lsls	r2, r1
 8007f06:	4013      	ands	r3, r2
 8007f08:	40cb      	lsrs	r3, r1
}
 8007f0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007f0e:	4770      	bx	lr
 8007f10:	5802444c 	.word	0x5802444c

08007f14 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8007f14:	4b04      	ldr	r3, [pc, #16]	@ (8007f28 <RCC_GetHCLKClockFreq+0x14>)
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	f003 030f 	and.w	r3, r3, #15
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007f1c:	4a03      	ldr	r2, [pc, #12]	@ (8007f2c <RCC_GetHCLKClockFreq+0x18>)
 8007f1e:	5cd3      	ldrb	r3, [r2, r3]
 8007f20:	f003 031f 	and.w	r3, r3, #31
}
 8007f24:	40d8      	lsrs	r0, r3
 8007f26:	4770      	bx	lr
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	0800e3e8 	.word	0x0800e3e8

08007f30 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8007f30:	4b04      	ldr	r3, [pc, #16]	@ (8007f44 <RCC_GetPCLK1ClockFreq+0x14>)
 8007f32:	69db      	ldr	r3, [r3, #28]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007f34:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007f38:	4a03      	ldr	r2, [pc, #12]	@ (8007f48 <RCC_GetPCLK1ClockFreq+0x18>)
 8007f3a:	5cd3      	ldrb	r3, [r2, r3]
 8007f3c:	f003 031f 	and.w	r3, r3, #31
}
 8007f40:	40d8      	lsrs	r0, r3
 8007f42:	4770      	bx	lr
 8007f44:	58024400 	.word	0x58024400
 8007f48:	0800e3e8 	.word	0x0800e3e8

08007f4c <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8007f4c:	4b04      	ldr	r3, [pc, #16]	@ (8007f60 <RCC_GetPCLK2ClockFreq+0x14>)
 8007f4e:	69db      	ldr	r3, [r3, #28]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007f50:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007f54:	4a03      	ldr	r2, [pc, #12]	@ (8007f64 <RCC_GetPCLK2ClockFreq+0x18>)
 8007f56:	5cd3      	ldrb	r3, [r2, r3]
 8007f58:	f003 031f 	and.w	r3, r3, #31
}
 8007f5c:	40d8      	lsrs	r0, r3
 8007f5e:	4770      	bx	lr
 8007f60:	58024400 	.word	0x58024400
 8007f64:	0800e3e8 	.word	0x0800e3e8

08007f68 <LL_RCC_CalcPLLClockFreq>:
{
 8007f68:	ee05 0a90 	vmov	s11, r0
 8007f6c:	ee06 1a10 	vmov	s12, r1
 8007f70:	ee07 2a90 	vmov	s15, r2
 8007f74:	ee07 3a10 	vmov	s14, r3
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8007f78:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8007f7c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8007f80:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007f8c:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8007fb4 <LL_RCC_CalcPLLClockFreq+0x4c>
 8007f90:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f98:	ee26 7aa7 	vmul.f32	s14, s13, s15
  freq = freq / (float_t)PQR;
 8007f9c:	eddd 7a00 	vldr	s15, [sp]
 8007fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa4:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8007fa8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8007fac:	ee17 0a90 	vmov	r0, s15
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	39000000 	.word	0x39000000

08007fb8 <LL_RCC_GetPLL1ClockFreq>:
{
 8007fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	4604      	mov	r4, r0
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8007fc0:	4b38      	ldr	r3, [pc, #224]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc4:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d00d      	beq.n	8007fe8 <LL_RCC_GetPLL1ClockFreq+0x30>
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d012      	beq.n	8007ff6 <LL_RCC_GetPLL1ClockFreq+0x3e>
 8007fd0:	b9c3      	cbnz	r3, 8008004 <LL_RCC_GetPLL1ClockFreq+0x4c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007fd2:	4b34      	ldr	r3, [pc, #208]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8007fd4:	681e      	ldr	r6, [r3, #0]
 8007fd6:	f016 0604 	ands.w	r6, r6, #4
 8007fda:	d014      	beq.n	8008006 <LL_RCC_GetPLL1ClockFreq+0x4e>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8007fdc:	681b      	ldr	r3, [r3, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8007fde:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007fe2:	4e31      	ldr	r6, [pc, #196]	@ (80080a8 <LL_RCC_GetPLL1ClockFreq+0xf0>)
 8007fe4:	40de      	lsrs	r6, r3
 8007fe6:	e00e      	b.n	8008006 <LL_RCC_GetPLL1ClockFreq+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8007fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8007fea:	681e      	ldr	r6, [r3, #0]
 8007fec:	f416 7680 	ands.w	r6, r6, #256	@ 0x100
 8007ff0:	d009      	beq.n	8008006 <LL_RCC_GetPLL1ClockFreq+0x4e>
        pllinputfreq = CSI_VALUE;
 8007ff2:	4e2e      	ldr	r6, [pc, #184]	@ (80080ac <LL_RCC_GetPLL1ClockFreq+0xf4>)
 8007ff4:	e007      	b.n	8008006 <LL_RCC_GetPLL1ClockFreq+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8007ff8:	681e      	ldr	r6, [r3, #0]
 8007ffa:	f416 3600 	ands.w	r6, r6, #131072	@ 0x20000
 8007ffe:	d002      	beq.n	8008006 <LL_RCC_GetPLL1ClockFreq+0x4e>
        pllinputfreq = HSE_VALUE;
 8008000:	4e2b      	ldr	r6, [pc, #172]	@ (80080b0 <LL_RCC_GetPLL1ClockFreq+0xf8>)
 8008002:	e000      	b.n	8008006 <LL_RCC_GetPLL1ClockFreq+0x4e>
  switch (pllsource)
 8008004:	2600      	movs	r6, #0
  PLL_Clocks->PLL_P_Frequency = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	6023      	str	r3, [r4, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800800a:	6063      	str	r3, [r4, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800800c:	60a3      	str	r3, [r4, #8]
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800800e:	4b25      	ldr	r3, [pc, #148]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8008010:	6a9f      	ldr	r7, [r3, #40]	@ 0x28
 8008012:	f3c7 1705 	ubfx	r7, r7, #4, #6
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8008016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800801c:	f102 0801 	add.w	r8, r2, #1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8008020:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8008022:	f015 0501 	ands.w	r5, r5, #1
 8008026:	d002      	beq.n	800802e <LL_RCC_GetPLL1ClockFreq+0x76>
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8008028:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800802a:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  if (m != 0U)
 800802e:	2f00      	cmp	r7, #0
 8008030:	d035      	beq.n	800809e <LL_RCC_GetPLL1ClockFreq+0xe6>
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8008032:	4b1c      	ldr	r3, [pc, #112]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8008034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008036:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800803a:	d00c      	beq.n	8008056 <LL_RCC_GetPLL1ClockFreq+0x9e>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800803c:	4b19      	ldr	r3, [pc, #100]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 800803e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008040:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008044:	3301      	adds	r3, #1
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	462b      	mov	r3, r5
 800804a:	4642      	mov	r2, r8
 800804c:	4639      	mov	r1, r7
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ff8a 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 8008054:	6020      	str	r0, [r4, #0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8008056:	4b13      	ldr	r3, [pc, #76]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8008058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800805e:	d00c      	beq.n	800807a <LL_RCC_GetPLL1ClockFreq+0xc2>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8008060:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008068:	3301      	adds	r3, #1
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	462b      	mov	r3, r5
 800806e:	4642      	mov	r2, r8
 8008070:	4639      	mov	r1, r7
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff ff78 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 8008078:	6060      	str	r0, [r4, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 800807a:	4b0a      	ldr	r3, [pc, #40]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8008082:	d00c      	beq.n	800809e <LL_RCC_GetPLL1ClockFreq+0xe6>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8008084:	4b07      	ldr	r3, [pc, #28]	@ (80080a4 <LL_RCC_GetPLL1ClockFreq+0xec>)
 8008086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008088:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800808c:	3301      	adds	r3, #1
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	462b      	mov	r3, r5
 8008092:	4642      	mov	r2, r8
 8008094:	4639      	mov	r1, r7
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ff66 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 800809c:	60a0      	str	r0, [r4, #8]
}
 800809e:	b002      	add	sp, #8
 80080a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a4:	58024400 	.word	0x58024400
 80080a8:	03d09000 	.word	0x03d09000
 80080ac:	003d0900 	.word	0x003d0900
 80080b0:	017d7840 	.word	0x017d7840

080080b4 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80080b4:	4b15      	ldr	r3, [pc, #84]	@ (800810c <RCC_GetSystemClockFreq+0x58>)
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
  switch (LL_RCC_GetSysClkSource())
 80080bc:	2b18      	cmp	r3, #24
 80080be:	d80e      	bhi.n	80080de <RCC_GetSystemClockFreq+0x2a>
 80080c0:	e8df f003 	tbb	[pc, r3]
 80080c4:	0d0d0d0f 	.word	0x0d0d0d0f
 80080c8:	0d0d0d0d 	.word	0x0d0d0d0d
 80080cc:	0d0d0d21 	.word	0x0d0d0d21
 80080d0:	0d0d0d0d 	.word	0x0d0d0d0d
 80080d4:	0d0d0d16 	.word	0x0d0d0d16
 80080d8:	0d0d0d0d 	.word	0x0d0d0d0d
 80080dc:	18          	.byte	0x18
 80080dd:	00          	.byte	0x00
 80080de:	2000      	movs	r0, #0
 80080e0:	4770      	bx	lr
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 80080e2:	4b0a      	ldr	r3, [pc, #40]	@ (800810c <RCC_GetSystemClockFreq+0x58>)
 80080e4:	681b      	ldr	r3, [r3, #0]
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80080e6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80080ea:	4809      	ldr	r0, [pc, #36]	@ (8008110 <RCC_GetSystemClockFreq+0x5c>)
 80080ec:	40d8      	lsrs	r0, r3
      break;
 80080ee:	4770      	bx	lr
      frequency = HSE_VALUE;
 80080f0:	4808      	ldr	r0, [pc, #32]	@ (8008114 <RCC_GetSystemClockFreq+0x60>)
      break;
 80080f2:	4770      	bx	lr
{
 80080f4:	b500      	push	{lr}
 80080f6:	b085      	sub	sp, #20
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 80080f8:	a801      	add	r0, sp, #4
 80080fa:	f7ff ff5d 	bl	8007fb8 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 80080fe:	9801      	ldr	r0, [sp, #4]
}
 8008100:	b005      	add	sp, #20
 8008102:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = CSI_VALUE;
 8008106:	4804      	ldr	r0, [pc, #16]	@ (8008118 <RCC_GetSystemClockFreq+0x64>)
}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	58024400 	.word	0x58024400
 8008110:	03d09000 	.word	0x03d09000
 8008114:	017d7840 	.word	0x017d7840
 8008118:	003d0900 	.word	0x003d0900

0800811c <LL_RCC_GetPLL2ClockFreq>:
{
 800811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8008124:	4b38      	ldr	r3, [pc, #224]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 8008126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008128:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 800812c:	2b01      	cmp	r3, #1
 800812e:	d00d      	beq.n	800814c <LL_RCC_GetPLL2ClockFreq+0x30>
 8008130:	2b02      	cmp	r3, #2
 8008132:	d012      	beq.n	800815a <LL_RCC_GetPLL2ClockFreq+0x3e>
 8008134:	b9c3      	cbnz	r3, 8008168 <LL_RCC_GetPLL2ClockFreq+0x4c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008136:	4b34      	ldr	r3, [pc, #208]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 8008138:	681e      	ldr	r6, [r3, #0]
 800813a:	f016 0604 	ands.w	r6, r6, #4
 800813e:	d014      	beq.n	800816a <LL_RCC_GetPLL2ClockFreq+0x4e>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8008140:	681b      	ldr	r3, [r3, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8008142:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008146:	4e31      	ldr	r6, [pc, #196]	@ (800820c <LL_RCC_GetPLL2ClockFreq+0xf0>)
 8008148:	40de      	lsrs	r6, r3
 800814a:	e00e      	b.n	800816a <LL_RCC_GetPLL2ClockFreq+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800814c:	4b2e      	ldr	r3, [pc, #184]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 800814e:	681e      	ldr	r6, [r3, #0]
 8008150:	f416 7680 	ands.w	r6, r6, #256	@ 0x100
 8008154:	d009      	beq.n	800816a <LL_RCC_GetPLL2ClockFreq+0x4e>
        pllinputfreq = CSI_VALUE;
 8008156:	4e2e      	ldr	r6, [pc, #184]	@ (8008210 <LL_RCC_GetPLL2ClockFreq+0xf4>)
 8008158:	e007      	b.n	800816a <LL_RCC_GetPLL2ClockFreq+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800815a:	4b2b      	ldr	r3, [pc, #172]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 800815c:	681e      	ldr	r6, [r3, #0]
 800815e:	f416 3600 	ands.w	r6, r6, #131072	@ 0x20000
 8008162:	d002      	beq.n	800816a <LL_RCC_GetPLL2ClockFreq+0x4e>
        pllinputfreq = HSE_VALUE;
 8008164:	4e2b      	ldr	r6, [pc, #172]	@ (8008214 <LL_RCC_GetPLL2ClockFreq+0xf8>)
 8008166:	e000      	b.n	800816a <LL_RCC_GetPLL2ClockFreq+0x4e>
  switch (pllsource)
 8008168:	2600      	movs	r6, #0
  PLL_Clocks->PLL_P_Frequency = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	6023      	str	r3, [r4, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800816e:	6063      	str	r3, [r4, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8008170:	60a3      	str	r3, [r4, #8]
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8008172:	4b25      	ldr	r3, [pc, #148]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 8008174:	6a9f      	ldr	r7, [r3, #40]	@ 0x28
 8008176:	f3c7 3705 	ubfx	r7, r7, #12, #6
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800817a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800817c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008180:	f102 0801 	add.w	r8, r2, #1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8008184:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8008186:	f015 0510 	ands.w	r5, r5, #16
 800818a:	d002      	beq.n	8008192 <LL_RCC_GetPLL2ClockFreq+0x76>
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800818c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800818e:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  if (m != 0U)
 8008192:	2f00      	cmp	r7, #0
 8008194:	d035      	beq.n	8008202 <LL_RCC_GetPLL2ClockFreq+0xe6>
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8008196:	4b1c      	ldr	r3, [pc, #112]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 8008198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800819e:	d00c      	beq.n	80081ba <LL_RCC_GetPLL2ClockFreq+0x9e>
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 80081a0:	4b19      	ldr	r3, [pc, #100]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 80081a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80081a8:	3301      	adds	r3, #1
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	462b      	mov	r3, r5
 80081ae:	4642      	mov	r2, r8
 80081b0:	4639      	mov	r1, r7
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7ff fed8 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 80081b8:	6020      	str	r0, [r4, #0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 80081ba:	4b13      	ldr	r3, [pc, #76]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80081c2:	d00c      	beq.n	80081de <LL_RCC_GetPLL2ClockFreq+0xc2>
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 80081c4:	4b10      	ldr	r3, [pc, #64]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 80081c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80081cc:	3301      	adds	r3, #1
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	462b      	mov	r3, r5
 80081d2:	4642      	mov	r2, r8
 80081d4:	4639      	mov	r1, r7
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7ff fec6 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 80081dc:	6060      	str	r0, [r4, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 80081de:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80081e6:	d00c      	beq.n	8008202 <LL_RCC_GetPLL2ClockFreq+0xe6>
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 80081e8:	4b07      	ldr	r3, [pc, #28]	@ (8008208 <LL_RCC_GetPLL2ClockFreq+0xec>)
 80081ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ec:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80081f0:	3301      	adds	r3, #1
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	462b      	mov	r3, r5
 80081f6:	4642      	mov	r2, r8
 80081f8:	4639      	mov	r1, r7
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff feb4 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 8008200:	60a0      	str	r0, [r4, #8]
}
 8008202:	b002      	add	sp, #8
 8008204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008208:	58024400 	.word	0x58024400
 800820c:	03d09000 	.word	0x03d09000
 8008210:	003d0900 	.word	0x003d0900
 8008214:	017d7840 	.word	0x017d7840

08008218 <LL_RCC_GetPLL3ClockFreq>:
{
 8008218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8008220:	4b39      	ldr	r3, [pc, #228]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8008228:	2b01      	cmp	r3, #1
 800822a:	d00d      	beq.n	8008248 <LL_RCC_GetPLL3ClockFreq+0x30>
 800822c:	2b02      	cmp	r3, #2
 800822e:	d012      	beq.n	8008256 <LL_RCC_GetPLL3ClockFreq+0x3e>
 8008230:	b9c3      	cbnz	r3, 8008264 <LL_RCC_GetPLL3ClockFreq+0x4c>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008232:	4b35      	ldr	r3, [pc, #212]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 8008234:	681e      	ldr	r6, [r3, #0]
 8008236:	f016 0604 	ands.w	r6, r6, #4
 800823a:	d014      	beq.n	8008266 <LL_RCC_GetPLL3ClockFreq+0x4e>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800823c:	681b      	ldr	r3, [r3, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800823e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008242:	4e32      	ldr	r6, [pc, #200]	@ (800830c <LL_RCC_GetPLL3ClockFreq+0xf4>)
 8008244:	40de      	lsrs	r6, r3
 8008246:	e00e      	b.n	8008266 <LL_RCC_GetPLL3ClockFreq+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8008248:	4b2f      	ldr	r3, [pc, #188]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 800824a:	681e      	ldr	r6, [r3, #0]
 800824c:	f416 7680 	ands.w	r6, r6, #256	@ 0x100
 8008250:	d009      	beq.n	8008266 <LL_RCC_GetPLL3ClockFreq+0x4e>
        pllinputfreq = CSI_VALUE;
 8008252:	4e2f      	ldr	r6, [pc, #188]	@ (8008310 <LL_RCC_GetPLL3ClockFreq+0xf8>)
 8008254:	e007      	b.n	8008266 <LL_RCC_GetPLL3ClockFreq+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008256:	4b2c      	ldr	r3, [pc, #176]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 8008258:	681e      	ldr	r6, [r3, #0]
 800825a:	f416 3600 	ands.w	r6, r6, #131072	@ 0x20000
 800825e:	d002      	beq.n	8008266 <LL_RCC_GetPLL3ClockFreq+0x4e>
        pllinputfreq = HSE_VALUE;
 8008260:	4e2c      	ldr	r6, [pc, #176]	@ (8008314 <LL_RCC_GetPLL3ClockFreq+0xfc>)
 8008262:	e000      	b.n	8008266 <LL_RCC_GetPLL3ClockFreq+0x4e>
  switch (pllsource)
 8008264:	2600      	movs	r6, #0
  PLL_Clocks->PLL_P_Frequency = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	6023      	str	r3, [r4, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800826a:	6063      	str	r3, [r4, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800826c:	60a3      	str	r3, [r4, #8]
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800826e:	4b26      	ldr	r3, [pc, #152]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 8008270:	6a9f      	ldr	r7, [r3, #40]	@ 0x28
 8008272:	f3c7 5705 	ubfx	r7, r7, #20, #6
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8008276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800827c:	f102 0801 	add.w	r8, r2, #1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8008280:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8008282:	f415 7580 	ands.w	r5, r5, #256	@ 0x100
 8008286:	d002      	beq.n	800828e <LL_RCC_GetPLL3ClockFreq+0x76>
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8008288:	6c5d      	ldr	r5, [r3, #68]	@ 0x44
 800828a:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  if ((m != 0U) && (pllinputfreq != 0U))
 800828e:	2f00      	cmp	r7, #0
 8008290:	bf18      	it	ne
 8008292:	2e00      	cmpne	r6, #0
 8008294:	d035      	beq.n	8008302 <LL_RCC_GetPLL3ClockFreq+0xea>
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8008296:	4b1c      	ldr	r3, [pc, #112]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 8008298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800829e:	d00c      	beq.n	80082ba <LL_RCC_GetPLL3ClockFreq+0xa2>
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 80082a0:	4b19      	ldr	r3, [pc, #100]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 80082a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80082a8:	3301      	adds	r3, #1
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	462b      	mov	r3, r5
 80082ae:	4642      	mov	r2, r8
 80082b0:	4639      	mov	r1, r7
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff fe58 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 80082b8:	6020      	str	r0, [r4, #0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 80082ba:	4b13      	ldr	r3, [pc, #76]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 80082bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082be:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80082c2:	d00c      	beq.n	80082de <LL_RCC_GetPLL3ClockFreq+0xc6>
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 80082c4:	4b10      	ldr	r3, [pc, #64]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 80082c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80082cc:	3301      	adds	r3, #1
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	462b      	mov	r3, r5
 80082d2:	4642      	mov	r2, r8
 80082d4:	4639      	mov	r1, r7
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff fe46 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 80082dc:	6060      	str	r0, [r4, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 80082de:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80082e6:	d00c      	beq.n	8008302 <LL_RCC_GetPLL3ClockFreq+0xea>
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 80082e8:	4b07      	ldr	r3, [pc, #28]	@ (8008308 <LL_RCC_GetPLL3ClockFreq+0xf0>)
 80082ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ec:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80082f0:	3301      	adds	r3, #1
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	462b      	mov	r3, r5
 80082f6:	4642      	mov	r2, r8
 80082f8:	4639      	mov	r1, r7
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7ff fe34 	bl	8007f68 <LL_RCC_CalcPLLClockFreq>
 8008300:	60a0      	str	r0, [r4, #8]
}
 8008302:	b002      	add	sp, #8
 8008304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008308:	58024400 	.word	0x58024400
 800830c:	03d09000 	.word	0x03d09000
 8008310:	003d0900 	.word	0x003d0900
 8008314:	017d7840 	.word	0x017d7840

08008318 <LL_RCC_GetUSARTClockFreq>:
{
 8008318:	b500      	push	{lr}
 800831a:	b085      	sub	sp, #20
  return LL_RCC_GetClockSource(Periph);
 800831c:	f7ff fdec 	bl	8007ef8 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008320:	4b43      	ldr	r3, [pc, #268]	@ (8008430 <LL_RCC_GetUSARTClockFreq+0x118>)
 8008322:	4298      	cmp	r0, r3
 8008324:	d072      	beq.n	800840c <LL_RCC_GetUSARTClockFreq+0xf4>
 8008326:	d831      	bhi.n	800838c <LL_RCC_GetUSARTClockFreq+0x74>
 8008328:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
 800832c:	4298      	cmp	r0, r3
 800832e:	d05b      	beq.n	80083e8 <LL_RCC_GetUSARTClockFreq+0xd0>
 8008330:	d914      	bls.n	800835c <LL_RCC_GetUSARTClockFreq+0x44>
 8008332:	4b40      	ldr	r3, [pc, #256]	@ (8008434 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8008334:	4298      	cmp	r0, r3
 8008336:	d007      	beq.n	8008348 <LL_RCC_GetUSARTClockFreq+0x30>
 8008338:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 800833c:	4298      	cmp	r0, r3
 800833e:	d065      	beq.n	800840c <LL_RCC_GetUSARTClockFreq+0xf4>
 8008340:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8008344:	4298      	cmp	r0, r3
 8008346:	d11f      	bne.n	8008388 <LL_RCC_GetUSARTClockFreq+0x70>
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8008348:	4b3b      	ldr	r3, [pc, #236]	@ (8008438 <LL_RCC_GetUSARTClockFreq+0x120>)
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008350:	d059      	beq.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8008352:	a801      	add	r0, sp, #4
 8008354:	f7ff fee2 	bl	800811c <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8008358:	9802      	ldr	r0, [sp, #8]
 800835a:	e054      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800835c:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8008360:	4298      	cmp	r0, r3
 8008362:	d10f      	bne.n	8008384 <LL_RCC_GetUSARTClockFreq+0x6c>
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8008364:	f7ff fea6 	bl	80080b4 <RCC_GetSystemClockFreq>
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8008368:	4b33      	ldr	r3, [pc, #204]	@ (8008438 <LL_RCC_GetUSARTClockFreq+0x120>)
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008370:	4a32      	ldr	r2, [pc, #200]	@ (800843c <LL_RCC_GetUSARTClockFreq+0x124>)
 8008372:	5cd3      	ldrb	r3, [r2, r3]
 8008374:	f003 031f 	and.w	r3, r3, #31
 8008378:	40d8      	lsrs	r0, r3
 800837a:	f7ff fdcb 	bl	8007f14 <RCC_GetHCLKClockFreq>
 800837e:	f7ff fdd7 	bl	8007f30 <RCC_GetPCLK1ClockFreq>
      break;
 8008382:	e040      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008384:	2000      	movs	r0, #0
 8008386:	e03e      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
 8008388:	2000      	movs	r0, #0
 800838a:	e03c      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
 800838c:	4b2c      	ldr	r3, [pc, #176]	@ (8008440 <LL_RCC_GetUSARTClockFreq+0x128>)
 800838e:	4298      	cmp	r0, r3
 8008390:	d046      	beq.n	8008420 <LL_RCC_GetUSARTClockFreq+0x108>
 8008392:	d818      	bhi.n	80083c6 <LL_RCC_GetUSARTClockFreq+0xae>
 8008394:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8008398:	4298      	cmp	r0, r3
 800839a:	d007      	beq.n	80083ac <LL_RCC_GetUSARTClockFreq+0x94>
 800839c:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 80083a0:	4298      	cmp	r0, r3
 80083a2:	d03d      	beq.n	8008420 <LL_RCC_GetUSARTClockFreq+0x108>
 80083a4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80083a8:	4298      	cmp	r0, r3
 80083aa:	d10a      	bne.n	80083c2 <LL_RCC_GetUSARTClockFreq+0xaa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80083ac:	4b22      	ldr	r3, [pc, #136]	@ (8008438 <LL_RCC_GetUSARTClockFreq+0x120>)
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	f010 0004 	ands.w	r0, r0, #4
 80083b4:	d027      	beq.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 80083b6:	681b      	ldr	r3, [r3, #0]
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80083b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80083bc:	4821      	ldr	r0, [pc, #132]	@ (8008444 <LL_RCC_GetUSARTClockFreq+0x12c>)
 80083be:	40d8      	lsrs	r0, r3
 80083c0:	e021      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80083c2:	2000      	movs	r0, #0
 80083c4:	e01f      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
 80083c6:	4b20      	ldr	r3, [pc, #128]	@ (8008448 <LL_RCC_GetUSARTClockFreq+0x130>)
 80083c8:	4298      	cmp	r0, r3
 80083ca:	d003      	beq.n	80083d4 <LL_RCC_GetUSARTClockFreq+0xbc>
 80083cc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80083d0:	4298      	cmp	r0, r3
 80083d2:	d107      	bne.n	80083e4 <LL_RCC_GetUSARTClockFreq+0xcc>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80083d4:	4b18      	ldr	r3, [pc, #96]	@ (8008438 <LL_RCC_GetUSARTClockFreq+0x120>)
 80083d6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80083d8:	f010 0002 	ands.w	r0, r0, #2
 80083dc:	d013      	beq.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
        usart_frequency = LSE_VALUE;
 80083de:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  return usart_frequency;
 80083e2:	e010      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80083e4:	2000      	movs	r0, #0
 80083e6:	e00e      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80083e8:	f7ff fe64 	bl	80080b4 <RCC_GetSystemClockFreq>
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 80083ec:	4b12      	ldr	r3, [pc, #72]	@ (8008438 <LL_RCC_GetUSARTClockFreq+0x120>)
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80083f4:	4a11      	ldr	r2, [pc, #68]	@ (800843c <LL_RCC_GetUSARTClockFreq+0x124>)
 80083f6:	5cd3      	ldrb	r3, [r2, r3]
 80083f8:	f003 031f 	and.w	r3, r3, #31
 80083fc:	40d8      	lsrs	r0, r3
 80083fe:	f7ff fd89 	bl	8007f14 <RCC_GetHCLKClockFreq>
 8008402:	f7ff fda3 	bl	8007f4c <RCC_GetPCLK2ClockFreq>
}
 8008406:	b005      	add	sp, #20
 8008408:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800840c:	4b0a      	ldr	r3, [pc, #40]	@ (8008438 <LL_RCC_GetUSARTClockFreq+0x120>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008414:	d0f7      	beq.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8008416:	a801      	add	r0, sp, #4
 8008418:	f7ff fefe 	bl	8008218 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800841c:	9802      	ldr	r0, [sp, #8]
 800841e:	e7f2      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8008420:	4b05      	ldr	r3, [pc, #20]	@ (8008438 <LL_RCC_GetUSARTClockFreq+0x120>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8008428:	d0ed      	beq.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
        usart_frequency = CSI_VALUE;
 800842a:	4808      	ldr	r0, [pc, #32]	@ (800844c <LL_RCC_GetUSARTClockFreq+0x134>)
 800842c:	e7eb      	b.n	8008406 <LL_RCC_GetUSARTClockFreq+0xee>
 800842e:	bf00      	nop
 8008430:	07020308 	.word	0x07020308
 8008434:	07010308 	.word	0x07010308
 8008438:	58024400 	.word	0x58024400
 800843c:	0800e3e8 	.word	0x0800e3e8
 8008440:	07040308 	.word	0x07040308
 8008444:	03d09000 	.word	0x03d09000
 8008448:	07050008 	.word	0x07050008
 800844c:	003d0900 	.word	0x003d0900

08008450 <LL_USART_SetBaudRate>:
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8008450:	2a0b      	cmp	r2, #11
 8008452:	d828      	bhi.n	80084a6 <LL_USART_SetBaudRate+0x56>
{
 8008454:	b410      	push	{r4}
  else if (BaudRate == 0U)
 8008456:	9c01      	ldr	r4, [sp, #4]
 8008458:	b17c      	cbz	r4, 800847a <LL_USART_SetBaudRate+0x2a>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800845a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800845e:	d00f      	beq.n	8008480 <LL_USART_SetBaudRate+0x30>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	4b11      	ldr	r3, [pc, #68]	@ (80084a8 <LL_USART_SetBaudRate+0x58>)
 8008464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008468:	fbb1 f1f3 	udiv	r1, r1, r3
 800846c:	9b01      	ldr	r3, [sp, #4]
 800846e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
 8008472:	fbb1 f1f3 	udiv	r1, r1, r3
 8008476:	b289      	uxth	r1, r1
 8008478:	60c1      	str	r1, [r0, #12]
}
 800847a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800847e:	4770      	bx	lr
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008480:	b2d2      	uxtb	r2, r2
 8008482:	4b09      	ldr	r3, [pc, #36]	@ (80084a8 <LL_USART_SetBaudRate+0x58>)
 8008484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008488:	fbb1 f2f2 	udiv	r2, r1, r2
 800848c:	0863      	lsrs	r3, r4, #1
 800848e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008492:	fbb3 f3f4 	udiv	r3, r3, r4
    brrtemp = usartdiv & 0xFFF0U;
 8008496:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800849a:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800849c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80084a0:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 80084a2:	60c3      	str	r3, [r0, #12]
 80084a4:	e7e9      	b.n	800847a <LL_USART_SetBaudRate+0x2a>
 80084a6:	4770      	bx	lr
 80084a8:	0800e3f8 	.word	0x0800e3f8

080084ac <LL_USART_Init>:
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80084ac:	6803      	ldr	r3, [r0, #0]
 80084ae:	f013 0f01 	tst.w	r3, #1
 80084b2:	d16b      	bne.n	800858c <LL_USART_Init+0xe0>
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80084b4:	b530      	push	{r4, r5, lr}
 80084b6:	b083      	sub	sp, #12
 80084b8:	4604      	mov	r4, r0
 80084ba:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80084bc:	6803      	ldr	r3, [r0, #0]
 80084be:	4a34      	ldr	r2, [pc, #208]	@ (8008590 <LL_USART_Init+0xe4>)
 80084c0:	401a      	ands	r2, r3
 80084c2:	688b      	ldr	r3, [r1, #8]
 80084c4:	6909      	ldr	r1, [r1, #16]
 80084c6:	430b      	orrs	r3, r1
 80084c8:	6969      	ldr	r1, [r5, #20]
 80084ca:	430b      	orrs	r3, r1
 80084cc:	69e9      	ldr	r1, [r5, #28]
 80084ce:	430b      	orrs	r3, r1
 80084d0:	431a      	orrs	r2, r3
 80084d2:	6002      	str	r2, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80084d4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80084d6:	6842      	ldr	r2, [r0, #4]
 80084d8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80084dc:	4313      	orrs	r3, r2
 80084de:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80084e0:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80084e2:	6882      	ldr	r2, [r0, #8]
 80084e4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80084e8:	4313      	orrs	r3, r2
 80084ea:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80084ec:	4b29      	ldr	r3, [pc, #164]	@ (8008594 <LL_USART_Init+0xe8>)
 80084ee:	4298      	cmp	r0, r3
 80084f0:	d016      	beq.n	8008520 <LL_USART_Init+0x74>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
    }
    else if (USARTx == USART2)
 80084f2:	4b29      	ldr	r3, [pc, #164]	@ (8008598 <LL_USART_Init+0xec>)
 80084f4:	4298      	cmp	r0, r3
 80084f6:	d01b      	beq.n	8008530 <LL_USART_Init+0x84>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == USART3)
 80084f8:	4b28      	ldr	r3, [pc, #160]	@ (800859c <LL_USART_Init+0xf0>)
 80084fa:	4298      	cmp	r0, r3
 80084fc:	d01c      	beq.n	8008538 <LL_USART_Init+0x8c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART4)
 80084fe:	4b28      	ldr	r3, [pc, #160]	@ (80085a0 <LL_USART_Init+0xf4>)
 8008500:	4298      	cmp	r0, r3
 8008502:	d01d      	beq.n	8008540 <LL_USART_Init+0x94>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART5)
 8008504:	4b27      	ldr	r3, [pc, #156]	@ (80085a4 <LL_USART_Init+0xf8>)
 8008506:	4298      	cmp	r0, r3
 8008508:	d01e      	beq.n	8008548 <LL_USART_Init+0x9c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == USART6)
 800850a:	4b27      	ldr	r3, [pc, #156]	@ (80085a8 <LL_USART_Init+0xfc>)
 800850c:	4298      	cmp	r0, r3
 800850e:	d01f      	beq.n	8008550 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
    }
    else if (USARTx == UART7)
 8008510:	4b26      	ldr	r3, [pc, #152]	@ (80085ac <LL_USART_Init+0x100>)
 8008512:	4298      	cmp	r0, r3
 8008514:	d020      	beq.n	8008558 <LL_USART_Init+0xac>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART8)
 8008516:	4b26      	ldr	r3, [pc, #152]	@ (80085b0 <LL_USART_Init+0x104>)
 8008518:	4298      	cmp	r0, r3
 800851a:	d021      	beq.n	8008560 <LL_USART_Init+0xb4>
  ErrorStatus status = ERROR;
 800851c:	2001      	movs	r0, #1
 800851e:	e02d      	b.n	800857c <LL_USART_Init+0xd0>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8008520:	4824      	ldr	r0, [pc, #144]	@ (80085b4 <LL_USART_Init+0x108>)
 8008522:	f7ff fef9 	bl	8008318 <LL_RCC_GetUSARTClockFreq>
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008526:	b340      	cbz	r0, 800857a <LL_USART_Init+0xce>
        && (USART_InitStruct->BaudRate != 0U))
 8008528:	686b      	ldr	r3, [r5, #4]
 800852a:	b9eb      	cbnz	r3, 8008568 <LL_USART_Init+0xbc>
  ErrorStatus status = ERROR;
 800852c:	2001      	movs	r0, #1
 800852e:	e025      	b.n	800857c <LL_USART_Init+0xd0>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8008530:	4821      	ldr	r0, [pc, #132]	@ (80085b8 <LL_USART_Init+0x10c>)
 8008532:	f7ff fef1 	bl	8008318 <LL_RCC_GetUSARTClockFreq>
 8008536:	e7f6      	b.n	8008526 <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8008538:	481f      	ldr	r0, [pc, #124]	@ (80085b8 <LL_USART_Init+0x10c>)
 800853a:	f7ff feed 	bl	8008318 <LL_RCC_GetUSARTClockFreq>
 800853e:	e7f2      	b.n	8008526 <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8008540:	481d      	ldr	r0, [pc, #116]	@ (80085b8 <LL_USART_Init+0x10c>)
 8008542:	f7ff fee9 	bl	8008318 <LL_RCC_GetUSARTClockFreq>
 8008546:	e7ee      	b.n	8008526 <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8008548:	481b      	ldr	r0, [pc, #108]	@ (80085b8 <LL_USART_Init+0x10c>)
 800854a:	f7ff fee5 	bl	8008318 <LL_RCC_GetUSARTClockFreq>
 800854e:	e7ea      	b.n	8008526 <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8008550:	4818      	ldr	r0, [pc, #96]	@ (80085b4 <LL_USART_Init+0x108>)
 8008552:	f7ff fee1 	bl	8008318 <LL_RCC_GetUSARTClockFreq>
 8008556:	e7e6      	b.n	8008526 <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8008558:	4817      	ldr	r0, [pc, #92]	@ (80085b8 <LL_USART_Init+0x10c>)
 800855a:	f7ff fedd 	bl	8008318 <LL_RCC_GetUSARTClockFreq>
 800855e:	e7e2      	b.n	8008526 <LL_USART_Init+0x7a>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8008560:	4815      	ldr	r0, [pc, #84]	@ (80085b8 <LL_USART_Init+0x10c>)
 8008562:	f7ff fed9 	bl	8008318 <LL_RCC_GetUSARTClockFreq>
 8008566:	e7de      	b.n	8008526 <LL_USART_Init+0x7a>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	69eb      	ldr	r3, [r5, #28]
 800856c:	682a      	ldr	r2, [r5, #0]
 800856e:	4601      	mov	r1, r0
 8008570:	4620      	mov	r0, r4
 8008572:	f7ff ff6d 	bl	8008450 <LL_USART_SetBaudRate>
      status = SUCCESS;
 8008576:	2000      	movs	r0, #0
 8008578:	e000      	b.n	800857c <LL_USART_Init+0xd0>
  ErrorStatus status = ERROR;
 800857a:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800857c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800857e:	f022 020f 	bic.w	r2, r2, #15
 8008582:	882b      	ldrh	r3, [r5, #0]
 8008584:	4313      	orrs	r3, r2
 8008586:	62e3      	str	r3, [r4, #44]	@ 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8008588:	b003      	add	sp, #12
 800858a:	bd30      	pop	{r4, r5, pc}
  ErrorStatus status = ERROR;
 800858c:	2001      	movs	r0, #1
}
 800858e:	4770      	bx	lr
 8008590:	efff69f3 	.word	0xefff69f3
 8008594:	40011000 	.word	0x40011000
 8008598:	40004400 	.word	0x40004400
 800859c:	40004800 	.word	0x40004800
 80085a0:	40004c00 	.word	0x40004c00
 80085a4:	40005000 	.word	0x40005000
 80085a8:	40011400 	.word	0x40011400
 80085ac:	40007800 	.word	0x40007800
 80085b0:	40007c00 	.word	0x40007c00
 80085b4:	07000308 	.word	0x07000308
 80085b8:	07000008 	.word	0x07000008

080085bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085bc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	3301      	adds	r3, #1
 80085c6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80085c8:	9b01      	ldr	r3, [sp, #4]
 80085ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085ce:	d815      	bhi.n	80085fc <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085d0:	6903      	ldr	r3, [r0, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	daf5      	bge.n	80085c2 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085da:	6903      	ldr	r3, [r0, #16]
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 80085e2:	9b01      	ldr	r3, [sp, #4]
 80085e4:	3301      	adds	r3, #1
 80085e6:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80085e8:	9b01      	ldr	r3, [sp, #4]
 80085ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085ee:	d808      	bhi.n	8008602 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085f0:	6903      	ldr	r3, [r0, #16]
 80085f2:	f013 0f01 	tst.w	r3, #1
 80085f6:	d1f4      	bne.n	80085e2 <USB_CoreReset+0x26>

  return HAL_OK;
 80085f8:	2000      	movs	r0, #0
 80085fa:	e000      	b.n	80085fe <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80085fc:	2003      	movs	r0, #3
}
 80085fe:	b002      	add	sp, #8
 8008600:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008602:	2003      	movs	r0, #3
 8008604:	e7fb      	b.n	80085fe <USB_CoreReset+0x42>
	...

08008608 <USB_CoreInit>:
{
 8008608:	b084      	sub	sp, #16
 800860a:	b510      	push	{r4, lr}
 800860c:	4604      	mov	r4, r0
 800860e:	a803      	add	r0, sp, #12
 8008610:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008614:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d11f      	bne.n	800865c <USB_CoreInit+0x54>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800861c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800861e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008622:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008624:	68e2      	ldr	r2, [r4, #12]
 8008626:	4b1f      	ldr	r3, [pc, #124]	@ (80086a4 <USB_CoreInit+0x9c>)
 8008628:	4013      	ands	r3, r2
 800862a:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800862c:	68e3      	ldr	r3, [r4, #12]
 800862e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008632:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8008634:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d00a      	beq.n	8008652 <USB_CoreInit+0x4a>
    ret = USB_CoreReset(USBx);
 800863c:	4620      	mov	r0, r4
 800863e:	f7ff ffbd 	bl	80085bc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8008642:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d01c      	beq.n	8008684 <USB_CoreInit+0x7c>
}
 800864a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864e:	b004      	add	sp, #16
 8008650:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008652:	68e3      	ldr	r3, [r4, #12]
 8008654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008658:	60e3      	str	r3, [r4, #12]
 800865a:	e7ef      	b.n	800863c <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800865c:	68e3      	ldr	r3, [r4, #12]
 800865e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008662:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8008664:	4620      	mov	r0, r4
 8008666:	f7ff ffa9 	bl	80085bc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800866a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800866e:	b923      	cbnz	r3, 800867a <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008670:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008676:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008678:	e7e3      	b.n	8008642 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800867a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800867c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008680:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008682:	e7de      	b.n	8008642 <USB_CoreInit+0x3a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008684:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8008686:	b29b      	uxth	r3, r3
 8008688:	65e3      	str	r3, [r4, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800868a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800868c:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <USB_CoreInit+0xa0>)
 800868e:	4313      	orrs	r3, r2
 8008690:	65e3      	str	r3, [r4, #92]	@ 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	f043 0306 	orr.w	r3, r3, #6
 8008698:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	f043 0320 	orr.w	r3, r3, #32
 80086a0:	60a3      	str	r3, [r4, #8]
 80086a2:	e7d2      	b.n	800864a <USB_CoreInit+0x42>
 80086a4:	ffbdffbf 	.word	0xffbdffbf
 80086a8:	03ee0000 	.word	0x03ee0000

080086ac <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80086ac:	2a02      	cmp	r2, #2
 80086ae:	d00a      	beq.n	80086c6 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80086b0:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80086b2:	68c3      	ldr	r3, [r0, #12]
 80086b4:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80086b8:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80086ba:	68c3      	ldr	r3, [r0, #12]
 80086bc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80086c0:	60c3      	str	r3, [r0, #12]
}
 80086c2:	2000      	movs	r0, #0
 80086c4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80086c6:	4b20      	ldr	r3, [pc, #128]	@ (8008748 <USB_SetTurnaroundTime+0x9c>)
 80086c8:	440b      	add	r3, r1
 80086ca:	4a20      	ldr	r2, [pc, #128]	@ (800874c <USB_SetTurnaroundTime+0xa0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d929      	bls.n	8008724 <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80086d0:	4b1f      	ldr	r3, [pc, #124]	@ (8008750 <USB_SetTurnaroundTime+0xa4>)
 80086d2:	440b      	add	r3, r1
 80086d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008754 <USB_SetTurnaroundTime+0xa8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d926      	bls.n	8008728 <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086da:	4b1f      	ldr	r3, [pc, #124]	@ (8008758 <USB_SetTurnaroundTime+0xac>)
 80086dc:	440b      	add	r3, r1
 80086de:	4a1f      	ldr	r2, [pc, #124]	@ (800875c <USB_SetTurnaroundTime+0xb0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d923      	bls.n	800872c <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086e4:	4b1e      	ldr	r3, [pc, #120]	@ (8008760 <USB_SetTurnaroundTime+0xb4>)
 80086e6:	440b      	add	r3, r1
 80086e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008764 <USB_SetTurnaroundTime+0xb8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d320      	bcc.n	8008730 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008768 <USB_SetTurnaroundTime+0xbc>)
 80086f0:	440b      	add	r3, r1
 80086f2:	4a1e      	ldr	r2, [pc, #120]	@ (800876c <USB_SetTurnaroundTime+0xc0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d91d      	bls.n	8008734 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80086f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008770 <USB_SetTurnaroundTime+0xc4>)
 80086fa:	440b      	add	r3, r1
 80086fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008774 <USB_SetTurnaroundTime+0xc8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d31a      	bcc.n	8008738 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008702:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <USB_SetTurnaroundTime+0xcc>)
 8008704:	440b      	add	r3, r1
 8008706:	4a1d      	ldr	r2, [pc, #116]	@ (800877c <USB_SetTurnaroundTime+0xd0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d317      	bcc.n	800873c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800870c:	4b1c      	ldr	r3, [pc, #112]	@ (8008780 <USB_SetTurnaroundTime+0xd4>)
 800870e:	440b      	add	r3, r1
 8008710:	4a1c      	ldr	r2, [pc, #112]	@ (8008784 <USB_SetTurnaroundTime+0xd8>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d314      	bcc.n	8008740 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008716:	4b1c      	ldr	r3, [pc, #112]	@ (8008788 <USB_SetTurnaroundTime+0xdc>)
 8008718:	440b      	add	r3, r1
 800871a:	4a1c      	ldr	r2, [pc, #112]	@ (800878c <USB_SetTurnaroundTime+0xe0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d211      	bcs.n	8008744 <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 8008720:	2207      	movs	r2, #7
 8008722:	e7c6      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8008724:	220f      	movs	r2, #15
 8008726:	e7c4      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8008728:	220e      	movs	r2, #14
 800872a:	e7c2      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800872c:	220d      	movs	r2, #13
 800872e:	e7c0      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8008730:	220c      	movs	r2, #12
 8008732:	e7be      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8008734:	220b      	movs	r2, #11
 8008736:	e7bc      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8008738:	220a      	movs	r2, #10
 800873a:	e7ba      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800873c:	2209      	movs	r2, #9
 800873e:	e7b8      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8008740:	2208      	movs	r2, #8
 8008742:	e7b6      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8008744:	2206      	movs	r2, #6
 8008746:	e7b4      	b.n	80086b2 <USB_SetTurnaroundTime+0x6>
 8008748:	ff275340 	.word	0xff275340
 800874c:	000c34ff 	.word	0x000c34ff
 8008750:	ff1b1e40 	.word	0xff1b1e40
 8008754:	000f423f 	.word	0x000f423f
 8008758:	ff0bdc00 	.word	0xff0bdc00
 800875c:	00124f7f 	.word	0x00124f7f
 8008760:	fef98c80 	.word	0xfef98c80
 8008764:	0013d620 	.word	0x0013d620
 8008768:	fee5b660 	.word	0xfee5b660
 800876c:	0016e35f 	.word	0x0016e35f
 8008770:	feced300 	.word	0xfeced300
 8008774:	001b7740 	.word	0x001b7740
 8008778:	feb35bc0 	.word	0xfeb35bc0
 800877c:	002191c0 	.word	0x002191c0
 8008780:	fe91ca00 	.word	0xfe91ca00
 8008784:	00387520 	.word	0x00387520
 8008788:	fe5954e0 	.word	0xfe5954e0
 800878c:	00419ce0 	.word	0x00419ce0

08008790 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008790:	6883      	ldr	r3, [r0, #8]
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	6083      	str	r3, [r0, #8]
}
 8008798:	2000      	movs	r0, #0
 800879a:	4770      	bx	lr

0800879c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800879c:	6883      	ldr	r3, [r0, #8]
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	6083      	str	r3, [r0, #8]
}
 80087a4:	2000      	movs	r0, #0
 80087a6:	4770      	bx	lr

080087a8 <USB_FlushTxFifo>:
{
 80087a8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	9301      	str	r3, [sp, #4]
    count++;
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087ba:	d815      	bhi.n	80087e8 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087bc:	6903      	ldr	r3, [r0, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	daf5      	bge.n	80087ae <USB_FlushTxFifo+0x6>
  count = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087c6:	0189      	lsls	r1, r1, #6
 80087c8:	f041 0120 	orr.w	r1, r1, #32
 80087cc:	6101      	str	r1, [r0, #16]
    count++;
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	3301      	adds	r3, #1
 80087d2:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087da:	d808      	bhi.n	80087ee <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087dc:	6903      	ldr	r3, [r0, #16]
 80087de:	f013 0f20 	tst.w	r3, #32
 80087e2:	d1f4      	bne.n	80087ce <USB_FlushTxFifo+0x26>
  return HAL_OK;
 80087e4:	2000      	movs	r0, #0
 80087e6:	e000      	b.n	80087ea <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80087e8:	2003      	movs	r0, #3
}
 80087ea:	b002      	add	sp, #8
 80087ec:	4770      	bx	lr
      return HAL_TIMEOUT;
 80087ee:	2003      	movs	r0, #3
 80087f0:	e7fb      	b.n	80087ea <USB_FlushTxFifo+0x42>

080087f2 <USB_FlushRxFifo>:
{
 80087f2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	9301      	str	r3, [sp, #4]
    count++;
 80087f8:	9b01      	ldr	r3, [sp, #4]
 80087fa:	3301      	adds	r3, #1
 80087fc:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80087fe:	9b01      	ldr	r3, [sp, #4]
 8008800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008804:	d813      	bhi.n	800882e <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008806:	6903      	ldr	r3, [r0, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	daf5      	bge.n	80087f8 <USB_FlushRxFifo+0x6>
  count = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008810:	2310      	movs	r3, #16
 8008812:	6103      	str	r3, [r0, #16]
    count++;
 8008814:	9b01      	ldr	r3, [sp, #4]
 8008816:	3301      	adds	r3, #1
 8008818:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800881a:	9b01      	ldr	r3, [sp, #4]
 800881c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008820:	d808      	bhi.n	8008834 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008822:	6903      	ldr	r3, [r0, #16]
 8008824:	f013 0f10 	tst.w	r3, #16
 8008828:	d1f4      	bne.n	8008814 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800882a:	2000      	movs	r0, #0
 800882c:	e000      	b.n	8008830 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800882e:	2003      	movs	r0, #3
}
 8008830:	b002      	add	sp, #8
 8008832:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008834:	2003      	movs	r0, #3
 8008836:	e7fb      	b.n	8008830 <USB_FlushRxFifo+0x3e>

08008838 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8008838:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 800883c:	4319      	orrs	r1, r3
 800883e:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 8008842:	2000      	movs	r0, #0
 8008844:	4770      	bx	lr
	...

08008848 <USB_DevInit>:
{
 8008848:	b084      	sub	sp, #16
 800884a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	a807      	add	r0, sp, #28
 8008850:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8008854:	2300      	movs	r3, #0
 8008856:	e006      	b.n	8008866 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8008858:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800885c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008860:	2100      	movs	r1, #0
 8008862:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8008864:	3301      	adds	r3, #1
 8008866:	2b0e      	cmp	r3, #14
 8008868:	d9f6      	bls.n	8008858 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 800886a:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800886e:	bb06      	cbnz	r6, 80088b2 <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008870:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8008874:	f043 0302 	orr.w	r3, r3, #2
 8008878:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800887c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800887e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008882:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008892:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800889a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d111      	bne.n	80088c6 <USB_DevInit+0x7e>
    if (cfg.speed == USBD_HS_SPEED)
 80088a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80088a6:	b94b      	cbnz	r3, 80088bc <USB_DevInit+0x74>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80088a8:	2100      	movs	r1, #0
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff ffc4 	bl	8008838 <USB_SetDevSpeed>
 80088b0:	e00d      	b.n	80088ce <USB_DevInit+0x86>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80088b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80088b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80088ba:	e7eb      	b.n	8008894 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80088bc:	2101      	movs	r1, #1
 80088be:	4620      	mov	r0, r4
 80088c0:	f7ff ffba 	bl	8008838 <USB_SetDevSpeed>
 80088c4:	e003      	b.n	80088ce <USB_DevInit+0x86>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80088c6:	2103      	movs	r1, #3
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7ff ffb5 	bl	8008838 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088ce:	2110      	movs	r1, #16
 80088d0:	4620      	mov	r0, r4
 80088d2:	f7ff ff69 	bl	80087a8 <USB_FlushTxFifo>
 80088d6:	4605      	mov	r5, r0
 80088d8:	b100      	cbz	r0, 80088dc <USB_DevInit+0x94>
    ret = HAL_ERROR;
 80088da:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088dc:	4620      	mov	r0, r4
 80088de:	f7ff ff88 	bl	80087f2 <USB_FlushRxFifo>
 80088e2:	b100      	cbz	r0, 80088e6 <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 80088e4:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80088e6:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 80088ea:	2300      	movs	r3, #0
 80088ec:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088f0:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088f4:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088f8:	e00a      	b.n	8008910 <USB_DevInit+0xc8>
      if (i == 0U)
 80088fa:	b9cb      	cbnz	r3, 8008930 <USB_DevInit+0xe8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088fc:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008900:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008904:	2200      	movs	r2, #0
 8008906:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008908:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800890c:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800890e:	3301      	adds	r3, #1
 8008910:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8008914:	4299      	cmp	r1, r3
 8008916:	d910      	bls.n	800893a <USB_DevInit+0xf2>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008918:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800891c:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8008920:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8008924:	2800      	cmp	r0, #0
 8008926:	dbe8      	blt.n	80088fa <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 8008928:	2000      	movs	r0, #0
 800892a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800892e:	e7e9      	b.n	8008904 <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008934:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8008938:	e7e4      	b.n	8008904 <USB_DevInit+0xbc>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800893a:	2300      	movs	r3, #0
 800893c:	e00a      	b.n	8008954 <USB_DevInit+0x10c>
      if (i == 0U)
 800893e:	b1bb      	cbz	r3, 8008970 <USB_DevInit+0x128>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008940:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8008944:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008948:	2200      	movs	r2, #0
 800894a:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800894c:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 8008950:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008952:	3301      	adds	r3, #1
 8008954:	4299      	cmp	r1, r3
 8008956:	d910      	bls.n	800897a <USB_DevInit+0x132>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008958:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800895c:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 8008960:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8008964:	2f00      	cmp	r7, #0
 8008966:	dbea      	blt.n	800893e <USB_DevInit+0xf6>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008968:	2700      	movs	r7, #0
 800896a:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800896e:	e7eb      	b.n	8008948 <USB_DevInit+0x100>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008970:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8008974:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8008978:	e7e6      	b.n	8008948 <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800897a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800897e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008982:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800898a:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 800898e:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8008990:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8008994:	b91b      	cbnz	r3, 800899e <USB_DevInit+0x156>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008996:	69a3      	ldr	r3, [r4, #24]
 8008998:	f043 0310 	orr.w	r3, r3, #16
 800899c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800899e:	69a2      	ldr	r2, [r4, #24]
 80089a0:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <USB_DevInit+0x184>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80089a6:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80089aa:	b11b      	cbz	r3, 80089b4 <USB_DevInit+0x16c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089ac:	69a3      	ldr	r3, [r4, #24]
 80089ae:	f043 0308 	orr.w	r3, r3, #8
 80089b2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80089b4:	2e01      	cmp	r6, #1
 80089b6:	d004      	beq.n	80089c2 <USB_DevInit+0x17a>
}
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089be:	b004      	add	sp, #16
 80089c0:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089c2:	69a2      	ldr	r2, [r4, #24]
 80089c4:	4b02      	ldr	r3, [pc, #8]	@ (80089d0 <USB_DevInit+0x188>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	61a3      	str	r3, [r4, #24]
 80089ca:	e7f5      	b.n	80089b8 <USB_DevInit+0x170>
 80089cc:	803c3800 	.word	0x803c3800
 80089d0:	40000004 	.word	0x40000004

080089d4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80089d4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80089d8:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d004      	beq.n	80089ea <USB_GetDevSpeed+0x16>
 80089e0:	2b06      	cmp	r3, #6
 80089e2:	d004      	beq.n	80089ee <USB_GetDevSpeed+0x1a>
 80089e4:	b92b      	cbnz	r3, 80089f2 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80089e6:	2000      	movs	r0, #0
 80089e8:	4770      	bx	lr
 80089ea:	2002      	movs	r0, #2
 80089ec:	4770      	bx	lr
 80089ee:	2002      	movs	r0, #2
 80089f0:	4770      	bx	lr
 80089f2:	200f      	movs	r0, #15
}
 80089f4:	4770      	bx	lr
	...

080089f8 <USB_ActivateEndpoint>:
{
 80089f8:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80089fa:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80089fe:	784b      	ldrb	r3, [r1, #1]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d021      	beq.n	8008a48 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a04:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8008a08:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 8008a0c:	f00c 040f 	and.w	r4, ip, #15
 8008a10:	2201      	movs	r2, #1
 8008a12:	40a2      	lsls	r2, r4
 8008a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a18:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a1c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8008a20:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008a24:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008a28:	d10c      	bne.n	8008a44 <USB_ActivateEndpoint+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a2a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8008a2e:	688b      	ldr	r3, [r1, #8]
 8008a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a34:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a36:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	4b13      	ldr	r3, [pc, #76]	@ (8008a8c <USB_ActivateEndpoint+0x94>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8008a44:	2000      	movs	r0, #0
 8008a46:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008a48:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8008a4c:	f00c 0e0f 	and.w	lr, ip, #15
 8008a50:	fa03 f30e 	lsl.w	r3, r3, lr
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a5c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8008a60:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008a64:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008a68:	d1ec      	bne.n	8008a44 <USB_ActivateEndpoint+0x4c>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a6a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8008a6e:	688b      	ldr	r3, [r1, #8]
 8008a70:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a74:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a76:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a7a:	ea43 538c 	orr.w	r3, r3, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	4b02      	ldr	r3, [pc, #8]	@ (8008a8c <USB_ActivateEndpoint+0x94>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8008a88:	e7dc      	b.n	8008a44 <USB_ActivateEndpoint+0x4c>
 8008a8a:	bf00      	nop
 8008a8c:	10008000 	.word	0x10008000

08008a90 <USB_DeactivateEndpoint>:
{
 8008a90:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8008a92:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8008a94:	784a      	ldrb	r2, [r1, #1]
 8008a96:	2a01      	cmp	r2, #1
 8008a98:	d026      	beq.n	8008ae8 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a9a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8008a9e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	db52      	blt.n	8008b4c <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008aa6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 8008aaa:	780a      	ldrb	r2, [r1, #0]
 8008aac:	f002 020f 	and.w	r2, r2, #15
 8008ab0:	f04f 0c01 	mov.w	ip, #1
 8008ab4:	fa0c f202 	lsl.w	r2, ip, r2
 8008ab8:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8008abc:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ac0:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8008ac4:	7809      	ldrb	r1, [r1, #0]
 8008ac6:	f001 010f 	and.w	r1, r1, #15
 8008aca:	fa0c fc01 	lsl.w	ip, ip, r1
 8008ace:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8008ad2:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ad6:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 8008ada:	4a23      	ldr	r2, [pc, #140]	@ (8008b68 <USB_DeactivateEndpoint+0xd8>)
 8008adc:	400a      	ands	r2, r1
 8008ade:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	bc30      	pop	{r4, r5}
 8008ae6:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ae8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8008aec:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8008af0:	2a00      	cmp	r2, #0
 8008af2:	db1e      	blt.n	8008b32 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008af4:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8008af8:	780a      	ldrb	r2, [r1, #0]
 8008afa:	f002 020f 	and.w	r2, r2, #15
 8008afe:	2401      	movs	r4, #1
 8008b00:	fa04 f202 	lsl.w	r2, r4, r2
 8008b04:	b292      	uxth	r2, r2
 8008b06:	ea25 0202 	bic.w	r2, r5, r2
 8008b0a:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b0e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8008b12:	7809      	ldrb	r1, [r1, #0]
 8008b14:	f001 010f 	and.w	r1, r1, #15
 8008b18:	408c      	lsls	r4, r1
 8008b1a:	b2a4      	uxth	r4, r4
 8008b1c:	ea22 0204 	bic.w	r2, r2, r4
 8008b20:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b24:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8008b28:	4a10      	ldr	r2, [pc, #64]	@ (8008b6c <USB_DeactivateEndpoint+0xdc>)
 8008b2a:	400a      	ands	r2, r1
 8008b2c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8008b30:	e7d7      	b.n	8008ae2 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b32:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8008b36:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008b3a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b3e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8008b42:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008b46:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8008b4a:	e7d3      	b.n	8008af4 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b4c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8008b50:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008b54:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b58:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8008b5c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008b60:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8008b64:	e79f      	b.n	8008aa6 <USB_DeactivateEndpoint+0x16>
 8008b66:	bf00      	nop
 8008b68:	eff37800 	.word	0xeff37800
 8008b6c:	ec337800 	.word	0xec337800

08008b70 <USB_EPStopXfer>:
{
 8008b70:	b410      	push	{r4}
 8008b72:	b083      	sub	sp, #12
 8008b74:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8008b7a:	7848      	ldrb	r0, [r1, #1]
 8008b7c:	2801      	cmp	r0, #1
 8008b7e:	d00b      	beq.n	8008b98 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b80:	780b      	ldrb	r3, [r1, #0]
 8008b82:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8008b86:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	db2d      	blt.n	8008bea <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8008b8e:	2000      	movs	r0, #0
}
 8008b90:	b003      	add	sp, #12
 8008b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b96:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b98:	780b      	ldrb	r3, [r1, #0]
 8008b9a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8008b9e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	db01      	blt.n	8008baa <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e7f2      	b.n	8008b90 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008baa:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8008bae:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8008bb2:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008bb6:	780b      	ldrb	r3, [r1, #0]
 8008bb8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8008bbc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8008bc0:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8008bc4:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8008bce:	9c01      	ldr	r4, [sp, #4]
 8008bd0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	d8db      	bhi.n	8008b90 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008bd8:	780b      	ldrb	r3, [r1, #0]
 8008bda:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8008bde:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	dbf0      	blt.n	8008bc8 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8008be6:	2000      	movs	r0, #0
 8008be8:	e7d2      	b.n	8008b90 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008bea:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8008bee:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8008bf2:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008bf6:	780b      	ldrb	r3, [r1, #0]
 8008bf8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8008bfc:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8008c00:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8008c04:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8008c08:	9b01      	ldr	r3, [sp, #4]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8008c0e:	9801      	ldr	r0, [sp, #4]
 8008c10:	f242 7310 	movw	r3, #10000	@ 0x2710
 8008c14:	4298      	cmp	r0, r3
 8008c16:	d808      	bhi.n	8008c2a <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c18:	780b      	ldrb	r3, [r1, #0]
 8008c1a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8008c1e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	dbf0      	blt.n	8008c08 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8008c26:	2000      	movs	r0, #0
 8008c28:	e7b2      	b.n	8008b90 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	e7b0      	b.n	8008b90 <USB_EPStopXfer+0x20>

08008c2e <USB_WritePacket>:
{
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8008c34:	b984      	cbnz	r4, 8008c58 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c36:	3303      	adds	r3, #3
 8008c38:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8008c3c:	f04f 0c00 	mov.w	ip, #0
 8008c40:	e008      	b.n	8008c54 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c42:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8008c46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c4a:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c4e:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8008c50:	f10c 0c01 	add.w	ip, ip, #1
 8008c54:	45f4      	cmp	ip, lr
 8008c56:	d3f4      	bcc.n	8008c42 <USB_WritePacket+0x14>
}
 8008c58:	2000      	movs	r0, #0
 8008c5a:	bd10      	pop	{r4, pc}

08008c5c <USB_EPStartXfer>:
{
 8008c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5e:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8008c60:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8008c62:	784b      	ldrb	r3, [r1, #1]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d02d      	beq.n	8008cc4 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c68:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8008c6c:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8008c70:	691d      	ldr	r5, [r3, #16]
 8008c72:	f36f 0512 	bfc	r5, #0, #19
 8008c76:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c78:	691d      	ldr	r5, [r3, #16]
 8008c7a:	f36f 45dc 	bfc	r5, #19, #10
 8008c7e:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8008c80:	2c00      	cmp	r4, #0
 8008c82:	f040 80ce 	bne.w	8008e22 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8008c86:	690c      	ldr	r4, [r1, #16]
 8008c88:	b10c      	cbz	r4, 8008c8e <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8008c8a:	688c      	ldr	r4, [r1, #8]
 8008c8c:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8008c8e:	688c      	ldr	r4, [r1, #8]
 8008c90:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c92:	691d      	ldr	r5, [r3, #16]
 8008c94:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008c98:	432c      	orrs	r4, r5
 8008c9a:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c9c:	691c      	ldr	r4, [r3, #16]
 8008c9e:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008ca2:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8008ca4:	2a01      	cmp	r2, #1
 8008ca6:	f000 80df 	beq.w	8008e68 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8008caa:	790b      	ldrb	r3, [r1, #4]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	f000 80e1 	beq.w	8008e74 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008cb2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8008cb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008cba:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	b003      	add	sp, #12
 8008cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8008cc4:	690b      	ldr	r3, [r1, #16]
 8008cc6:	bb73      	cbnz	r3, 8008d26 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cc8:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8008ccc:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008cd0:	f36f 45dc 	bfc	r5, #19, #10
 8008cd4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cd8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008cdc:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8008ce0:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ce4:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8008ce8:	f36f 0512 	bfc	r5, #0, #19
 8008cec:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8008cf0:	2a01      	cmp	r2, #1
 8008cf2:	d054      	beq.n	8008d9e <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008cf4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8008cf8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008cfc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008d00:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8008d04:	790b      	ldrb	r3, [r1, #4]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d072      	beq.n	8008df0 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8008d0a:	690b      	ldr	r3, [r1, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0d6      	beq.n	8008cbe <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d10:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8008d14:	7809      	ldrb	r1, [r1, #0]
 8008d16:	f001 010f 	and.w	r1, r1, #15
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	408a      	lsls	r2, r1
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8008d24:	e7cb      	b.n	8008cbe <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d26:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8008d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d2e:	691d      	ldr	r5, [r3, #16]
 8008d30:	f36f 0512 	bfc	r5, #0, #19
 8008d34:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d36:	691d      	ldr	r5, [r3, #16]
 8008d38:	f36f 45dc 	bfc	r5, #19, #10
 8008d3c:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8008d3e:	b984      	cbnz	r4, 8008d62 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8008d40:	690e      	ldr	r6, [r1, #16]
 8008d42:	688d      	ldr	r5, [r1, #8]
 8008d44:	42ae      	cmp	r6, r5
 8008d46:	d900      	bls.n	8008d4a <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8008d48:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d4a:	691d      	ldr	r5, [r3, #16]
 8008d4c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8008d50:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d52:	691d      	ldr	r5, [r3, #16]
 8008d54:	690e      	ldr	r6, [r1, #16]
 8008d56:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8008d5a:	ea45 050c 	orr.w	r5, r5, ip
 8008d5e:	611d      	str	r5, [r3, #16]
 8008d60:	e7c6      	b.n	8008cf0 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d62:	690d      	ldr	r5, [r1, #16]
 8008d64:	688e      	ldr	r6, [r1, #8]
 8008d66:	4435      	add	r5, r6
 8008d68:	3d01      	subs	r5, #1
 8008d6a:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008d6e:	691e      	ldr	r6, [r3, #16]
 8008d70:	fa1f fc85 	uxth.w	ip, r5
 8008d74:	4f49      	ldr	r7, [pc, #292]	@ (8008e9c <USB_EPStartXfer+0x240>)
 8008d76:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8008d7a:	4335      	orrs	r5, r6
 8008d7c:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8008d7e:	790d      	ldrb	r5, [r1, #4]
 8008d80:	2d01      	cmp	r5, #1
 8008d82:	d1e6      	bne.n	8008d52 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d84:	691d      	ldr	r5, [r3, #16]
 8008d86:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8008d8a:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008d8c:	691d      	ldr	r5, [r3, #16]
 8008d8e:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8008d92:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8008d96:	ea45 050c 	orr.w	r5, r5, ip
 8008d9a:	611d      	str	r5, [r3, #16]
 8008d9c:	e7d9      	b.n	8008d52 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8008d9e:	69cb      	ldr	r3, [r1, #28]
 8008da0:	b11b      	cbz	r3, 8008daa <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008da2:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8008da6:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8008daa:	790b      	ldrb	r3, [r1, #4]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d008      	beq.n	8008dc2 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008db0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8008db4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008db8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008dbc:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8008dc0:	e77d      	b.n	8008cbe <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dc2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008dc6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008dca:	d108      	bne.n	8008dde <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008dcc:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8008dd0:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8008dd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008dd8:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8008ddc:	e7e8      	b.n	8008db0 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008dde:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8008de2:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8008de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dea:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8008dee:	e7df      	b.n	8008db0 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008df0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008df4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008df8:	d10c      	bne.n	8008e14 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008dfa:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008dfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e02:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008e06:	9200      	str	r2, [sp, #0]
 8008e08:	8a0b      	ldrh	r3, [r1, #16]
 8008e0a:	780a      	ldrb	r2, [r1, #0]
 8008e0c:	68c9      	ldr	r1, [r1, #12]
 8008e0e:	f7ff ff0e 	bl	8008c2e <USB_WritePacket>
 8008e12:	e754      	b.n	8008cbe <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e14:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8008e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e1c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8008e20:	e7f1      	b.n	8008e06 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8008e22:	690c      	ldr	r4, [r1, #16]
 8008e24:	b954      	cbnz	r4, 8008e3c <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e26:	691c      	ldr	r4, [r3, #16]
 8008e28:	688d      	ldr	r5, [r1, #8]
 8008e2a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8008e2e:	432c      	orrs	r4, r5
 8008e30:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e32:	691c      	ldr	r4, [r3, #16]
 8008e34:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008e38:	611c      	str	r4, [r3, #16]
 8008e3a:	e733      	b.n	8008ca4 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e3c:	688d      	ldr	r5, [r1, #8]
 8008e3e:	442c      	add	r4, r5
 8008e40:	3c01      	subs	r4, #1
 8008e42:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008e46:	b2a4      	uxth	r4, r4
 8008e48:	fb04 f505 	mul.w	r5, r4, r5
 8008e4c:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e4e:	691d      	ldr	r5, [r3, #16]
 8008e50:	4e12      	ldr	r6, [pc, #72]	@ (8008e9c <USB_EPStartXfer+0x240>)
 8008e52:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8008e56:	432c      	orrs	r4, r5
 8008e58:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e5a:	691c      	ldr	r4, [r3, #16]
 8008e5c:	6a0d      	ldr	r5, [r1, #32]
 8008e5e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8008e62:	432c      	orrs	r4, r5
 8008e64:	611c      	str	r4, [r3, #16]
 8008e66:	e71d      	b.n	8008ca4 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e68:	68ca      	ldr	r2, [r1, #12]
 8008e6a:	2a00      	cmp	r2, #0
 8008e6c:	f43f af1d 	beq.w	8008caa <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e70:	615a      	str	r2, [r3, #20]
 8008e72:	e71a      	b.n	8008caa <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e74:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8008e78:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008e7c:	d106      	bne.n	8008e8c <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e7e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8008e82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e86:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8008e8a:	e712      	b.n	8008cb2 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e8c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8008e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e94:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8008e98:	e70b      	b.n	8008cb2 <USB_EPStartXfer+0x56>
 8008e9a:	bf00      	nop
 8008e9c:	1ff80000 	.word	0x1ff80000

08008ea0 <USB_ReadPacket>:
{
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	4684      	mov	ip, r0
 8008ea4:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ea6:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8008eaa:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e005      	b.n	8008ebe <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008eb2:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8008eb6:	6809      	ldr	r1, [r1, #0]
 8008eb8:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	4573      	cmp	r3, lr
 8008ec0:	d3f7      	bcc.n	8008eb2 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8008ec2:	b17a      	cbz	r2, 8008ee4 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ec4:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8008ec8:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8008ecc:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ece:	b2cb      	uxtb	r3, r1
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	fa24 f303 	lsr.w	r3, r4, r3
 8008ed6:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8008eda:	3101      	adds	r1, #1
      remaining_bytes--;
 8008edc:	3a01      	subs	r2, #1
 8008ede:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	d1f4      	bne.n	8008ece <USB_ReadPacket+0x2e>
}
 8008ee4:	bd10      	pop	{r4, pc}

08008ee6 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8008ee6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8008ee8:	784a      	ldrb	r2, [r1, #1]
 8008eea:	2a01      	cmp	r2, #1
 8008eec:	d014      	beq.n	8008f18 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008eee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008ef2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	db06      	blt.n	8008f08 <USB_EPSetStall+0x22>
 8008efa:	b12b      	cbz	r3, 8008f08 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008efc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008f00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f04:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f08:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008f0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f10:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8008f14:	2000      	movs	r0, #0
 8008f16:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f18:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008f1c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8008f20:	2a00      	cmp	r2, #0
 8008f22:	db06      	blt.n	8008f32 <USB_EPSetStall+0x4c>
 8008f24:	b12b      	cbz	r3, 8008f32 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f26:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008f2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f2e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f32:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008f36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f3a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8008f3e:	e7e9      	b.n	8008f14 <USB_EPSetStall+0x2e>

08008f40 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8008f40:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8008f42:	784a      	ldrb	r2, [r1, #1]
 8008f44:	2a01      	cmp	r2, #1
 8008f46:	d00e      	beq.n	8008f66 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f48:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008f4c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008f50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f54:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f58:	790b      	ldrb	r3, [r1, #4]
 8008f5a:	3b02      	subs	r3, #2
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d915      	bls.n	8008f8e <USB_EPClearStall+0x4e>
}
 8008f62:	2000      	movs	r0, #0
 8008f64:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f66:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008f6a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008f6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f72:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f76:	790b      	ldrb	r3, [r1, #4]
 8008f78:	3b02      	subs	r3, #2
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d8f0      	bhi.n	8008f62 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f80:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8008f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f88:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8008f8c:	e7e9      	b.n	8008f62 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f8e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f96:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8008f9a:	e7e2      	b.n	8008f62 <USB_EPClearStall+0x22>

08008f9c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f9c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8008fa0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008fa4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fa8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8008fac:	0109      	lsls	r1, r1, #4
 8008fae:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8008fb2:	430b      	orrs	r3, r1
 8008fb4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8008fb8:	2000      	movs	r0, #0
 8008fba:	4770      	bx	lr

08008fbc <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fbc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8008fc0:	f023 0303 	bic.w	r3, r3, #3
 8008fc4:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008fc8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8008fcc:	f023 0302 	bic.w	r3, r3, #2
 8008fd0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	4770      	bx	lr

08008fd8 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fd8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8008fdc:	f023 0303 	bic.w	r3, r3, #3
 8008fe0:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fe4:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8008fe8:	f043 0302 	orr.w	r3, r3, #2
 8008fec:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	4770      	bx	lr

08008ff4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8008ff4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8008ff6:	6980      	ldr	r0, [r0, #24]
}
 8008ff8:	4010      	ands	r0, r2
 8008ffa:	4770      	bx	lr

08008ffc <USB_ReadChInterrupts>:
  tmpreg = USBx_HC(chnum)->HCINT;
 8008ffc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8009000:	f500 63a0 	add.w	r3, r0, #1280	@ 0x500
 8009004:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009008:	68db      	ldr	r3, [r3, #12]
}
 800900a:	4018      	ands	r0, r3
 800900c:	4770      	bx	lr

0800900e <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800900e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8009012:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009016:	69c0      	ldr	r0, [r0, #28]
 8009018:	4018      	ands	r0, r3
}
 800901a:	0c00      	lsrs	r0, r0, #16
 800901c:	4770      	bx	lr

0800901e <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800901e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8009022:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009026:	69c0      	ldr	r0, [r0, #28]
 8009028:	4018      	ands	r0, r3
}
 800902a:	b280      	uxth	r0, r0
 800902c:	4770      	bx	lr

0800902e <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800902e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8009032:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009036:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 800903a:	6940      	ldr	r0, [r0, #20]
}
 800903c:	4010      	ands	r0, r2
 800903e:	4770      	bx	lr

08009040 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8009040:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009044:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009048:	f001 0c0f 	and.w	ip, r1, #15
 800904c:	fa23 f30c 	lsr.w	r3, r3, ip
 8009050:	01db      	lsls	r3, r3, #7
 8009052:	b2db      	uxtb	r3, r3
 8009054:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009056:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800905a:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 800905e:	6880      	ldr	r0, [r0, #8]
}
 8009060:	4018      	ands	r0, r3
 8009062:	4770      	bx	lr

08009064 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8009064:	6940      	ldr	r0, [r0, #20]
}
 8009066:	f000 0001 	and.w	r0, r0, #1
 800906a:	4770      	bx	lr

0800906c <USB_SetCurrentMode>:
{
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009070:	68c3      	ldr	r3, [r0, #12]
 8009072:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009076:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009078:	2901      	cmp	r1, #1
 800907a:	d013      	beq.n	80090a4 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 800907c:	bb19      	cbnz	r1, 80090c6 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800907e:	68c3      	ldr	r3, [r0, #12]
 8009080:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009084:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8009086:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8009088:	200a      	movs	r0, #10
 800908a:	f7f9 fb1b 	bl	80026c4 <HAL_Delay>
      ms += 10U;
 800908e:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009090:	4628      	mov	r0, r5
 8009092:	f7ff ffe7 	bl	8009064 <USB_GetMode>
 8009096:	b108      	cbz	r0, 800909c <USB_SetCurrentMode+0x30>
 8009098:	2cc7      	cmp	r4, #199	@ 0xc7
 800909a:	d9f5      	bls.n	8009088 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800909c:	2cc8      	cmp	r4, #200	@ 0xc8
 800909e:	d014      	beq.n	80090ca <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80090a0:	2000      	movs	r0, #0
}
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090a4:	68c3      	ldr	r3, [r0, #12]
 80090a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090aa:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80090ac:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80090ae:	200a      	movs	r0, #10
 80090b0:	f7f9 fb08 	bl	80026c4 <HAL_Delay>
      ms += 10U;
 80090b4:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090b6:	4628      	mov	r0, r5
 80090b8:	f7ff ffd4 	bl	8009064 <USB_GetMode>
 80090bc:	2801      	cmp	r0, #1
 80090be:	d0ed      	beq.n	800909c <USB_SetCurrentMode+0x30>
 80090c0:	2cc7      	cmp	r4, #199	@ 0xc7
 80090c2:	d9f4      	bls.n	80090ae <USB_SetCurrentMode+0x42>
 80090c4:	e7ea      	b.n	800909c <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80090c6:	2001      	movs	r0, #1
 80090c8:	e7eb      	b.n	80090a2 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80090ca:	2001      	movs	r0, #1
 80090cc:	e7e9      	b.n	80090a2 <USB_SetCurrentMode+0x36>

080090ce <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090ce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 80090d2:	f36f 030a 	bfc	r3, #0, #11
 80090d6:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80090da:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80090de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090e2:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80090e6:	2000      	movs	r0, #0
 80090e8:	4770      	bx	lr
	...

080090ec <USB_EP0_OutStart>:
{
 80090ec:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80090ee:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80090f0:	4b15      	ldr	r3, [pc, #84]	@ (8009148 <USB_EP0_OutStart+0x5c>)
 80090f2:	429c      	cmp	r4, r3
 80090f4:	d903      	bls.n	80090fe <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090f6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	db16      	blt.n	800912c <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80090fe:	2400      	movs	r4, #0
 8009100:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009104:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8009108:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 800910c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009110:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8009114:	f044 0418 	orr.w	r4, r4, #24
 8009118:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800911c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8009120:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8009124:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8009128:	2901      	cmp	r1, #1
 800912a:	d003      	beq.n	8009134 <USB_EP0_OutStart+0x48>
}
 800912c:	2000      	movs	r0, #0
 800912e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009132:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009134:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009138:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 800913c:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009140:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8009144:	e7f2      	b.n	800912c <USB_EP0_OutStart+0x40>
 8009146:	bf00      	nop
 8009148:	4f54300a 	.word	0x4f54300a

0800914c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800914c:	b084      	sub	sp, #16
 800914e:	b538      	push	{r3, r4, r5, lr}
 8009150:	4604      	mov	r4, r0
 8009152:	a805      	add	r0, sp, #20
 8009154:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800915e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009160:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009164:	63a3      	str	r3, [r4, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8009166:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009168:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800916c:	63a3      	str	r3, [r4, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800916e:	68e3      	ldr	r3, [r4, #12]
 8009170:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009174:	d111      	bne.n	800919a <USB_HostInit+0x4e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009176:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d006      	beq.n	800918c <USB_HostInit+0x40>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800917e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 8009182:	f023 0304 	bic.w	r3, r3, #4
 8009186:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 800918a:	e00c      	b.n	80091a6 <USB_HostInit+0x5a>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800918c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 8009190:	f043 0304 	orr.w	r3, r3, #4
 8009194:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 8009198:	e005      	b.n	80091a6 <USB_HostInit+0x5a>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800919a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 800919e:	f023 0304 	bic.w	r3, r3, #4
 80091a2:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091a6:	2110      	movs	r1, #16
 80091a8:	4620      	mov	r0, r4
 80091aa:	f7ff fafd 	bl	80087a8 <USB_FlushTxFifo>
 80091ae:	4605      	mov	r5, r0
 80091b0:	b100      	cbz	r0, 80091b4 <USB_HostInit+0x68>
  {
    ret = HAL_ERROR;
 80091b2:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091b4:	4620      	mov	r0, r4
 80091b6:	f7ff fb1c 	bl	80087f2 <USB_FlushRxFifo>
 80091ba:	b100      	cbz	r0, 80091be <USB_HostInit+0x72>
  {
    ret = HAL_ERROR;
 80091bc:	2501      	movs	r5, #1
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80091be:	2200      	movs	r2, #0
 80091c0:	e009      	b.n	80091d6 <USB_HostInit+0x8a>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80091c2:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 80091c6:	f04f 31ff 	mov.w	r1, #4294967295
 80091ca:	f8c3 1508 	str.w	r1, [r3, #1288]	@ 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 80091ce:	2100      	movs	r1, #0
 80091d0:	f8c3 150c 	str.w	r1, [r3, #1292]	@ 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 80091d4:	3201      	adds	r2, #1
 80091d6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80091da:	4293      	cmp	r3, r2
 80091dc:	d8f1      	bhi.n	80091c2 <USB_HostInit+0x76>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80091e2:	f04f 33ff 	mov.w	r3, #4294967295
 80091e6:	6163      	str	r3, [r4, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
 80091e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091ec:	6263      	str	r3, [r4, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80091ee:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 80091f2:	62a3      	str	r3, [r4, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80091f4:	4b09      	ldr	r3, [pc, #36]	@ (800921c <USB_HostInit+0xd0>)
 80091f6:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091fa:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80091fe:	b91b      	cbnz	r3, 8009208 <USB_HostInit+0xbc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009200:	69a3      	ldr	r3, [r4, #24]
 8009202:	f043 0310 	orr.w	r3, r3, #16
 8009206:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009208:	69a2      	ldr	r2, [r4, #24]
 800920a:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <USB_HostInit+0xd4>)
 800920c:	4313      	orrs	r3, r2
 800920e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8009210:	4628      	mov	r0, r5
 8009212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009216:	b004      	add	sp, #16
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	00e00300 	.word	0x00e00300
 8009220:	a3200008 	.word	0xa3200008

08009224 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009224:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8009228:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
 800922c:	f023 0303 	bic.w	r3, r3, #3
 8009230:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009234:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
 8009238:	f001 0203 	and.w	r2, r1, #3
 800923c:	4313      	orrs	r3, r2
 800923e:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400

  if (freq == HCFG_48_MHZ)
 8009242:	2901      	cmp	r1, #1
 8009244:	d007      	beq.n	8009256 <USB_InitFSLSPClkSel+0x32>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
  }
  else if (freq == HCFG_6_MHZ)
 8009246:	2902      	cmp	r1, #2
 8009248:	d10b      	bne.n	8009262 <USB_InitFSLSPClkSel+0x3e>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800924a:	f241 7370 	movw	r3, #6000	@ 0x1770
 800924e:	f8cc 3004 	str.w	r3, [ip, #4]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009252:	2000      	movs	r0, #0
 8009254:	4770      	bx	lr
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009256:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800925a:	f8cc 3004 	str.w	r3, [ip, #4]
  return HAL_OK;
 800925e:	2000      	movs	r0, #0
 8009260:	4770      	bx	lr
    return HAL_ERROR;
 8009262:	2001      	movs	r0, #1
}
 8009264:	4770      	bx	lr

08009266 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009266:	b530      	push	{r4, r5, lr}
 8009268:	b083      	sub	sp, #12
 800926a:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800926c:	2500      	movs	r5, #0
 800926e:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8009270:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 8009274:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800927c:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800927e:	9b01      	ldr	r3, [sp, #4]
 8009280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009284:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8009288:	2064      	movs	r0, #100	@ 0x64
 800928a:	f7f9 fa1b 	bl	80026c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800928e:	9b01      	ldr	r3, [sp, #4]
 8009290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009294:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  HAL_Delay(10U);
 8009298:	200a      	movs	r0, #10
 800929a:	f7f9 fa13 	bl	80026c4 <HAL_Delay>

  return HAL_OK;
}
 800929e:	4628      	mov	r0, r5
 80092a0:	b003      	add	sp, #12
 80092a2:	bd30      	pop	{r4, r5, pc}

080092a4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80092a4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80092aa:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 80092ae:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80092b0:	9b01      	ldr	r3, [sp, #4]
 80092b2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80092b6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80092b8:	9b01      	ldr	r3, [sp, #4]
 80092ba:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80092be:	d101      	bne.n	80092c4 <USB_DriveVbus+0x20>
 80092c0:	2901      	cmp	r1, #1
 80092c2:	d00c      	beq.n	80092de <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80092ca:	d005      	beq.n	80092d8 <USB_DriveVbus+0x34>
 80092cc:	b921      	cbnz	r1, 80092d8 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80092ce:	9b01      	ldr	r3, [sp, #4]
 80092d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092d4:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  }
  return HAL_OK;
}
 80092d8:	2000      	movs	r0, #0
 80092da:	b002      	add	sp, #8
 80092dc:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80092e4:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
 80092e8:	e7ec      	b.n	80092c4 <USB_DriveVbus+0x20>

080092ea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80092ea:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80092f0:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 80092f4:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80092f6:	9801      	ldr	r0, [sp, #4]
}
 80092f8:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80092fc:	b002      	add	sp, #8
 80092fe:	4770      	bx	lr

08009300 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009300:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8009304:	6880      	ldr	r0, [r0, #8]
}
 8009306:	b280      	uxth	r0, r0
 8009308:	4770      	bx	lr

0800930a <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800930a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930e:	4691      	mov	r9, r2
 8009310:	461c      	mov	r4, r3
 8009312:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009316:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 800931a:	f506 63a0 	add.w	r3, r6, #1280	@ 0x500
 800931e:	f04f 32ff 	mov.w	r2, #4294967295
 8009322:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009324:	2d03      	cmp	r5, #3
 8009326:	d87d      	bhi.n	8009424 <USB_HC_Init+0x11a>
 8009328:	e8df f005 	tbb	[pc, r5]
 800932c:	60026e02 	.word	0x60026e02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009330:	f240 429d 	movw	r2, #1181	@ 0x49d
 8009334:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009336:	f019 0f80 	tst.w	r9, #128	@ 0x80
 800933a:	d151      	bne.n	80093e0 <USB_HC_Init+0xd6>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009342:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009344:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009346:	2200      	movs	r2, #0
 8009348:	605a      	str	r2, [r3, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	f042 0202 	orr.w	r2, r2, #2
 8009350:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009352:	f8d0 3418 	ldr.w	r3, [r0, #1048]	@ 0x418
 8009356:	f001 010f 	and.w	r1, r1, #15
 800935a:	2201      	movs	r2, #1
 800935c:	408a      	lsls	r2, r1
 800935e:	4313      	orrs	r3, r2
 8009360:	f8c0 3418 	str.w	r3, [r0, #1048]	@ 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009364:	6983      	ldr	r3, [r0, #24]
 8009366:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800936a:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800936c:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8009370:	d15a      	bne.n	8009428 <USB_HC_Init+0x11e>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8009372:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009376:	f7ff ffb8 	bl	80092ea <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800937a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800937e:	2b02      	cmp	r3, #2
 8009380:	bf14      	ite	ne
 8009382:	2300      	movne	r3, #0
 8009384:	2301      	moveq	r3, #1
 8009386:	2802      	cmp	r0, #2
 8009388:	bf08      	it	eq
 800938a:	2300      	moveq	r3, #0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d04e      	beq.n	800942e <USB_HC_Init+0x124>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009390:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009394:	05a3      	lsls	r3, r4, #22
 8009396:	f003 53fe 	and.w	r3, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800939a:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 800939e:	f409 49f0 	and.w	r9, r9, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093a2:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80093a6:	04a9      	lsls	r1, r5, #18
 80093a8:	f401 2140 	and.w	r1, r1, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80093ac:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80093ae:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80093b2:	f3c1 010a 	ubfx	r1, r1, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80093b6:	430b      	orrs	r3, r1
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80093b8:	ea43 0308 	orr.w	r3, r3, r8
 80093bc:	4313      	orrs	r3, r2
 80093be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093c2:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80093c6:	2d01      	cmp	r5, #1
 80093c8:	bf18      	it	ne
 80093ca:	2d03      	cmpne	r5, #3
 80093cc:	d105      	bne.n	80093da <USB_HC_Init+0xd0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80093ce:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
 80093d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093d6:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
  }

  return ret;
}
 80093da:	4638      	mov	r0, r7
 80093dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093e6:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093e8:	2700      	movs	r7, #0
 80093ea:	e7ac      	b.n	8009346 <USB_HC_Init+0x3c>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093ec:	f240 629d 	movw	r2, #1693	@ 0x69d
 80093f0:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80093f2:	f019 0f80 	tst.w	r9, #128	@ 0x80
 80093f6:	d101      	bne.n	80093fc <USB_HC_Init+0xf2>
  HAL_StatusTypeDef ret = HAL_OK;
 80093f8:	2700      	movs	r7, #0
 80093fa:	e7a4      	b.n	8009346 <USB_HC_Init+0x3c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093fc:	68da      	ldr	r2, [r3, #12]
 80093fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009402:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009404:	2700      	movs	r7, #0
 8009406:	e79e      	b.n	8009346 <USB_HC_Init+0x3c>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009408:	f240 2225 	movw	r2, #549	@ 0x225
 800940c:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 800940e:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8009412:	d101      	bne.n	8009418 <USB_HC_Init+0x10e>
  HAL_StatusTypeDef ret = HAL_OK;
 8009414:	2700      	movs	r7, #0
 8009416:	e796      	b.n	8009346 <USB_HC_Init+0x3c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800941e:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009420:	2700      	movs	r7, #0
 8009422:	e790      	b.n	8009346 <USB_HC_Init+0x3c>
  switch (ep_type)
 8009424:	2701      	movs	r7, #1
 8009426:	e78e      	b.n	8009346 <USB_HC_Init+0x3c>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009428:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
 800942c:	e7a3      	b.n	8009376 <USB_HC_Init+0x6c>
    HCcharLowSpeed = 0U;
 800942e:	2200      	movs	r2, #0
 8009430:	e7b0      	b.n	8009394 <USB_HC_Init+0x8a>

08009432 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009432:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8009436:	6940      	ldr	r0, [r0, #20]
}
 8009438:	b280      	uxth	r0, r0
 800943a:	4770      	bx	lr

0800943c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800943c:	b470      	push	{r4, r5, r6}
 800943e:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009444:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8009448:	f501 62a0 	add.w	r2, r1, #1280	@ 0x500
 800944c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 8009450:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009454:	f8d1 5500 	ldr.w	r5, [r1, #1280]	@ 0x500
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009458:	6854      	ldr	r4, [r2, #4]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800945a:	6886      	ldr	r6, [r0, #8]
 800945c:	f016 0f20 	tst.w	r6, #32
 8009460:	d007      	beq.n	8009472 <USB_HC_Halt+0x36>
 8009462:	0fed      	lsrs	r5, r5, #31
 8009464:	0fe4      	lsrs	r4, r4, #31
 8009466:	b924      	cbnz	r4, 8009472 <USB_HC_Halt+0x36>
 8009468:	b3cd      	cbz	r5, 80094de <USB_HC_Halt+0xa2>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800946a:	2b03      	cmp	r3, #3
 800946c:	bf18      	it	ne
 800946e:	2b01      	cmpne	r3, #1
 8009470:	d035      	beq.n	80094de <USB_HC_Halt+0xa2>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009472:	2b02      	cmp	r3, #2
 8009474:	bf18      	it	ne
 8009476:	2b00      	cmpne	r3, #0
 8009478:	d135      	bne.n	80094e6 <USB_HC_Halt+0xaa>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800947a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800947e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009482:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009486:	6883      	ldr	r3, [r0, #8]
 8009488:	f013 0f20 	tst.w	r3, #32
 800948c:	d121      	bne.n	80094d2 <USB_HC_Halt+0x96>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800948e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8009490:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
 8009494:	d116      	bne.n	80094c4 <USB_HC_Halt+0x88>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009496:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800949a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800949e:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094a2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80094a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80094aa:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
        do
        {
          count++;
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	3301      	adds	r3, #1
 80094b2:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094ba:	d810      	bhi.n	80094de <USB_HC_Halt+0xa2>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094bc:	6813      	ldr	r3, [r2, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	dbf5      	blt.n	80094ae <USB_HC_Halt+0x72>
 80094c2:	e00c      	b.n	80094de <USB_HC_Halt+0xa2>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094c4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80094c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80094cc:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
 80094d0:	e005      	b.n	80094de <USB_HC_Halt+0xa2>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094d2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80094d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80094da:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80094de:	2000      	movs	r0, #0
 80094e0:	b003      	add	sp, #12
 80094e2:	bc70      	pop	{r4, r5, r6}
 80094e4:	4770      	bx	lr
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80094e6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80094ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094ee:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80094f2:	f8d0 3410 	ldr.w	r3, [r0, #1040]	@ 0x410
 80094f6:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
 80094fa:	d116      	bne.n	800952a <USB_HC_Halt+0xee>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80094fc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 8009500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009504:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009508:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800950c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009510:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
        count++;
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	3301      	adds	r3, #1
 8009518:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 800951a:	9b01      	ldr	r3, [sp, #4]
 800951c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009520:	d8dd      	bhi.n	80094de <USB_HC_Halt+0xa2>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dbf5      	blt.n	8009514 <USB_HC_Halt+0xd8>
 8009528:	e7d9      	b.n	80094de <USB_HC_Halt+0xa2>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800952a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800952e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009532:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
 8009536:	e7d2      	b.n	80094de <USB_HC_Halt+0xa2>

08009538 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009538:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800953c:	4a06      	ldr	r2, [pc, #24]	@ (8009558 <USB_DoPing+0x20>)
 800953e:	f8c0 2510 	str.w	r2, [r0, #1296]	@ 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009542:	f8d0 3500 	ldr.w	r3, [r0, #1280]	@ 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009546:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800954a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800954e:	f8c0 3500 	str.w	r3, [r0, #1280]	@ 0x500

  return HAL_OK;
}
 8009552:	2000      	movs	r0, #0
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	80080000 	.word	0x80080000

0800955c <USB_HC_StartXfer>:
{
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	b084      	sub	sp, #16
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009560:	784b      	ldrb	r3, [r1, #1]
  if (dma == 1U)
 8009562:	2a01      	cmp	r2, #1
 8009564:	d01a      	beq.n	800959c <USB_HC_StartXfer+0x40>
    if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009566:	888c      	ldrh	r4, [r1, #4]
 8009568:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800956c:	d024      	beq.n	80095b8 <USB_HC_StartXfer+0x5c>
  if (hc->do_ssplit == 1U)
 800956e:	798c      	ldrb	r4, [r1, #6]
 8009570:	2c01      	cmp	r4, #1
 8009572:	d027      	beq.n	80095c4 <USB_HC_StartXfer+0x68>
    if (hc->xfer_len > 0U)
 8009574:	6a0d      	ldr	r5, [r1, #32]
 8009576:	2d00      	cmp	r5, #0
 8009578:	d058      	beq.n	800962c <USB_HC_StartXfer+0xd0>
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800957a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 800957e:	eb05 040c 	add.w	r4, r5, ip
 8009582:	3c01      	subs	r4, #1
 8009584:	fbb4 f4fc 	udiv	r4, r4, ip
 8009588:	b2a4      	uxth	r4, r4
      if (num_packets > max_hc_pkt_count)
 800958a:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800958e:	d94e      	bls.n	800962e <USB_HC_StartXfer+0xd2>
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009590:	ea4f 240c 	mov.w	r4, ip, lsl #8
 8009594:	61cc      	str	r4, [r1, #28]
        num_packets = max_hc_pkt_count;
 8009596:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800959a:	e048      	b.n	800962e <USB_HC_StartXfer+0xd2>
    if ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 800959c:	7c8c      	ldrb	r4, [r1, #18]
 800959e:	2c02      	cmp	r4, #2
 80095a0:	bf18      	it	ne
 80095a2:	2c00      	cmpne	r4, #0
 80095a4:	d1e3      	bne.n	800956e <USB_HC_StartXfer+0x12>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80095a6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80095aa:	f8d4 550c 	ldr.w	r5, [r4, #1292]	@ 0x50c
 80095ae:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
 80095b2:	f8c4 550c 	str.w	r5, [r4, #1292]	@ 0x50c
 80095b6:	e7da      	b.n	800956e <USB_HC_StartXfer+0x12>
      (void)USB_DoPing(USBx, hc->ch_num);
 80095b8:	4619      	mov	r1, r3
 80095ba:	f7ff ffbd 	bl	8009538 <USB_DoPing>
}
 80095be:	2000      	movs	r0, #0
 80095c0:	b004      	add	sp, #16
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
    if (hc->ep_is_in != 0U)
 80095c4:	78cc      	ldrb	r4, [r1, #3]
 80095c6:	b11c      	cbz	r4, 80095d0 <USB_HC_StartXfer+0x74>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095c8:	8a8c      	ldrh	r4, [r1, #20]
 80095ca:	61cc      	str	r4, [r1, #28]
    num_packets = 1U;
 80095cc:	2401      	movs	r4, #1
 80095ce:	e035      	b.n	800963c <USB_HC_StartXfer+0xe0>
      if (hc->ep_type == EP_TYPE_ISOC)
 80095d0:	7c8c      	ldrb	r4, [r1, #18]
 80095d2:	2c01      	cmp	r4, #1
 80095d4:	d005      	beq.n	80095e2 <USB_HC_StartXfer+0x86>
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80095d6:	2a01      	cmp	r2, #1
 80095d8:	d021      	beq.n	800961e <USB_HC_StartXfer+0xc2>
          hc->XferSize = hc->xfer_len;
 80095da:	6a0c      	ldr	r4, [r1, #32]
 80095dc:	61cc      	str	r4, [r1, #28]
    num_packets = 1U;
 80095de:	2401      	movs	r4, #1
 80095e0:	e02c      	b.n	800963c <USB_HC_StartXfer+0xe0>
        if (hc->xfer_len > ISO_SPLT_MPS)
 80095e2:	6a0c      	ldr	r4, [r1, #32]
 80095e4:	2cbc      	cmp	r4, #188	@ 0xbc
 80095e6:	d90d      	bls.n	8009604 <USB_HC_StartXfer+0xa8>
          hc->XferSize = hc->max_packet;
 80095e8:	8a8c      	ldrh	r4, [r1, #20]
 80095ea:	61cc      	str	r4, [r1, #28]
          hc->xfer_len = hc->XferSize;
 80095ec:	620c      	str	r4, [r1, #32]
          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80095ee:	68cc      	ldr	r4, [r1, #12]
 80095f0:	3c01      	subs	r4, #1
 80095f2:	2c01      	cmp	r4, #1
 80095f4:	d902      	bls.n	80095fc <USB_HC_StartXfer+0xa0>
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80095f6:	2401      	movs	r4, #1
 80095f8:	60cc      	str	r4, [r1, #12]
 80095fa:	e01f      	b.n	800963c <USB_HC_StartXfer+0xe0>
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80095fc:	2402      	movs	r4, #2
 80095fe:	60cc      	str	r4, [r1, #12]
    num_packets = 1U;
 8009600:	2401      	movs	r4, #1
 8009602:	e01b      	b.n	800963c <USB_HC_StartXfer+0xe0>
          hc->XferSize = hc->xfer_len;
 8009604:	61cc      	str	r4, [r1, #28]
          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009606:	68cc      	ldr	r4, [r1, #12]
 8009608:	3c01      	subs	r4, #1
 800960a:	2c01      	cmp	r4, #1
 800960c:	d903      	bls.n	8009616 <USB_HC_StartXfer+0xba>
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800960e:	2404      	movs	r4, #4
 8009610:	60cc      	str	r4, [r1, #12]
    num_packets = 1U;
 8009612:	2401      	movs	r4, #1
 8009614:	e012      	b.n	800963c <USB_HC_StartXfer+0xe0>
            hc->iso_splt_xactPos = HCSPLT_END;
 8009616:	2403      	movs	r4, #3
 8009618:	60cc      	str	r4, [r1, #12]
    num_packets = 1U;
 800961a:	2401      	movs	r4, #1
 800961c:	e00e      	b.n	800963c <USB_HC_StartXfer+0xe0>
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800961e:	6a0d      	ldr	r5, [r1, #32]
 8009620:	8a8c      	ldrh	r4, [r1, #20]
 8009622:	42a5      	cmp	r5, r4
 8009624:	d9d9      	bls.n	80095da <USB_HC_StartXfer+0x7e>
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009626:	61cc      	str	r4, [r1, #28]
    num_packets = 1U;
 8009628:	2401      	movs	r4, #1
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800962a:	e007      	b.n	800963c <USB_HC_StartXfer+0xe0>
      num_packets = 1U;
 800962c:	2401      	movs	r4, #1
    if (hc->ep_is_in != 0U)
 800962e:	78ce      	ldrb	r6, [r1, #3]
 8009630:	2e00      	cmp	r6, #0
 8009632:	d062      	beq.n	80096fa <USB_HC_StartXfer+0x19e>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009634:	8a8d      	ldrh	r5, [r1, #20]
 8009636:	fb04 f505 	mul.w	r5, r4, r5
 800963a:	61cd      	str	r5, [r1, #28]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800963c:	69cd      	ldr	r5, [r1, #28]
 800963e:	f3c5 0c12 	ubfx	ip, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009642:	4d6f      	ldr	r5, [pc, #444]	@ (8009800 <USB_HC_StartXfer+0x2a4>)
 8009644:	ea05 44c4 	and.w	r4, r5, r4, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009648:	ea4c 0c04 	orr.w	ip, ip, r4
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800964c:	7d8c      	ldrb	r4, [r1, #22]
 800964e:	0764      	lsls	r4, r4, #29
 8009650:	f004 44c0 	and.w	r4, r4, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009654:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8009658:	f503 6ea0 	add.w	lr, r3, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800965c:	ea4c 0404 	orr.w	r4, ip, r4
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009660:	f8ce 4010 	str.w	r4, [lr, #16]
  if (dma != 0U)
 8009664:	b112      	cbz	r2, 800966c <USB_HC_StartXfer+0x110>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009666:	698c      	ldr	r4, [r1, #24]
 8009668:	f8ce 4014 	str.w	r4, [lr, #20]
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800966c:	f500 6580 	add.w	r5, r0, #1024	@ 0x400
 8009670:	68ac      	ldr	r4, [r5, #8]
 8009672:	f014 0f01 	tst.w	r4, #1
 8009676:	bf0c      	ite	eq
 8009678:	f04f 0c01 	moveq.w	ip, #1
 800967c:	f04f 0c00 	movne.w	ip, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009680:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 8009684:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8009688:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800968c:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 8009690:	ea44 744c 	orr.w	r4, r4, ip, lsl #29
 8009694:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  if (hc->do_ssplit == 1U)
 8009698:	798c      	ldrb	r4, [r1, #6]
 800969a:	2c01      	cmp	r4, #1
 800969c:	d02f      	beq.n	80096fe <USB_HC_StartXfer+0x1a2>
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800969e:	2400      	movs	r4, #0
 80096a0:	f8ce 4004 	str.w	r4, [lr, #4]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80096a4:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 80096a8:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096aa:	9c03      	ldr	r4, [sp, #12]
 80096ac:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 80096b0:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 80096b2:	78cc      	ldrb	r4, [r1, #3]
 80096b4:	2c00      	cmp	r4, #0
 80096b6:	d07f      	beq.n	80097b8 <USB_HC_StartXfer+0x25c>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80096b8:	9c03      	ldr	r4, [sp, #12]
 80096ba:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 80096be:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096c0:	9c03      	ldr	r4, [sp, #12]
 80096c2:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80096c6:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80096c8:	9c03      	ldr	r4, [sp, #12]
 80096ca:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  if (dma != 0U) /* dma mode */
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	f47f af75 	bne.w	80095be <USB_HC_StartXfer+0x62>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80096d4:	78cb      	ldrb	r3, [r1, #3]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f47f af71 	bne.w	80095be <USB_HC_StartXfer+0x62>
 80096dc:	6a0b      	ldr	r3, [r1, #32]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f43f af6d 	beq.w	80095be <USB_HC_StartXfer+0x62>
 80096e4:	79ca      	ldrb	r2, [r1, #7]
 80096e6:	2a00      	cmp	r2, #0
 80096e8:	f47f af69 	bne.w	80095be <USB_HC_StartXfer+0x62>
    switch (hc->ep_type)
 80096ec:	7c8a      	ldrb	r2, [r1, #18]
 80096ee:	2a03      	cmp	r2, #3
 80096f0:	d872      	bhi.n	80097d8 <USB_HC_StartXfer+0x27c>
 80096f2:	e8df f002 	tbb	[pc, r2]
 80096f6:	7966      	.short	0x7966
 80096f8:	7966      	.short	0x7966
      hc->XferSize = hc->xfer_len;
 80096fa:	61cd      	str	r5, [r1, #28]
 80096fc:	e79e      	b.n	800963c <USB_HC_StartXfer+0xe0>
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80096fe:	7c4e      	ldrb	r6, [r1, #17]
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009700:	7c0c      	ldrb	r4, [r1, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009702:	ea44 14c6 	orr.w	r4, r4, r6, lsl #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009706:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800970a:	f8ce 4004 	str.w	r4, [lr, #4]
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800970e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8009712:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8009716:	f8ce 400c 	str.w	r4, [lr, #12]
    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800971a:	79cc      	ldrb	r4, [r1, #7]
 800971c:	2c01      	cmp	r4, #1
 800971e:	d015      	beq.n	800974c <USB_HC_StartXfer+0x1f0>
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009720:	7c8c      	ldrb	r4, [r1, #18]
 8009722:	2c03      	cmp	r4, #3
 8009724:	bf18      	it	ne
 8009726:	2c01      	cmpne	r4, #1
 8009728:	d102      	bne.n	8009730 <USB_HC_StartXfer+0x1d4>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800972a:	79cc      	ldrb	r4, [r1, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800972c:	2c01      	cmp	r4, #1
 800972e:	d01d      	beq.n	800976c <USB_HC_StartXfer+0x210>
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009730:	7c8c      	ldrb	r4, [r1, #18]
 8009732:	2c01      	cmp	r4, #1
 8009734:	d1b6      	bne.n	80096a4 <USB_HC_StartXfer+0x148>
 8009736:	78cc      	ldrb	r4, [r1, #3]
 8009738:	2c00      	cmp	r4, #0
 800973a:	d1b3      	bne.n	80096a4 <USB_HC_StartXfer+0x148>
      switch (hc->iso_splt_xactPos)
 800973c:	68cc      	ldr	r4, [r1, #12]
 800973e:	3c01      	subs	r4, #1
 8009740:	2c03      	cmp	r4, #3
 8009742:	d8af      	bhi.n	80096a4 <USB_HC_StartXfer+0x148>
 8009744:	e8df f004 	tbb	[pc, r4]
 8009748:	312a231c 	.word	0x312a231c
    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800974c:	78cc      	ldrb	r4, [r1, #3]
 800974e:	2c00      	cmp	r4, #0
 8009750:	d1e6      	bne.n	8009720 <USB_HC_StartXfer+0x1c4>
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009752:	f8de 4004 	ldr.w	r4, [lr, #4]
 8009756:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 800975a:	f8ce 4004 	str.w	r4, [lr, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800975e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8009762:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8009766:	f8ce 400c 	str.w	r4, [lr, #12]
 800976a:	e7d9      	b.n	8009720 <USB_HC_StartXfer+0x1c4>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800976c:	78cc      	ldrb	r4, [r1, #3]
 800976e:	2c01      	cmp	r4, #1
 8009770:	d1de      	bne.n	8009730 <USB_HC_StartXfer+0x1d4>
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009772:	f8de 4004 	ldr.w	r4, [lr, #4]
 8009776:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 800977a:	f8ce 4004 	str.w	r4, [lr, #4]
 800977e:	e7d7      	b.n	8009730 <USB_HC_StartXfer+0x1d4>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009780:	f8de 4004 	ldr.w	r4, [lr, #4]
 8009784:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8009788:	f8ce 4004 	str.w	r4, [lr, #4]
          break;
 800978c:	e78a      	b.n	80096a4 <USB_HC_StartXfer+0x148>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800978e:	f8de 4004 	ldr.w	r4, [lr, #4]
 8009792:	f044 040e 	orr.w	r4, r4, #14
 8009796:	f8ce 4004 	str.w	r4, [lr, #4]
          break;
 800979a:	e783      	b.n	80096a4 <USB_HC_StartXfer+0x148>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800979c:	f8de 4004 	ldr.w	r4, [lr, #4]
 80097a0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80097a4:	f8ce 4004 	str.w	r4, [lr, #4]
          break;
 80097a8:	e77c      	b.n	80096a4 <USB_HC_StartXfer+0x148>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80097aa:	f8de 4004 	ldr.w	r4, [lr, #4]
 80097ae:	f444 4440 	orr.w	r4, r4, #49152	@ 0xc000
 80097b2:	f8ce 4004 	str.w	r4, [lr, #4]
          break;
 80097b6:	e775      	b.n	80096a4 <USB_HC_StartXfer+0x148>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80097b8:	9c03      	ldr	r4, [sp, #12]
 80097ba:	f424 4400 	bic.w	r4, r4, #32768	@ 0x8000
 80097be:	9403      	str	r4, [sp, #12]
 80097c0:	e77e      	b.n	80096c0 <USB_HC_StartXfer+0x164>
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80097c2:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80097c4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80097c6:	b292      	uxth	r2, r2
 80097c8:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d903      	bls.n	80097d8 <USB_HC_StartXfer+0x27c>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80097d0:	6983      	ldr	r3, [r0, #24]
 80097d2:	f043 0320 	orr.w	r3, r3, #32
 80097d6:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	8c0b      	ldrh	r3, [r1, #32]
 80097de:	784a      	ldrb	r2, [r1, #1]
 80097e0:	6989      	ldr	r1, [r1, #24]
 80097e2:	f7ff fa24 	bl	8008c2e <USB_WritePacket>
 80097e6:	e6ea      	b.n	80095be <USB_HC_StartXfer+0x62>
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80097e8:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80097ea:	692a      	ldr	r2, [r5, #16]
 80097ec:	b292      	uxth	r2, r2
 80097ee:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d2f0      	bcs.n	80097d8 <USB_HC_StartXfer+0x27c>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80097f6:	6983      	ldr	r3, [r0, #24]
 80097f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80097fc:	6183      	str	r3, [r0, #24]
 80097fe:	e7eb      	b.n	80097d8 <USB_HC_StartXfer+0x27c>
 8009800:	1ff80000 	.word	0x1ff80000

08009804 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009804:	b530      	push	{r4, r5, lr}
 8009806:	b083      	sub	sp, #12
 8009808:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	9301      	str	r3, [sp, #4]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800980e:	f7fe ffc5 	bl	800879c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009812:	2110      	movs	r1, #16
 8009814:	4620      	mov	r0, r4
 8009816:	f7fe ffc7 	bl	80087a8 <USB_FlushTxFifo>
 800981a:	4605      	mov	r5, r0
 800981c:	b100      	cbz	r0, 8009820 <USB_StopHost+0x1c>
  {
    ret = HAL_ERROR;
 800981e:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009820:	4620      	mov	r0, r4
 8009822:	f7fe ffe6 	bl	80087f2 <USB_FlushRxFifo>
 8009826:	b100      	cbz	r0, 800982a <USB_StopHost+0x26>
  {
    ret = HAL_ERROR;
 8009828:	2501      	movs	r5, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800982a:	2200      	movs	r2, #0
 800982c:	e00a      	b.n	8009844 <USB_StopHost+0x40>
  {
    value = USBx_HC(i)->HCCHAR;
 800982e:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8009832:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009836:	f023 2380 	bic.w	r3, r3, #2147516416	@ 0x80008000
 800983a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800983e:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
  for (i = 0U; i <= 15U; i++)
 8009842:	3201      	adds	r2, #1
 8009844:	2a0f      	cmp	r2, #15
 8009846:	d9f2      	bls.n	800982e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009848:	2100      	movs	r1, #0
 800984a:	e000      	b.n	800984e <USB_StopHost+0x4a>
 800984c:	3101      	adds	r1, #1
 800984e:	290f      	cmp	r1, #15
 8009850:	d816      	bhi.n	8009880 <USB_StopHost+0x7c>
  {
    value = USBx_HC(i)->HCCHAR;
 8009852:	eb04 1041 	add.w	r0, r4, r1, lsl #5
 8009856:	f500 62a0 	add.w	r2, r0, #1280	@ 0x500
 800985a:	f8d0 3500 	ldr.w	r3, [r0, #1280]	@ 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800985e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009862:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8009866:	f8c0 3500 	str.w	r3, [r0, #1280]	@ 0x500

    do
    {
      count++;
 800986a:	9b01      	ldr	r3, [sp, #4]
 800986c:	3301      	adds	r3, #1
 800986e:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 8009870:	9b01      	ldr	r3, [sp, #4]
 8009872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009876:	d8e9      	bhi.n	800984c <USB_StopHost+0x48>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009878:	6813      	ldr	r3, [r2, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	dbf5      	blt.n	800986a <USB_StopHost+0x66>
 800987e:	e7e5      	b.n	800984c <USB_StopHost+0x48>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009880:	f04f 33ff 	mov.w	r3, #4294967295
 8009884:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009888:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 800988a:	4620      	mov	r0, r4
 800988c:	f7fe ff80 	bl	8008790 <USB_EnableGlobalInt>

  return ret;
}
 8009890:	4628      	mov	r0, r5
 8009892:	b003      	add	sp, #12
 8009894:	bd30      	pop	{r4, r5, pc}

08009896 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8009896:	b082      	sub	sp, #8
  uint32_t count = Delay;
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8009898:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80098a0:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if(count < LL_MAX_DELAY)
 80098a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80098a6:	d000      	beq.n	80098aa <LL_mDelay+0x14>
  {
    count++;
 80098a8:	3001      	adds	r0, #1
  }

  while (count != 0U)
 80098aa:	b138      	cbz	r0, 80098bc <LL_mDelay+0x26>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80098ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80098b6:	d0f8      	beq.n	80098aa <LL_mDelay+0x14>
    {
      count--;
 80098b8:	3801      	subs	r0, #1
 80098ba:	e7f6      	b.n	80098aa <LL_mDelay+0x14>
    }
  }
}
 80098bc:	b002      	add	sp, #8
 80098be:	4770      	bx	lr

080098c0 <USBD_HID_DataIn>:
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80098c0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80098c4:	33b0      	adds	r3, #176	@ 0xb0
 80098c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80098ca:	2000      	movs	r0, #0
 80098cc:	7318      	strb	r0, [r3, #12]

  return (uint8_t)USBD_OK;
}
 80098ce:	4770      	bx	lr

080098d0 <USBD_HID_GetDeviceQualifierDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80098d0:	230a      	movs	r3, #10
 80098d2:	8003      	strh	r3, [r0, #0]

  return USBD_HID_DeviceQualifierDesc;
}
 80098d4:	4800      	ldr	r0, [pc, #0]	@ (80098d8 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 80098d6:	4770      	bx	lr
 80098d8:	24000080 	.word	0x24000080

080098dc <USBD_HID_GetOtherSpeedCfgDesc>:
{
 80098dc:	b510      	push	{r4, lr}
 80098de:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80098e0:	2181      	movs	r1, #129	@ 0x81
 80098e2:	4805      	ldr	r0, [pc, #20]	@ (80098f8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
 80098e4:	f000 fb0e 	bl	8009f04 <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 80098e8:	b108      	cbz	r0, 80098ee <USBD_HID_GetOtherSpeedCfgDesc+0x12>
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80098ea:	2201      	movs	r2, #1
 80098ec:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80098ee:	2322      	movs	r3, #34	@ 0x22
 80098f0:	8023      	strh	r3, [r4, #0]
}
 80098f2:	4801      	ldr	r0, [pc, #4]	@ (80098f8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	24000098 	.word	0x24000098

080098fc <USBD_HID_GetFSCfgDesc>:
{
 80098fc:	b510      	push	{r4, lr}
 80098fe:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009900:	2181      	movs	r1, #129	@ 0x81
 8009902:	4805      	ldr	r0, [pc, #20]	@ (8009918 <USBD_HID_GetFSCfgDesc+0x1c>)
 8009904:	f000 fafe 	bl	8009f04 <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8009908:	b108      	cbz	r0, 800990e <USBD_HID_GetFSCfgDesc+0x12>
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800990a:	2201      	movs	r2, #1
 800990c:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800990e:	2322      	movs	r3, #34	@ 0x22
 8009910:	8023      	strh	r3, [r4, #0]
}
 8009912:	4801      	ldr	r0, [pc, #4]	@ (8009918 <USBD_HID_GetFSCfgDesc+0x1c>)
 8009914:	bd10      	pop	{r4, pc}
 8009916:	bf00      	nop
 8009918:	24000098 	.word	0x24000098

0800991c <USBD_HID_GetHSCfgDesc>:
{
 800991c:	b510      	push	{r4, lr}
 800991e:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009920:	2181      	movs	r1, #129	@ 0x81
 8009922:	4805      	ldr	r0, [pc, #20]	@ (8009938 <USBD_HID_GetHSCfgDesc+0x1c>)
 8009924:	f000 faee 	bl	8009f04 <USBD_GetEpDesc>
  if (pEpDesc != NULL)
 8009928:	b108      	cbz	r0, 800992e <USBD_HID_GetHSCfgDesc+0x12>
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800992a:	2207      	movs	r2, #7
 800992c:	7182      	strb	r2, [r0, #6]
  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800992e:	2322      	movs	r3, #34	@ 0x22
 8009930:	8023      	strh	r3, [r4, #0]
}
 8009932:	4801      	ldr	r0, [pc, #4]	@ (8009938 <USBD_HID_GetHSCfgDesc+0x1c>)
 8009934:	bd10      	pop	{r4, pc}
 8009936:	bf00      	nop
 8009938:	24000098 	.word	0x24000098

0800993c <USBD_HID_Setup>:
{
 800993c:	b530      	push	{r4, r5, lr}
 800993e:	b083      	sub	sp, #12
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009940:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009944:	33b0      	adds	r3, #176	@ 0xb0
 8009946:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  uint16_t status_info = 0U;
 800994a:	2200      	movs	r2, #0
 800994c:	f8ad 2006 	strh.w	r2, [sp, #6]
  if (hhid == NULL)
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 8082 	beq.w	8009a5a <USBD_HID_Setup+0x11e>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009956:	780c      	ldrb	r4, [r1, #0]
 8009958:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
 800995c:	d025      	beq.n	80099aa <USBD_HID_Setup+0x6e>
 800995e:	2c20      	cmp	r4, #32
 8009960:	d175      	bne.n	8009a4e <USBD_HID_Setup+0x112>
      switch (req->bRequest)
 8009962:	784a      	ldrb	r2, [r1, #1]
 8009964:	3a02      	subs	r2, #2
 8009966:	2a09      	cmp	r2, #9
 8009968:	d81b      	bhi.n	80099a2 <USBD_HID_Setup+0x66>
 800996a:	e8df f002 	tbb	[pc, r2]
 800996e:	0914      	.short	0x0914
 8009970:	1a1a1a1a 	.word	0x1a1a1a1a
 8009974:	050f1a1a 	.word	0x050f1a1a
          hhid->Protocol = (uint8_t)(req->wValue);
 8009978:	788a      	ldrb	r2, [r1, #2]
 800997a:	601a      	str	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800997c:	2400      	movs	r4, #0
          break;
 800997e:	e069      	b.n	8009a54 <USBD_HID_Setup+0x118>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009980:	2201      	movs	r2, #1
 8009982:	4619      	mov	r1, r3
 8009984:	f000 fe75 	bl	800a672 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009988:	2400      	movs	r4, #0
          break;
 800998a:	e063      	b.n	8009a54 <USBD_HID_Setup+0x118>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800998c:	884a      	ldrh	r2, [r1, #2]
 800998e:	0a12      	lsrs	r2, r2, #8
 8009990:	605a      	str	r2, [r3, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009992:	2400      	movs	r4, #0
          break;
 8009994:	e05e      	b.n	8009a54 <USBD_HID_Setup+0x118>
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009996:	2201      	movs	r2, #1
 8009998:	1d19      	adds	r1, r3, #4
 800999a:	f000 fe6a 	bl	800a672 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800999e:	2400      	movs	r4, #0
          break;
 80099a0:	e058      	b.n	8009a54 <USBD_HID_Setup+0x118>
          USBD_CtlError(pdev, req);
 80099a2:	f000 faec 	bl	8009f7e <USBD_CtlError>
          ret = USBD_FAIL;
 80099a6:	2403      	movs	r4, #3
          break;
 80099a8:	e054      	b.n	8009a54 <USBD_HID_Setup+0x118>
      switch (req->bRequest)
 80099aa:	784d      	ldrb	r5, [r1, #1]
 80099ac:	2d0b      	cmp	r5, #11
 80099ae:	d84a      	bhi.n	8009a46 <USBD_HID_Setup+0x10a>
 80099b0:	e8df f005 	tbb	[pc, r5]
 80099b4:	49495006 	.word	0x49495006
 80099b8:	49164949 	.word	0x49164949
 80099bc:	3d2e4949 	.word	0x3d2e4949
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d003      	beq.n	80099d2 <USBD_HID_Setup+0x96>
            USBD_CtlError(pdev, req);
 80099ca:	f000 fad8 	bl	8009f7e <USBD_CtlError>
            ret = USBD_FAIL;
 80099ce:	2403      	movs	r4, #3
 80099d0:	e040      	b.n	8009a54 <USBD_HID_Setup+0x118>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099d2:	2202      	movs	r2, #2
 80099d4:	f10d 0106 	add.w	r1, sp, #6
 80099d8:	f000 fe4b 	bl	800a672 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80099dc:	462c      	mov	r4, r5
 80099de:	e039      	b.n	8009a54 <USBD_HID_Setup+0x118>
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80099e0:	884b      	ldrh	r3, [r1, #2]
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	2b22      	cmp	r3, #34	@ 0x22
 80099e6:	d009      	beq.n	80099fc <USBD_HID_Setup+0xc0>
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80099e8:	2b21      	cmp	r3, #33	@ 0x21
 80099ea:	d10d      	bne.n	8009a08 <USBD_HID_Setup+0xcc>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80099ec:	88ca      	ldrh	r2, [r1, #6]
 80099ee:	2a09      	cmp	r2, #9
 80099f0:	bf28      	it	cs
 80099f2:	2209      	movcs	r2, #9
            pbuf = USBD_HID_Desc;
 80099f4:	491a      	ldr	r1, [pc, #104]	@ (8009a60 <USBD_HID_Setup+0x124>)
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80099f6:	f000 fe3c 	bl	800a672 <USBD_CtlSendData>
          break;
 80099fa:	e02b      	b.n	8009a54 <USBD_HID_Setup+0x118>
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80099fc:	88ca      	ldrh	r2, [r1, #6]
 80099fe:	2a4a      	cmp	r2, #74	@ 0x4a
 8009a00:	bf28      	it	cs
 8009a02:	224a      	movcs	r2, #74	@ 0x4a
            pbuf = HID_MOUSE_ReportDesc;
 8009a04:	4917      	ldr	r1, [pc, #92]	@ (8009a64 <USBD_HID_Setup+0x128>)
 8009a06:	e7f6      	b.n	80099f6 <USBD_HID_Setup+0xba>
            USBD_CtlError(pdev, req);
 8009a08:	f000 fab9 	bl	8009f7e <USBD_CtlError>
            ret = USBD_FAIL;
 8009a0c:	2403      	movs	r4, #3
            break;
 8009a0e:	e021      	b.n	8009a54 <USBD_HID_Setup+0x118>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a10:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009a14:	b2d2      	uxtb	r2, r2
 8009a16:	2a03      	cmp	r2, #3
 8009a18:	d003      	beq.n	8009a22 <USBD_HID_Setup+0xe6>
            USBD_CtlError(pdev, req);
 8009a1a:	f000 fab0 	bl	8009f7e <USBD_CtlError>
            ret = USBD_FAIL;
 8009a1e:	2403      	movs	r4, #3
 8009a20:	e018      	b.n	8009a54 <USBD_HID_Setup+0x118>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009a22:	2201      	movs	r2, #1
 8009a24:	f103 0108 	add.w	r1, r3, #8
 8009a28:	f000 fe23 	bl	800a672 <USBD_CtlSendData>
 8009a2c:	e012      	b.n	8009a54 <USBD_HID_Setup+0x118>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	2a03      	cmp	r2, #3
 8009a36:	d102      	bne.n	8009a3e <USBD_HID_Setup+0x102>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009a38:	788a      	ldrb	r2, [r1, #2]
 8009a3a:	609a      	str	r2, [r3, #8]
 8009a3c:	e00a      	b.n	8009a54 <USBD_HID_Setup+0x118>
            USBD_CtlError(pdev, req);
 8009a3e:	f000 fa9e 	bl	8009f7e <USBD_CtlError>
            ret = USBD_FAIL;
 8009a42:	2403      	movs	r4, #3
 8009a44:	e006      	b.n	8009a54 <USBD_HID_Setup+0x118>
          USBD_CtlError(pdev, req);
 8009a46:	f000 fa9a 	bl	8009f7e <USBD_CtlError>
          ret = USBD_FAIL;
 8009a4a:	2403      	movs	r4, #3
          break;
 8009a4c:	e002      	b.n	8009a54 <USBD_HID_Setup+0x118>
      USBD_CtlError(pdev, req);
 8009a4e:	f000 fa96 	bl	8009f7e <USBD_CtlError>
      ret = USBD_FAIL;
 8009a52:	2403      	movs	r4, #3
}
 8009a54:	4620      	mov	r0, r4
 8009a56:	b003      	add	sp, #12
 8009a58:	bd30      	pop	{r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8009a5a:	2403      	movs	r4, #3
 8009a5c:	e7fa      	b.n	8009a54 <USBD_HID_Setup+0x118>
 8009a5e:	bf00      	nop
 8009a60:	2400008c 	.word	0x2400008c
 8009a64:	24000034 	.word	0x24000034

08009a68 <USBD_HID_DeInit>:
{
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009a6c:	2181      	movs	r1, #129	@ 0x81
 8009a6e:	f002 fd01 	bl	800c474 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	8723      	strh	r3, [r4, #56]	@ 0x38
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009a76:	8763      	strh	r3, [r4, #58]	@ 0x3a
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009a78:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009a7c:	33b0      	adds	r3, #176	@ 0xb0
 8009a7e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8009a82:	b138      	cbz	r0, 8009a94 <USBD_HID_DeInit+0x2c>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009a84:	f002 fcd8 	bl	800c438 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a88:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009a8c:	33b0      	adds	r3, #176	@ 0xb0
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8009a94:	2000      	movs	r0, #0
 8009a96:	bd10      	pop	{r4, pc}

08009a98 <USBD_HID_Init>:
{
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4604      	mov	r4, r0
  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009a9c:	2010      	movs	r0, #16
 8009a9e:	f002 fcc7 	bl	800c430 <USBD_static_malloc>
  if (hhid == NULL)
 8009aa2:	b1b0      	cbz	r0, 8009ad2 <USBD_HID_Init+0x3a>
 8009aa4:	4605      	mov	r5, r0
  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009aa6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009aaa:	33b0      	adds	r3, #176	@ 0xb0
 8009aac:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ab0:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ab4:	7c23      	ldrb	r3, [r4, #16]
 8009ab6:	b9a3      	cbnz	r3, 8009ae2 <USBD_HID_Init+0x4a>
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009ab8:	2307      	movs	r3, #7
 8009aba:	8763      	strh	r3, [r4, #58]	@ 0x3a
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009abc:	2304      	movs	r3, #4
 8009abe:	2203      	movs	r2, #3
 8009ac0:	2181      	movs	r1, #129	@ 0x81
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f002 fccb 	bl	800c45e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	8723      	strh	r3, [r4, #56]	@ 0x38
  hhid->state = USBD_HID_IDLE;
 8009acc:	2000      	movs	r0, #0
 8009ace:	7328      	strb	r0, [r5, #12]
}
 8009ad0:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ad2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8009ad6:	33b0      	adds	r3, #176	@ 0xb0
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ade:	2002      	movs	r0, #2
 8009ae0:	e7f6      	b.n	8009ad0 <USBD_HID_Init+0x38>
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	8763      	strh	r3, [r4, #58]	@ 0x3a
 8009ae6:	e7e9      	b.n	8009abc <USBD_HID_Init+0x24>

08009ae8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ae8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009aea:	b190      	cbz	r0, 8009b12 <USBD_Init+0x2a>
 8009aec:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009aee:	2000      	movs	r0, #0
 8009af0:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009af4:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009af8:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009afc:	b109      	cbz	r1, 8009b02 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8009afe:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b02:	2101      	movs	r1, #1
 8009b04:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009b08:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f002 fc44 	bl	800c398 <USBD_LL_Init>

  return ret;
}
 8009b10:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 8009b12:	4805      	ldr	r0, [pc, #20]	@ (8009b28 <USBD_Init+0x40>)
 8009b14:	f002 ffd4 	bl	800cac0 <iprintf>
 8009b18:	4804      	ldr	r0, [pc, #16]	@ (8009b2c <USBD_Init+0x44>)
 8009b1a:	f002 ffd1 	bl	800cac0 <iprintf>
 8009b1e:	200a      	movs	r0, #10
 8009b20:	f002 ffe0 	bl	800cae4 <putchar>
    return USBD_FAIL;
 8009b24:	2003      	movs	r0, #3
 8009b26:	e7f3      	b.n	8009b10 <USBD_Init+0x28>
 8009b28:	0800d820 	.word	0x0800d820
 8009b2c:	0800d828 	.word	0x0800d828

08009b30 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b30:	b510      	push	{r4, lr}
 8009b32:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8009b3a:	b1b9      	cbz	r1, 8009b6c <USBD_RegisterClass+0x3c>
 8009b3c:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009b3e:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009b42:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009b46:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009b48:	b142      	cbz	r2, 8009b5c <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009b4a:	33ae      	adds	r3, #174	@ 0xae
 8009b4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b52:	f10d 0006 	add.w	r0, sp, #6
 8009b56:	4798      	blx	r3
 8009b58:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009b5c:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8009b60:	3301      	adds	r3, #1
 8009b62:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8009b66:	2000      	movs	r0, #0
}
 8009b68:	b002      	add	sp, #8
 8009b6a:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 8009b6c:	4805      	ldr	r0, [pc, #20]	@ (8009b84 <USBD_RegisterClass+0x54>)
 8009b6e:	f002 ffa7 	bl	800cac0 <iprintf>
 8009b72:	4805      	ldr	r0, [pc, #20]	@ (8009b88 <USBD_RegisterClass+0x58>)
 8009b74:	f002 ffa4 	bl	800cac0 <iprintf>
 8009b78:	200a      	movs	r0, #10
 8009b7a:	f002 ffb3 	bl	800cae4 <putchar>
    return USBD_FAIL;
 8009b7e:	2003      	movs	r0, #3
 8009b80:	e7f2      	b.n	8009b68 <USBD_RegisterClass+0x38>
 8009b82:	bf00      	nop
 8009b84:	0800d820 	.word	0x0800d820
 8009b88:	0800d840 	.word	0x0800d840

08009b8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b8c:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b8e:	f002 fc5e 	bl	800c44e <USBD_LL_Start>
}
 8009b92:	bd08      	pop	{r3, pc}

08009b94 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b94:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009b9a:	b113      	cbz	r3, 8009ba2 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009ba0:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e7fc      	b.n	8009ba0 <USBD_SetClassConfig+0xc>

08009ba6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ba6:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ba8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	4798      	blx	r3
 8009bb0:	b900      	cbnz	r0, 8009bb4 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009bb2:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8009bb4:	2003      	movs	r0, #3
 8009bb6:	e7fc      	b.n	8009bb2 <USBD_ClrClassConfig+0xc>

08009bb8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bbc:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f000 f9c8 	bl	8009f56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009bcc:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8009bd0:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009bd4:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8009bd8:	f001 031f 	and.w	r3, r1, #31
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d007      	beq.n	8009bf0 <USBD_LL_SetupStage+0x38>
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d00a      	beq.n	8009bfa <USBD_LL_SetupStage+0x42>
 8009be4:	b973      	cbnz	r3, 8009c04 <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009be6:	4629      	mov	r1, r5
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 fb89 	bl	800a300 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 fbbf 	bl	800a376 <USBD_StdItfReq>
      break;
 8009bf8:	e7f9      	b.n	8009bee <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 fbfc 	bl	800a3fa <USBD_StdEPReq>
      break;
 8009c02:	e7f4      	b.n	8009bee <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c04:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f002 fc3b 	bl	800c484 <USBD_LL_StallEP>
      break;
 8009c0e:	e7ee      	b.n	8009bee <USBD_LL_SetupStage+0x36>

08009c10 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009c20:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c22:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009c26:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009c2a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009c2e:	b1db      	cbz	r3, 8009c68 <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	b1db      	cbz	r3, 8009c6c <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009c34:	2100      	movs	r1, #0
 8009c36:	4798      	blx	r3
 8009c38:	4607      	mov	r7, r0
 8009c3a:	b9c8      	cbnz	r0, 8009c70 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c3c:	2340      	movs	r3, #64	@ 0x40
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4611      	mov	r1, r2
 8009c42:	4620      	mov	r0, r4
 8009c44:	f002 fc0b 	bl	800c45e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c48:	2601      	movs	r6, #1
 8009c4a:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c4e:	2540      	movs	r5, #64	@ 0x40
 8009c50:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c54:	462b      	mov	r3, r5
 8009c56:	2200      	movs	r2, #0
 8009c58:	2180      	movs	r1, #128	@ 0x80
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f002 fbff 	bl	800c45e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c60:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c62:	6225      	str	r5, [r4, #32]

  return ret;
}
 8009c64:	4638      	mov	r0, r7
 8009c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8009c68:	2700      	movs	r7, #0
 8009c6a:	e7e7      	b.n	8009c3c <USBD_LL_Reset+0x2c>
 8009c6c:	2700      	movs	r7, #0
 8009c6e:	e7e5      	b.n	8009c3c <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8009c70:	2703      	movs	r7, #3
 8009c72:	e7e3      	b.n	8009c3c <USBD_LL_Reset+0x2c>

08009c74 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009c74:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8009c76:	2000      	movs	r0, #0
 8009c78:	4770      	bx	lr

08009c7a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009c7a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d004      	beq.n	8009c8e <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009c84:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c8e:	2304      	movs	r3, #4
 8009c90:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8009c94:	2000      	movs	r0, #0
 8009c96:	4770      	bx	lr

08009c98 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c98:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b04      	cmp	r3, #4
 8009ca0:	d001      	beq.n	8009ca6 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8009ca6:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8009cb0:	e7f7      	b.n	8009ca2 <USBD_LL_Resume+0xa>

08009cb2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009cb2:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d001      	beq.n	8009cc2 <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8009cc2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d0f9      	beq.n	8009cbe <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d0f6      	beq.n	8009cbe <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 8009cd0:	4798      	blx	r3
 8009cd2:	e7f4      	b.n	8009cbe <USBD_LL_SOF+0xc>

08009cd4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009cd4:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8009cd6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009cda:	33ae      	adds	r3, #174	@ 0xae
 8009cdc:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8009ce0:	b15a      	cbz	r2, 8009cfa <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d001      	beq.n	8009cf0 <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8009cec:	2000      	movs	r0, #0
}
 8009cee:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009cf0:	6a13      	ldr	r3, [r2, #32]
 8009cf2:	b123      	cbz	r3, 8009cfe <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009cf4:	4798      	blx	r3
  return USBD_OK;
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	e7f9      	b.n	8009cee <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 8009cfa:	2003      	movs	r0, #3
 8009cfc:	e7f7      	b.n	8009cee <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e7f5      	b.n	8009cee <USBD_LL_IsoINIncomplete+0x1a>

08009d02 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d02:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8009d04:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009d08:	33ae      	adds	r3, #174	@ 0xae
 8009d0a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8009d0e:	b15a      	cbz	r2, 8009d28 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d10:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d001      	beq.n	8009d1e <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8009d1a:	2000      	movs	r0, #0
}
 8009d1c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d1e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8009d20:	b123      	cbz	r3, 8009d2c <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d22:	4798      	blx	r3
  return USBD_OK;
 8009d24:	2000      	movs	r0, #0
 8009d26:	e7f9      	b.n	8009d1c <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8009d28:	2003      	movs	r0, #3
 8009d2a:	e7f7      	b.n	8009d1c <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e7f5      	b.n	8009d1c <USBD_LL_IsoOUTIncomplete+0x1a>

08009d30 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8009d30:	2000      	movs	r0, #0
 8009d32:	4770      	bx	lr

08009d34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d34:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d36:	2301      	movs	r3, #1
 8009d38:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d3c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009d40:	b123      	cbz	r3, 8009d4c <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	7901      	ldrb	r1, [r0, #4]
 8009d46:	4798      	blx	r3
 8009d48:	b910      	cbnz	r0, 8009d50 <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8009d4a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e7fc      	b.n	8009d4a <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8009d50:	2003      	movs	r0, #3
 8009d52:	e7fa      	b.n	8009d4a <USBD_LL_DevDisconnected+0x16>

08009d54 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009d54:	2000      	movs	r0, #0
 8009d56:	4770      	bx	lr

08009d58 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009d58:	2000      	movs	r0, #0
 8009d5a:	4770      	bx	lr

08009d5c <USBD_LL_DataOutStage>:
{
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4604      	mov	r4, r0
  if (epnum == 0U)
 8009d60:	460d      	mov	r5, r1
 8009d62:	2900      	cmp	r1, #0
 8009d64:	d142      	bne.n	8009dec <USBD_LL_DataOutStage+0x90>
 8009d66:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d68:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009d6c:	2a03      	cmp	r2, #3
 8009d6e:	d001      	beq.n	8009d74 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8009d70:	4608      	mov	r0, r1
}
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009d74:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8009d78:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8009d7c:	4291      	cmp	r1, r2
 8009d7e:	d809      	bhi.n	8009d94 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8009d80:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8009d84:	f003 031f 	and.w	r3, r3, #31
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d00e      	beq.n	8009daa <USBD_LL_DataOutStage+0x4e>
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d01b      	beq.n	8009dc8 <USBD_LL_DataOutStage+0x6c>
 8009d90:	4628      	mov	r0, r5
 8009d92:	e00f      	b.n	8009db4 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8009d94:	1a89      	subs	r1, r1, r2
 8009d96:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d9a:	428a      	cmp	r2, r1
 8009d9c:	bf28      	it	cs
 8009d9e:	460a      	movcs	r2, r1
 8009da0:	4619      	mov	r1, r3
 8009da2:	f000 fc7b 	bl	800a69c <USBD_CtlContinueRx>
  return USBD_OK;
 8009da6:	4628      	mov	r0, r5
 8009da8:	e7e3      	b.n	8009d72 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009daa:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8009dae:	f7ff ffd1 	bl	8009d54 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009db2:	b920      	cbnz	r0, 8009dbe <USBD_LL_DataOutStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db4:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d009      	beq.n	8009dd2 <USBD_LL_DataOutStage+0x76>
        (void)USBD_CtlSendStatus(pdev);
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f000 fc74 	bl	800a6ac <USBD_CtlSendStatus>
  return USBD_OK;
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	e7d4      	b.n	8009d72 <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009dc8:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8009dcc:	f7ff ffc4 	bl	8009d58 <USBD_CoreFindEP>
            break;
 8009dd0:	e7ef      	b.n	8009db2 <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009dd2:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8009dd6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	d0ee      	beq.n	8009dbe <USBD_LL_DataOutStage+0x62>
              pdev->classId = idx;
 8009de0:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	4620      	mov	r0, r4
 8009de8:	4798      	blx	r3
 8009dea:	e7e8      	b.n	8009dbe <USBD_LL_DataOutStage+0x62>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009dec:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8009df0:	f7ff ffb2 	bl	8009d58 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009df4:	b990      	cbnz	r0, 8009e1c <USBD_LL_DataOutStage+0xc0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df6:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d1b8      	bne.n	8009d72 <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e00:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8009e04:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009e08:	699a      	ldr	r2, [r3, #24]
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	d0b1      	beq.n	8009d72 <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8009e0e:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	4629      	mov	r1, r5
 8009e16:	4620      	mov	r0, r4
 8009e18:	4798      	blx	r3
      if (ret != USBD_OK)
 8009e1a:	e7aa      	b.n	8009d72 <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7a8      	b.n	8009d72 <USBD_LL_DataOutStage+0x16>

08009e20 <USBD_LL_DataInStage>:
{
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4604      	mov	r4, r0
  if (epnum == 0U)
 8009e24:	460d      	mov	r5, r1
 8009e26:	2900      	cmp	r1, #0
 8009e28:	d14b      	bne.n	8009ec2 <USBD_LL_DataInStage+0xa2>
 8009e2a:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e2c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8009e30:	2a02      	cmp	r2, #2
 8009e32:	d007      	beq.n	8009e44 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8009e34:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8009e38:	b118      	cbz	r0, 8009e42 <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8009e40:	4628      	mov	r0, r5
}
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8009e44:	69c2      	ldr	r2, [r0, #28]
 8009e46:	6a01      	ldr	r1, [r0, #32]
 8009e48:	428a      	cmp	r2, r1
 8009e4a:	d80e      	bhi.n	8009e6a <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 8009e4c:	428a      	cmp	r2, r1
 8009e4e:	d018      	beq.n	8009e82 <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e50:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d027      	beq.n	8009eaa <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e5a:	2180      	movs	r1, #128	@ 0x80
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f002 fb11 	bl	800c484 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fc2d 	bl	800a6c2 <USBD_CtlReceiveStatus>
 8009e68:	e7e4      	b.n	8009e34 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8009e6a:	1a52      	subs	r2, r2, r1
 8009e6c:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e6e:	4619      	mov	r1, r3
 8009e70:	f000 fc0c 	bl	800a68c <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e74:	2300      	movs	r3, #0
 8009e76:	461a      	mov	r2, r3
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f002 fb22 	bl	800c4c4 <USBD_LL_PrepareReceive>
 8009e80:	e7d8      	b.n	8009e34 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8009e82:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e84:	4299      	cmp	r1, r3
 8009e86:	d8e3      	bhi.n	8009e50 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8009e88:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d2df      	bcs.n	8009e50 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e90:	2200      	movs	r2, #0
 8009e92:	4611      	mov	r1, r2
 8009e94:	f000 fbfa 	bl	800a68c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e98:	2100      	movs	r1, #0
 8009e9a:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	460a      	mov	r2, r1
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f002 fb0e 	bl	800c4c4 <USBD_LL_PrepareReceive>
 8009ea8:	e7c4      	b.n	8009e34 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009eaa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8009eae:	68da      	ldr	r2, [r3, #12]
 8009eb0:	2a00      	cmp	r2, #0
 8009eb2:	d0d2      	beq.n	8009e5a <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	4798      	blx	r3
 8009ec0:	e7cb      	b.n	8009e5a <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ec2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009ec6:	f7ff ff47 	bl	8009d58 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009eca:	b990      	cbnz	r0, 8009ef2 <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ecc:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d1b5      	bne.n	8009e42 <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8009ed6:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8009eda:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009ede:	695a      	ldr	r2, [r3, #20]
 8009ee0:	2a00      	cmp	r2, #0
 8009ee2:	d0ae      	beq.n	8009e42 <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8009ee4:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	4629      	mov	r1, r5
 8009eec:	4620      	mov	r0, r4
 8009eee:	4798      	blx	r3
          if (ret != USBD_OK)
 8009ef0:	e7a7      	b.n	8009e42 <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	e7a5      	b.n	8009e42 <USBD_LL_DataInStage+0x22>

08009ef6 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8009ef6:	880b      	ldrh	r3, [r1, #0]
 8009ef8:	7802      	ldrb	r2, [r0, #0]
 8009efa:	4413      	add	r3, r2
 8009efc:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009efe:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8009f00:	4418      	add	r0, r3
 8009f02:	4770      	bx	lr

08009f04 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8009f04:	8842      	ldrh	r2, [r0, #2]
 8009f06:	7803      	ldrb	r3, [r0, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d918      	bls.n	8009f3e <USBD_GetEpDesc+0x3a>
{
 8009f0c:	b530      	push	{r4, r5, lr}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	4604      	mov	r4, r0
 8009f12:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8009f14:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8009f18:	8863      	ldrh	r3, [r4, #2]
 8009f1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d20a      	bcs.n	8009f38 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009f22:	f10d 0106 	add.w	r1, sp, #6
 8009f26:	f7ff ffe6 	bl	8009ef6 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009f2a:	7843      	ldrb	r3, [r0, #1]
 8009f2c:	2b05      	cmp	r3, #5
 8009f2e:	d1f3      	bne.n	8009f18 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8009f30:	7883      	ldrb	r3, [r0, #2]
 8009f32:	42ab      	cmp	r3, r5
 8009f34:	d1f0      	bne.n	8009f18 <USBD_GetEpDesc+0x14>
 8009f36:	e000      	b.n	8009f3a <USBD_GetEpDesc+0x36>
 8009f38:	2000      	movs	r0, #0
}
 8009f3a:	b003      	add	sp, #12
 8009f3c:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009f3e:	2000      	movs	r0, #0
}
 8009f40:	4770      	bx	lr

08009f42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f42:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8009f44:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8009f46:	e002      	b.n	8009f4e <USBD_GetLen+0xc>
  {
    len++;
 8009f48:	3001      	adds	r0, #1
 8009f4a:	b2c0      	uxtb	r0, r0
    pbuff++;
 8009f4c:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8009f4e:	781a      	ldrb	r2, [r3, #0]
 8009f50:	2a00      	cmp	r2, #0
 8009f52:	d1f9      	bne.n	8009f48 <USBD_GetLen+0x6>
  }

  return len;
}
 8009f54:	4770      	bx	lr

08009f56 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8009f56:	780b      	ldrb	r3, [r1, #0]
 8009f58:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f5a:	784b      	ldrb	r3, [r1, #1]
 8009f5c:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8009f5e:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8009f60:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8009f66:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8009f68:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8009f6a:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8009f70:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8009f72:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8009f74:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8009f7a:	80c3      	strh	r3, [r0, #6]
}
 8009f7c:	4770      	bx	lr

08009f7e <USBD_CtlError>:
{
 8009f7e:	b510      	push	{r4, lr}
 8009f80:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f82:	2180      	movs	r1, #128	@ 0x80
 8009f84:	f002 fa7e 	bl	800c484 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f002 fa7a 	bl	800c484 <USBD_LL_StallEP>
}
 8009f90:	bd10      	pop	{r4, pc}

08009f92 <USBD_GetDescriptor>:
{
 8009f92:	b530      	push	{r4, r5, lr}
 8009f94:	b083      	sub	sp, #12
 8009f96:	4604      	mov	r4, r0
 8009f98:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8009fa0:	884a      	ldrh	r2, [r1, #2]
 8009fa2:	0a13      	lsrs	r3, r2, #8
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	2b06      	cmp	r3, #6
 8009fa8:	f200 80ab 	bhi.w	800a102 <USBD_GetDescriptor+0x170>
 8009fac:	e8df f003 	tbb	[pc, r3]
 8009fb0:	a9331f04 	.word	0xa9331f04
 8009fb4:	8da9      	.short	0x8da9
 8009fb6:	9a          	.byte	0x9a
 8009fb7:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fb8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f10d 0106 	add.w	r1, sp, #6
 8009fc2:	7c00      	ldrb	r0, [r0, #16]
 8009fc4:	4798      	blx	r3
  if (req->wLength != 0U)
 8009fc6:	88ea      	ldrh	r2, [r5, #6]
 8009fc8:	2a00      	cmp	r2, #0
 8009fca:	f000 80a3 	beq.w	800a114 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 8009fce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 8099 	beq.w	800a10a <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	bf28      	it	cs
 8009fdc:	461a      	movcs	r2, r3
 8009fde:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 fb44 	bl	800a672 <USBD_CtlSendData>
}
 8009fea:	b003      	add	sp, #12
 8009fec:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fee:	7c03      	ldrb	r3, [r0, #16]
 8009ff0:	b943      	cbnz	r3, 800a004 <USBD_GetDescriptor+0x72>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ff2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff8:	f10d 0006 	add.w	r0, sp, #6
 8009ffc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ffe:	2302      	movs	r3, #2
 800a000:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a002:	e7e0      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a004:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00a:	f10d 0006 	add.w	r0, sp, #6
 800a00e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a010:	2302      	movs	r3, #2
 800a012:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a014:	e7d7      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800a016:	b2d2      	uxtb	r2, r2
 800a018:	2a05      	cmp	r2, #5
 800a01a:	d852      	bhi.n	800a0c2 <USBD_GetDescriptor+0x130>
 800a01c:	e8df f002 	tbb	[pc, r2]
 800a020:	2a1d1003 	.word	0x2a1d1003
 800a024:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a026:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	b123      	cbz	r3, 800a038 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a02e:	f10d 0106 	add.w	r1, sp, #6
 800a032:	7c00      	ldrb	r0, [r0, #16]
 800a034:	4798      	blx	r3
  if (err != 0U)
 800a036:	e7c6      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a038:	4629      	mov	r1, r5
 800a03a:	f7ff ffa0 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a03e:	e7d4      	b.n	8009fea <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a040:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	b123      	cbz	r3, 800a052 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a048:	f10d 0106 	add.w	r1, sp, #6
 800a04c:	7c00      	ldrb	r0, [r0, #16]
 800a04e:	4798      	blx	r3
  if (err != 0U)
 800a050:	e7b9      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a052:	4629      	mov	r1, r5
 800a054:	f7ff ff93 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a058:	e7c7      	b.n	8009fea <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a05a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	b123      	cbz	r3, 800a06c <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a062:	f10d 0106 	add.w	r1, sp, #6
 800a066:	7c00      	ldrb	r0, [r0, #16]
 800a068:	4798      	blx	r3
  if (err != 0U)
 800a06a:	e7ac      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a06c:	4629      	mov	r1, r5
 800a06e:	f7ff ff86 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a072:	e7ba      	b.n	8009fea <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a074:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	b123      	cbz	r3, 800a086 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a07c:	f10d 0106 	add.w	r1, sp, #6
 800a080:	7c00      	ldrb	r0, [r0, #16]
 800a082:	4798      	blx	r3
  if (err != 0U)
 800a084:	e79f      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a086:	4629      	mov	r1, r5
 800a088:	f7ff ff79 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a08c:	e7ad      	b.n	8009fea <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a08e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	b123      	cbz	r3, 800a0a0 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a096:	f10d 0106 	add.w	r1, sp, #6
 800a09a:	7c00      	ldrb	r0, [r0, #16]
 800a09c:	4798      	blx	r3
  if (err != 0U)
 800a09e:	e792      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7ff ff6c 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a0a6:	e7a0      	b.n	8009fea <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	b123      	cbz	r3, 800a0ba <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0b0:	f10d 0106 	add.w	r1, sp, #6
 800a0b4:	7c00      	ldrb	r0, [r0, #16]
 800a0b6:	4798      	blx	r3
  if (err != 0U)
 800a0b8:	e785      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7ff ff5f 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a0c0:	e793      	b.n	8009fea <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	f7ff ff5b 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a0c8:	e78f      	b.n	8009fea <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ca:	7c03      	ldrb	r3, [r0, #16]
 800a0cc:	b933      	cbnz	r3, 800a0dc <USBD_GetDescriptor+0x14a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a0ce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d4:	f10d 0006 	add.w	r0, sp, #6
 800a0d8:	4798      	blx	r3
  if (err != 0U)
 800a0da:	e774      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7ff ff4e 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a0e2:	e782      	b.n	8009fea <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0e4:	7c03      	ldrb	r3, [r0, #16]
 800a0e6:	b943      	cbnz	r3, 800a0fa <USBD_GetDescriptor+0x168>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a0e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800a0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ee:	f10d 0006 	add.w	r0, sp, #6
 800a0f2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a0f4:	2307      	movs	r3, #7
 800a0f6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a0f8:	e765      	b.n	8009fc6 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	f7ff ff3f 	bl	8009f7e <USBD_CtlError>
  if (err != 0U)
 800a100:	e773      	b.n	8009fea <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800a102:	4629      	mov	r1, r5
 800a104:	f7ff ff3b 	bl	8009f7e <USBD_CtlError>
    return;
 800a108:	e76f      	b.n	8009fea <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800a10a:	4629      	mov	r1, r5
 800a10c:	4620      	mov	r0, r4
 800a10e:	f7ff ff36 	bl	8009f7e <USBD_CtlError>
 800a112:	e76a      	b.n	8009fea <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 800a114:	4620      	mov	r0, r4
 800a116:	f000 fac9 	bl	800a6ac <USBD_CtlSendStatus>
 800a11a:	e766      	b.n	8009fea <USBD_GetDescriptor+0x58>

0800a11c <USBD_SetAddress>:
{
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a120:	888b      	ldrh	r3, [r1, #4]
 800a122:	b9fb      	cbnz	r3, 800a164 <USBD_SetAddress+0x48>
 800a124:	88cb      	ldrh	r3, [r1, #6]
 800a126:	b9eb      	cbnz	r3, 800a164 <USBD_SetAddress+0x48>
 800a128:	884b      	ldrh	r3, [r1, #2]
 800a12a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a12c:	d81a      	bhi.n	800a164 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a12e:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a132:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d00c      	beq.n	800a156 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800a13c:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a140:	4629      	mov	r1, r5
 800a142:	f002 f9af 	bl	800c4a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a146:	4620      	mov	r0, r4
 800a148:	f000 fab0 	bl	800a6ac <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a14c:	b135      	cbz	r5, 800a15c <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a14e:	2302      	movs	r3, #2
 800a150:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a154:	e009      	b.n	800a16a <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800a156:	f7ff ff12 	bl	8009f7e <USBD_CtlError>
 800a15a:	e006      	b.n	800a16a <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a15c:	2301      	movs	r3, #1
 800a15e:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a162:	e002      	b.n	800a16a <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800a164:	4620      	mov	r0, r4
 800a166:	f7ff ff0a 	bl	8009f7e <USBD_CtlError>
}
 800a16a:	bd38      	pop	{r3, r4, r5, pc}

0800a16c <USBD_SetConfig>:
{
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	4604      	mov	r4, r0
 800a170:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800a172:	788d      	ldrb	r5, [r1, #2]
 800a174:	4b2f      	ldr	r3, [pc, #188]	@ (800a234 <USBD_SetConfig+0xc8>)
 800a176:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a178:	2d01      	cmp	r5, #1
 800a17a:	d810      	bhi.n	800a19e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800a17c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d00f      	beq.n	800a1a6 <USBD_SetConfig+0x3a>
 800a186:	2b03      	cmp	r3, #3
 800a188:	d026      	beq.n	800a1d8 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800a18a:	f7ff fef8 	bl	8009f7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a18e:	4b29      	ldr	r3, [pc, #164]	@ (800a234 <USBD_SetConfig+0xc8>)
 800a190:	7819      	ldrb	r1, [r3, #0]
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff fd07 	bl	8009ba6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a198:	2503      	movs	r5, #3
}
 800a19a:	4628      	mov	r0, r5
 800a19c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800a19e:	f7ff feee 	bl	8009f7e <USBD_CtlError>
    return USBD_FAIL;
 800a1a2:	2503      	movs	r5, #3
 800a1a4:	e7f9      	b.n	800a19a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800a1a6:	b1a5      	cbz	r5, 800a1d2 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 800a1a8:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	f7ff fcf2 	bl	8009b94 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	b138      	cbz	r0, 800a1c4 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f7ff fee1 	bl	8009f7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a1c2:	e7ea      	b.n	800a19a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fa71 	bl	800a6ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a1d0:	e7e3      	b.n	800a19a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a1d2:	f000 fa6b 	bl	800a6ac <USBD_CtlSendStatus>
 800a1d6:	e7e0      	b.n	800a19a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800a1d8:	b1cd      	cbz	r5, 800a20e <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 800a1da:	6841      	ldr	r1, [r0, #4]
 800a1dc:	428d      	cmp	r5, r1
 800a1de:	d025      	beq.n	800a22c <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1e0:	b2c9      	uxtb	r1, r1
 800a1e2:	f7ff fce0 	bl	8009ba6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1e6:	4b13      	ldr	r3, [pc, #76]	@ (800a234 <USBD_SetConfig+0xc8>)
 800a1e8:	7819      	ldrb	r1, [r3, #0]
 800a1ea:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7ff fcd1 	bl	8009b94 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	b1b0      	cbz	r0, 800a224 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f7ff fec0 	bl	8009f7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1fe:	7921      	ldrb	r1, [r4, #4]
 800a200:	4620      	mov	r0, r4
 800a202:	f7ff fcd0 	bl	8009ba6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a206:	2302      	movs	r3, #2
 800a208:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a20c:	e7c5      	b.n	800a19a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a20e:	2302      	movs	r3, #2
 800a210:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a214:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a216:	4629      	mov	r1, r5
 800a218:	f7ff fcc5 	bl	8009ba6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a21c:	4620      	mov	r0, r4
 800a21e:	f000 fa45 	bl	800a6ac <USBD_CtlSendStatus>
 800a222:	e7ba      	b.n	800a19a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800a224:	4620      	mov	r0, r4
 800a226:	f000 fa41 	bl	800a6ac <USBD_CtlSendStatus>
 800a22a:	e7b6      	b.n	800a19a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800a22c:	f000 fa3e 	bl	800a6ac <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a230:	2500      	movs	r5, #0
 800a232:	e7b2      	b.n	800a19a <USBD_SetConfig+0x2e>
 800a234:	24000820 	.word	0x24000820

0800a238 <USBD_GetConfig>:
{
 800a238:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800a23a:	88cb      	ldrh	r3, [r1, #6]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d10b      	bne.n	800a258 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800a240:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d909      	bls.n	800a25e <USBD_GetConfig+0x26>
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d111      	bne.n	800a272 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a24e:	2201      	movs	r2, #1
 800a250:	1d01      	adds	r1, r0, #4
 800a252:	f000 fa0e 	bl	800a672 <USBD_CtlSendData>
        break;
 800a256:	e001      	b.n	800a25c <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800a258:	f7ff fe91 	bl	8009f7e <USBD_CtlError>
}
 800a25c:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800a25e:	b25b      	sxtb	r3, r3
 800a260:	b13b      	cbz	r3, 800a272 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 800a262:	4601      	mov	r1, r0
 800a264:	2300      	movs	r3, #0
 800a266:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a26a:	2201      	movs	r2, #1
 800a26c:	f000 fa01 	bl	800a672 <USBD_CtlSendData>
        break;
 800a270:	e7f4      	b.n	800a25c <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 800a272:	f7ff fe84 	bl	8009f7e <USBD_CtlError>
}
 800a276:	e7f1      	b.n	800a25c <USBD_GetConfig+0x24>

0800a278 <USBD_GetStatus>:
{
 800a278:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a27a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a27e:	3b01      	subs	r3, #1
 800a280:	2b02      	cmp	r3, #2
 800a282:	d812      	bhi.n	800a2aa <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800a284:	88cb      	ldrh	r3, [r1, #6]
 800a286:	2b02      	cmp	r3, #2
 800a288:	d10c      	bne.n	800a2a4 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a28a:	2301      	movs	r3, #1
 800a28c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800a28e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800a292:	b10b      	cbz	r3, 800a298 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a294:	2303      	movs	r3, #3
 800a296:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a298:	2202      	movs	r2, #2
 800a29a:	f100 010c 	add.w	r1, r0, #12
 800a29e:	f000 f9e8 	bl	800a672 <USBD_CtlSendData>
}
 800a2a2:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800a2a4:	f7ff fe6b 	bl	8009f7e <USBD_CtlError>
        break;
 800a2a8:	e7fb      	b.n	800a2a2 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800a2aa:	f7ff fe68 	bl	8009f7e <USBD_CtlError>
}
 800a2ae:	e7f8      	b.n	800a2a2 <USBD_GetStatus+0x2a>

0800a2b0 <USBD_SetFeature>:
{
 800a2b0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2b2:	884b      	ldrh	r3, [r1, #2]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d004      	beq.n	800a2c2 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d007      	beq.n	800a2cc <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 800a2bc:	f7ff fe5f 	bl	8009f7e <USBD_CtlError>
}
 800a2c0:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800a2c2:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2c6:	f000 f9f1 	bl	800a6ac <USBD_CtlSendStatus>
 800a2ca:	e7f9      	b.n	800a2c0 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a2cc:	888b      	ldrh	r3, [r1, #4]
 800a2ce:	0a1b      	lsrs	r3, r3, #8
 800a2d0:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2d4:	f000 f9ea 	bl	800a6ac <USBD_CtlSendStatus>
 800a2d8:	e7f2      	b.n	800a2c0 <USBD_SetFeature+0x10>

0800a2da <USBD_ClrFeature>:
{
 800a2da:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800a2dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d809      	bhi.n	800a2fa <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2e6:	884b      	ldrh	r3, [r1, #2]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d000      	beq.n	800a2ee <USBD_ClrFeature+0x14>
}
 800a2ec:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2f4:	f000 f9da 	bl	800a6ac <USBD_CtlSendStatus>
 800a2f8:	e7f8      	b.n	800a2ec <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800a2fa:	f7ff fe40 	bl	8009f7e <USBD_CtlError>
}
 800a2fe:	e7f5      	b.n	800a2ec <USBD_ClrFeature+0x12>

0800a300 <USBD_StdDevReq>:
{
 800a300:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a302:	780c      	ldrb	r4, [r1, #0]
 800a304:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a308:	2c20      	cmp	r4, #32
 800a30a:	d006      	beq.n	800a31a <USBD_StdDevReq+0x1a>
 800a30c:	2c40      	cmp	r4, #64	@ 0x40
 800a30e:	d004      	beq.n	800a31a <USBD_StdDevReq+0x1a>
 800a310:	b16c      	cbz	r4, 800a32e <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800a312:	f7ff fe34 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a316:	2400      	movs	r4, #0
      break;
 800a318:	e007      	b.n	800a32a <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a31a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800a31e:	33ae      	adds	r3, #174	@ 0xae
 800a320:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	4798      	blx	r3
 800a328:	4604      	mov	r4, r0
}
 800a32a:	4620      	mov	r0, r4
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800a32e:	784d      	ldrb	r5, [r1, #1]
 800a330:	2d09      	cmp	r5, #9
 800a332:	d81d      	bhi.n	800a370 <USBD_StdDevReq+0x70>
 800a334:	e8df f005 	tbb	[pc, r5]
 800a338:	161c1912 	.word	0x161c1912
 800a33c:	1c05081c 	.word	0x1c05081c
 800a340:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800a342:	f7ff fe26 	bl	8009f92 <USBD_GetDescriptor>
          break;
 800a346:	e7f0      	b.n	800a32a <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 800a348:	f7ff fee8 	bl	800a11c <USBD_SetAddress>
          break;
 800a34c:	e7ed      	b.n	800a32a <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 800a34e:	f7ff ff0d 	bl	800a16c <USBD_SetConfig>
 800a352:	4604      	mov	r4, r0
          break;
 800a354:	e7e9      	b.n	800a32a <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800a356:	f7ff ff6f 	bl	800a238 <USBD_GetConfig>
          break;
 800a35a:	e7e6      	b.n	800a32a <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 800a35c:	f7ff ff8c 	bl	800a278 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800a360:	462c      	mov	r4, r5
          break;
 800a362:	e7e2      	b.n	800a32a <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 800a364:	f7ff ffa4 	bl	800a2b0 <USBD_SetFeature>
          break;
 800a368:	e7df      	b.n	800a32a <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800a36a:	f7ff ffb6 	bl	800a2da <USBD_ClrFeature>
          break;
 800a36e:	e7dc      	b.n	800a32a <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800a370:	f7ff fe05 	bl	8009f7e <USBD_CtlError>
          break;
 800a374:	e7d9      	b.n	800a32a <USBD_StdDevReq+0x2a>

0800a376 <USBD_StdItfReq>:
{
 800a376:	b570      	push	{r4, r5, r6, lr}
 800a378:	4605      	mov	r5, r0
 800a37a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a37c:	780b      	ldrb	r3, [r1, #0]
 800a37e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a382:	2b20      	cmp	r3, #32
 800a384:	d007      	beq.n	800a396 <USBD_StdItfReq+0x20>
 800a386:	2b40      	cmp	r3, #64	@ 0x40
 800a388:	d005      	beq.n	800a396 <USBD_StdItfReq+0x20>
 800a38a:	b123      	cbz	r3, 800a396 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800a38c:	f7ff fdf7 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a390:	2600      	movs	r6, #0
}
 800a392:	4630      	mov	r0, r6
 800a394:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800a396:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 800a39a:	3b01      	subs	r3, #1
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d826      	bhi.n	800a3ee <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3a0:	7921      	ldrb	r1, [r4, #4]
 800a3a2:	2901      	cmp	r1, #1
 800a3a4:	d905      	bls.n	800a3b2 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f7ff fde8 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ae:	2600      	movs	r6, #0
 800a3b0:	e7ef      	b.n	800a392 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f7ff fcce 	bl	8009d54 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3b8:	b968      	cbnz	r0, 800a3d6 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 800a3ba:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800a3be:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a3c2:	6891      	ldr	r1, [r2, #8]
 800a3c4:	b189      	cbz	r1, 800a3ea <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 800a3c6:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a3ca:	6893      	ldr	r3, [r2, #8]
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	4798      	blx	r3
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	e000      	b.n	800a3d8 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 800a3d6:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3d8:	88e3      	ldrh	r3, [r4, #6]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1d9      	bne.n	800a392 <USBD_StdItfReq+0x1c>
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	d1d7      	bne.n	800a392 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f000 f962 	bl	800a6ac <USBD_CtlSendStatus>
 800a3e8:	e7d3      	b.n	800a392 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 800a3ea:	2603      	movs	r6, #3
 800a3ec:	e7f4      	b.n	800a3d8 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f7ff fdc4 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f6:	2600      	movs	r6, #0
          break;
 800a3f8:	e7cb      	b.n	800a392 <USBD_StdItfReq+0x1c>

0800a3fa <USBD_StdEPReq>:
{
 800a3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fe:	4606      	mov	r6, r0
 800a400:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800a402:	888b      	ldrh	r3, [r1, #4]
 800a404:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a406:	780c      	ldrb	r4, [r1, #0]
 800a408:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800a40c:	2c20      	cmp	r4, #32
 800a40e:	d008      	beq.n	800a422 <USBD_StdEPReq+0x28>
 800a410:	2c40      	cmp	r4, #64	@ 0x40
 800a412:	d006      	beq.n	800a422 <USBD_StdEPReq+0x28>
 800a414:	b1dc      	cbz	r4, 800a44e <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 800a416:	f7ff fdb2 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a41a:	2400      	movs	r4, #0
}
 800a41c:	4620      	mov	r0, r4
 800a41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a422:	4639      	mov	r1, r7
 800a424:	4630      	mov	r0, r6
 800a426:	f7ff fc97 	bl	8009d58 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a42a:	4604      	mov	r4, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f040 80f9 	bne.w	800a624 <USBD_StdEPReq+0x22a>
        pdev->classId = idx;
 800a432:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800a436:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800a43a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0eb      	beq.n	800a41c <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a444:	4629      	mov	r1, r5
 800a446:	4630      	mov	r0, r6
 800a448:	4798      	blx	r3
 800a44a:	4604      	mov	r4, r0
 800a44c:	e7e6      	b.n	800a41c <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 800a44e:	f891 8001 	ldrb.w	r8, [r1, #1]
 800a452:	f1b8 0f01 	cmp.w	r8, #1
 800a456:	d031      	beq.n	800a4bc <USBD_StdEPReq+0xc2>
 800a458:	f1b8 0f03 	cmp.w	r8, #3
 800a45c:	d005      	beq.n	800a46a <USBD_StdEPReq+0x70>
 800a45e:	f1b8 0f00 	cmp.w	r8, #0
 800a462:	d066      	beq.n	800a532 <USBD_StdEPReq+0x138>
          USBD_CtlError(pdev, req);
 800a464:	f7ff fd8b 	bl	8009f7e <USBD_CtlError>
          break;
 800a468:	e7d8      	b.n	800a41c <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800a46a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b02      	cmp	r3, #2
 800a472:	d004      	beq.n	800a47e <USBD_StdEPReq+0x84>
 800a474:	2b03      	cmp	r3, #3
 800a476:	d011      	beq.n	800a49c <USBD_StdEPReq+0xa2>
              USBD_CtlError(pdev, req);
 800a478:	f7ff fd81 	bl	8009f7e <USBD_CtlError>
              break;
 800a47c:	e7ce      	b.n	800a41c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a47e:	2f00      	cmp	r7, #0
 800a480:	bf18      	it	ne
 800a482:	2f80      	cmpne	r7, #128	@ 0x80
 800a484:	d007      	beq.n	800a496 <USBD_StdEPReq+0x9c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a486:	4639      	mov	r1, r7
 800a488:	f001 fffc 	bl	800c484 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a48c:	2180      	movs	r1, #128	@ 0x80
 800a48e:	4630      	mov	r0, r6
 800a490:	f001 fff8 	bl	800c484 <USBD_LL_StallEP>
 800a494:	e7c2      	b.n	800a41c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800a496:	f7ff fd72 	bl	8009f7e <USBD_CtlError>
 800a49a:	e7bf      	b.n	800a41c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a49c:	884b      	ldrh	r3, [r1, #2]
 800a49e:	b92b      	cbnz	r3, 800a4ac <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4a0:	2f00      	cmp	r7, #0
 800a4a2:	bf18      	it	ne
 800a4a4:	2f80      	cmpne	r7, #128	@ 0x80
 800a4a6:	d001      	beq.n	800a4ac <USBD_StdEPReq+0xb2>
 800a4a8:	88cb      	ldrh	r3, [r1, #6]
 800a4aa:	b11b      	cbz	r3, 800a4b4 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f000 f8fd 	bl	800a6ac <USBD_CtlSendStatus>
              break;
 800a4b2:	e7b3      	b.n	800a41c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	f001 ffe5 	bl	800c484 <USBD_LL_StallEP>
 800a4ba:	e7f7      	b.n	800a4ac <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 800a4bc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d004      	beq.n	800a4d0 <USBD_StdEPReq+0xd6>
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d011      	beq.n	800a4ee <USBD_StdEPReq+0xf4>
              USBD_CtlError(pdev, req);
 800a4ca:	f7ff fd58 	bl	8009f7e <USBD_CtlError>
              break;
 800a4ce:	e7a5      	b.n	800a41c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4d0:	2f00      	cmp	r7, #0
 800a4d2:	bf18      	it	ne
 800a4d4:	2f80      	cmpne	r7, #128	@ 0x80
 800a4d6:	d007      	beq.n	800a4e8 <USBD_StdEPReq+0xee>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4d8:	4639      	mov	r1, r7
 800a4da:	f001 ffd3 	bl	800c484 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4de:	2180      	movs	r1, #128	@ 0x80
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f001 ffcf 	bl	800c484 <USBD_LL_StallEP>
 800a4e6:	e799      	b.n	800a41c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800a4e8:	f7ff fd49 	bl	8009f7e <USBD_CtlError>
 800a4ec:	e796      	b.n	800a41c <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4ee:	884b      	ldrh	r3, [r1, #2]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d193      	bne.n	800a41c <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4f4:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800a4f8:	d117      	bne.n	800a52a <USBD_StdEPReq+0x130>
                (void)USBD_CtlSendStatus(pdev);
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f000 f8d6 	bl	800a6ac <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a500:	4639      	mov	r1, r7
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff fc28 	bl	8009d58 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a508:	2800      	cmp	r0, #0
 800a50a:	d187      	bne.n	800a41c <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800a50c:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800a510:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 800a514:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a518:	6892      	ldr	r2, [r2, #8]
 800a51a:	2a00      	cmp	r2, #0
 800a51c:	f000 8084 	beq.w	800a628 <USBD_StdEPReq+0x22e>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a520:	4629      	mov	r1, r5
 800a522:	4630      	mov	r0, r6
 800a524:	4790      	blx	r2
 800a526:	4604      	mov	r4, r0
 800a528:	e778      	b.n	800a41c <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a52a:	4639      	mov	r1, r7
 800a52c:	f001 ffb2 	bl	800c494 <USBD_LL_ClearStallEP>
 800a530:	e7e3      	b.n	800a4fa <USBD_StdEPReq+0x100>
          switch (pdev->dev_state)
 800a532:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	2a02      	cmp	r2, #2
 800a53a:	d005      	beq.n	800a548 <USBD_StdEPReq+0x14e>
 800a53c:	2a03      	cmp	r2, #3
 800a53e:	d028      	beq.n	800a592 <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 800a540:	f7ff fd1d 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a544:	4644      	mov	r4, r8
              break;
 800a546:	e769      	b.n	800a41c <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a548:	2f00      	cmp	r7, #0
 800a54a:	bf18      	it	ne
 800a54c:	2f80      	cmpne	r7, #128	@ 0x80
 800a54e:	d113      	bne.n	800a578 <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a550:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a554:	d114      	bne.n	800a580 <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a556:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a55a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800a55e:	00b9      	lsls	r1, r7, #2
 800a560:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800a564:	4401      	add	r1, r0
 800a566:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800a568:	2300      	movs	r3, #0
 800a56a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a56c:	2202      	movs	r2, #2
 800a56e:	4630      	mov	r0, r6
 800a570:	f000 f87f 	bl	800a672 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a574:	4644      	mov	r4, r8
              break;
 800a576:	e751      	b.n	800a41c <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800a578:	f7ff fd01 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a57c:	4644      	mov	r4, r8
                break;
 800a57e:	e74d      	b.n	800a41c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a580:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 800a584:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800a588:	00b9      	lsls	r1, r7, #2
 800a58a:	3110      	adds	r1, #16
 800a58c:	4401      	add	r1, r0
 800a58e:	3104      	adds	r1, #4
 800a590:	e7ea      	b.n	800a568 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 800a592:	b25b      	sxtb	r3, r3
 800a594:	2b00      	cmp	r3, #0
 800a596:	db20      	blt.n	800a5da <USBD_StdEPReq+0x1e0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a598:	f007 020f 	and.w	r2, r7, #15
 800a59c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a5a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a5a4:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 800a5a8:	b322      	cbz	r2, 800a5f4 <USBD_StdEPReq+0x1fa>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	db26      	blt.n	800a5fc <USBD_StdEPReq+0x202>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5ae:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5b6:	009c      	lsls	r4, r3, #2
 800a5b8:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 800a5bc:	4434      	add	r4, r6
 800a5be:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5c0:	2f80      	cmp	r7, #128	@ 0x80
 800a5c2:	bf18      	it	ne
 800a5c4:	2f00      	cmpne	r7, #0
 800a5c6:	d122      	bne.n	800a60e <USBD_StdEPReq+0x214>
                pep->status = 0x0000U;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f000 f84e 	bl	800a672 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a5d6:	4644      	mov	r4, r8
              break;
 800a5d8:	e720      	b.n	800a41c <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5da:	f007 020f 	and.w	r2, r7, #15
 800a5de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a5e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a5e6:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	d1de      	bne.n	800a5aa <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 800a5ec:	f7ff fcc7 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f0:	4644      	mov	r4, r8
                  break;
 800a5f2:	e713      	b.n	800a41c <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800a5f4:	f7ff fcc3 	bl	8009f7e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f8:	4644      	mov	r4, r8
                  break;
 800a5fa:	e70f      	b.n	800a41c <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5fc:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 800a600:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a604:	009c      	lsls	r4, r3, #2
 800a606:	3410      	adds	r4, #16
 800a608:	4434      	add	r4, r6
 800a60a:	3404      	adds	r4, #4
 800a60c:	e7d8      	b.n	800a5c0 <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a60e:	4639      	mov	r1, r7
 800a610:	4630      	mov	r0, r6
 800a612:	f001 fef7 	bl	800c404 <USBD_LL_IsStallEP>
 800a616:	b110      	cbz	r0, 800a61e <USBD_StdEPReq+0x224>
                pep->status = 0x0001U;
 800a618:	2301      	movs	r3, #1
 800a61a:	6023      	str	r3, [r4, #0]
 800a61c:	e7d6      	b.n	800a5cc <USBD_StdEPReq+0x1d2>
                pep->status = 0x0000U;
 800a61e:	2300      	movs	r3, #0
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	e7d3      	b.n	800a5cc <USBD_StdEPReq+0x1d2>
  USBD_StatusTypeDef ret = USBD_OK;
 800a624:	2400      	movs	r4, #0
 800a626:	e6f9      	b.n	800a41c <USBD_StdEPReq+0x22>
 800a628:	4604      	mov	r4, r0
 800a62a:	e6f7      	b.n	800a41c <USBD_StdEPReq+0x22>

0800a62c <USBD_GetString>:
  if (desc == NULL)
 800a62c:	b300      	cbz	r0, 800a670 <USBD_GetString+0x44>
{
 800a62e:	b570      	push	{r4, r5, r6, lr}
 800a630:	460d      	mov	r5, r1
 800a632:	4616      	mov	r6, r2
 800a634:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a636:	f7ff fc84 	bl	8009f42 <USBD_GetLen>
 800a63a:	3001      	adds	r0, #1
 800a63c:	0043      	lsls	r3, r0, #1
 800a63e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a642:	d806      	bhi.n	800a652 <USBD_GetString+0x26>
 800a644:	b29b      	uxth	r3, r3
 800a646:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800a648:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a64a:	2303      	movs	r3, #3
 800a64c:	706b      	strb	r3, [r5, #1]
  idx++;
 800a64e:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800a650:	e00a      	b.n	800a668 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a656:	e7f6      	b.n	800a646 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 800a658:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800a65a:	3401      	adds	r4, #1
    idx++;
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800a660:	2100      	movs	r1, #0
 800a662:	54a9      	strb	r1, [r5, r2]
    idx++;
 800a664:	3302      	adds	r3, #2
 800a666:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800a668:	7822      	ldrb	r2, [r4, #0]
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	d1f4      	bne.n	800a658 <USBD_GetString+0x2c>
}
 800a66e:	bd70      	pop	{r4, r5, r6, pc}
 800a670:	4770      	bx	lr

0800a672 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a672:	b508      	push	{r3, lr}
 800a674:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a676:	2202      	movs	r2, #2
 800a678:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a67c:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a67e:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a680:	460a      	mov	r2, r1
 800a682:	2100      	movs	r1, #0
 800a684:	f001 ff16 	bl	800c4b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a688:	2000      	movs	r0, #0
 800a68a:	bd08      	pop	{r3, pc}

0800a68c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a68c:	b508      	push	{r3, lr}
 800a68e:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a690:	460a      	mov	r2, r1
 800a692:	2100      	movs	r1, #0
 800a694:	f001 ff0e 	bl	800c4b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a698:	2000      	movs	r0, #0
 800a69a:	bd08      	pop	{r3, pc}

0800a69c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a69c:	b508      	push	{r3, lr}
 800a69e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6a0:	460a      	mov	r2, r1
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	f001 ff0e 	bl	800c4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	bd08      	pop	{r3, pc}

0800a6ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a6ac:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6ae:	2204      	movs	r2, #4
 800a6b0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	f001 fefb 	bl	800c4b4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a6be:	2000      	movs	r0, #0
 800a6c0:	bd08      	pop	{r3, pc}

0800a6c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a6c2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6c4:	2205      	movs	r2, #5
 800a6c6:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	f001 fef8 	bl	800c4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	bd08      	pop	{r3, pc}

0800a6d8 <USBH_HID_SOFProcess>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a6d8:	f8d0 33f0 	ldr.w	r3, [r0, #1008]	@ 0x3f0
 800a6dc:	69db      	ldr	r3, [r3, #28]

  if (HID_Handle->state == USBH_HID_POLL)
 800a6de:	789a      	ldrb	r2, [r3, #2]
 800a6e0:	2a06      	cmp	r2, #6
 800a6e2:	d001      	beq.n	800a6e8 <USBH_HID_SOFProcess+0x10>
      USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
    }
  }
  return USBH_OK;
}
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	4770      	bx	lr
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800a6e8:	f8d0 2438 	ldr.w	r2, [r0, #1080]	@ 0x438
 800a6ec:	6a19      	ldr	r1, [r3, #32]
 800a6ee:	1a52      	subs	r2, r2, r1
 800a6f0:	8b99      	ldrh	r1, [r3, #28]
 800a6f2:	428a      	cmp	r2, r1
 800a6f4:	d3f6      	bcc.n	800a6e4 <USBH_HID_SOFProcess+0xc>
      HID_Handle->state = USBH_HID_GET_DATA;
 800a6f6:	2204      	movs	r2, #4
 800a6f8:	709a      	strb	r2, [r3, #2]
 800a6fa:	e7f3      	b.n	800a6e4 <USBH_HID_SOFProcess+0xc>

0800a6fc <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800a6fc:	b530      	push	{r4, r5, lr}
 800a6fe:	b083      	sub	sp, #12
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800a700:	788c      	ldrb	r4, [r1, #2]
 800a702:	78cb      	ldrb	r3, [r1, #3]
 800a704:	ea44 2403 	orr.w	r4, r4, r3, lsl #8

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800a708:	2c09      	cmp	r4, #9
 800a70a:	d923      	bls.n	800a754 <USBH_HID_ParseHIDDesc+0x58>
 800a70c:	4605      	mov	r5, r0
 800a70e:	4608      	mov	r0, r1
  {
    ptr = USB_LEN_CFG_DESC;
 800a710:	2309      	movs	r3, #9
 800a712:	f8ad 3006 	strh.w	r3, [sp, #6]

    while (ptr < CfgDescLen)
 800a716:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a71a:	42a3      	cmp	r3, r4
 800a71c:	d21a      	bcs.n	800a754 <USBH_HID_ParseHIDDesc+0x58>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a71e:	f10d 0106 	add.w	r1, sp, #6
 800a722:	f001 fa57 	bl	800bbd4 <USBH_GetNextDesc>

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800a726:	7843      	ldrb	r3, [r0, #1]
 800a728:	2b21      	cmp	r3, #33	@ 0x21
 800a72a:	d1f4      	bne.n	800a716 <USBH_HID_ParseHIDDesc+0x1a>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800a72c:	7803      	ldrb	r3, [r0, #0]
 800a72e:	702b      	strb	r3, [r5, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800a730:	7843      	ldrb	r3, [r0, #1]
 800a732:	706b      	strb	r3, [r5, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800a734:	7883      	ldrb	r3, [r0, #2]
 800a736:	78c2      	ldrb	r2, [r0, #3]
 800a738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a73c:	806b      	strh	r3, [r5, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800a73e:	7903      	ldrb	r3, [r0, #4]
 800a740:	712b      	strb	r3, [r5, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800a742:	7943      	ldrb	r3, [r0, #5]
 800a744:	716b      	strb	r3, [r5, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800a746:	7983      	ldrb	r3, [r0, #6]
 800a748:	71ab      	strb	r3, [r5, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800a74a:	79c3      	ldrb	r3, [r0, #7]
 800a74c:	7a02      	ldrb	r2, [r0, #8]
 800a74e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a752:	812b      	strh	r3, [r5, #8]
        break;
      }
    }
  }
}
 800a754:	b003      	add	sp, #12
 800a756:	bd30      	pop	{r4, r5, pc}

0800a758 <USBH_HID_InterfaceDeInit>:
{
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4604      	mov	r4, r0
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a75c:	f8d0 33f0 	ldr.w	r3, [r0, #1008]	@ 0x3f0
 800a760:	69dd      	ldr	r5, [r3, #28]
  if (HID_Handle->InPipe != 0x00U)
 800a762:	7869      	ldrb	r1, [r5, #1]
 800a764:	b969      	cbnz	r1, 800a782 <USBH_HID_InterfaceDeInit+0x2a>
  if (HID_Handle->OutPipe != 0x00U)
 800a766:	7829      	ldrb	r1, [r5, #0]
 800a768:	b9a1      	cbnz	r1, 800a794 <USBH_HID_InterfaceDeInit+0x3c>
  if ((phost->pActiveClass->pData) != NULL)
 800a76a:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800a76e:	69d8      	ldr	r0, [r3, #28]
 800a770:	b128      	cbz	r0, 800a77e <USBH_HID_InterfaceDeInit+0x26>
    USBH_free(phost->pActiveClass->pData);
 800a772:	f002 f82d 	bl	800c7d0 <free>
    phost->pActiveClass->pData = 0U;
 800a776:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800a77a:	2200      	movs	r2, #0
 800a77c:	61da      	str	r2, [r3, #28]
}
 800a77e:	2000      	movs	r0, #0
 800a780:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800a782:	f001 fc5f 	bl	800c044 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800a786:	7869      	ldrb	r1, [r5, #1]
 800a788:	4620      	mov	r0, r4
 800a78a:	f001 fc72 	bl	800c072 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800a78e:	2300      	movs	r3, #0
 800a790:	706b      	strb	r3, [r5, #1]
 800a792:	e7e8      	b.n	800a766 <USBH_HID_InterfaceDeInit+0xe>
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800a794:	4620      	mov	r0, r4
 800a796:	f001 fc55 	bl	800c044 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800a79a:	7829      	ldrb	r1, [r5, #0]
 800a79c:	4620      	mov	r0, r4
 800a79e:	f001 fc68 	bl	800c072 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	702b      	strb	r3, [r5, #0]
 800a7a6:	e7e0      	b.n	800a76a <USBH_HID_InterfaceDeInit+0x12>

0800a7a8 <USBH_HID_InterfaceInit>:
{
 800a7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800a7b0:	f8d0 13f0 	ldr.w	r1, [r0, #1008]	@ 0x3f0
 800a7b4:	23ff      	movs	r3, #255	@ 0xff
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	7909      	ldrb	r1, [r1, #4]
 800a7ba:	f000 fdb7 	bl	800b32c <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a7be:	2803      	cmp	r0, #3
 800a7c0:	d84a      	bhi.n	800a858 <USBH_HID_InterfaceInit+0xb0>
 800a7c2:	4607      	mov	r7, r0
  status = USBH_SelectInterface(phost, interface);
 800a7c4:	4601      	mov	r1, r0
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fd6c 	bl	800b2a4 <USBH_SelectInterface>
  if (status != USBH_OK)
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f040 80c1 	bne.w	800a956 <USBH_HID_InterfaceInit+0x1ae>
  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800a7d4:	f8d4 53f0 	ldr.w	r5, [r4, #1008]	@ 0x3f0
 800a7d8:	2034      	movs	r0, #52	@ 0x34
 800a7da:	f001 fff1 	bl	800c7c0 <malloc>
 800a7de:	61e8      	str	r0, [r5, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a7e0:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800a7e4:	69de      	ldr	r6, [r3, #28]
  if (HID_Handle == NULL)
 800a7e6:	2e00      	cmp	r6, #0
 800a7e8:	d045      	beq.n	800a876 <USBH_HID_InterfaceInit+0xce>
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800a7ea:	2234      	movs	r2, #52	@ 0x34
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f002 fab6 	bl	800cd60 <memset>
  HID_Handle->state = USBH_HID_ERROR;
 800a7f4:	2307      	movs	r3, #7
 800a7f6:	70b3      	strb	r3, [r6, #2]
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800a7f8:	232a      	movs	r3, #42	@ 0x2a
 800a7fa:	fb03 4307 	mla	r3, r3, r7, r4
 800a7fe:	f893 3349 	ldrb.w	r3, [r3, #841]	@ 0x349
 800a802:	2b01      	cmp	r3, #1
 800a804:	d043      	beq.n	800a88e <USBH_HID_InterfaceInit+0xe6>
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800a806:	2b02      	cmp	r3, #2
 800a808:	d14a      	bne.n	800a8a0 <USBH_HID_InterfaceInit+0xf8>
    USBH_UsrLog("Mouse device found!");
 800a80a:	4856      	ldr	r0, [pc, #344]	@ (800a964 <USBH_HID_InterfaceInit+0x1bc>)
 800a80c:	f002 f958 	bl	800cac0 <iprintf>
 800a810:	200a      	movs	r0, #10
 800a812:	f002 f967 	bl	800cae4 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800a816:	4b54      	ldr	r3, [pc, #336]	@ (800a968 <USBH_HID_InterfaceInit+0x1c0>)
 800a818:	6333      	str	r3, [r6, #48]	@ 0x30
  HID_Handle->state     = USBH_HID_INIT;
 800a81a:	2300      	movs	r3, #0
 800a81c:	70b3      	strb	r3, [r6, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800a81e:	7173      	strb	r3, [r6, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a820:	232a      	movs	r3, #42	@ 0x2a
 800a822:	fb03 4307 	mla	r3, r3, r7, r4
 800a826:	f893 234e 	ldrb.w	r2, [r3, #846]	@ 0x34e
 800a82a:	76b2      	strb	r2, [r6, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a82c:	f8b3 2350 	ldrh.w	r2, [r3, #848]	@ 0x350
 800a830:	8332      	strh	r2, [r6, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800a832:	f893 3352 	ldrb.w	r3, [r3, #850]	@ 0x352
 800a836:	83b3      	strh	r3, [r6, #28]
  if (HID_Handle->poll < HID_MIN_POLL)
 800a838:	2b09      	cmp	r3, #9
 800a83a:	d801      	bhi.n	800a840 <USBH_HID_InterfaceInit+0x98>
    HID_Handle->poll = HID_MIN_POLL;
 800a83c:	230a      	movs	r3, #10
 800a83e:	83b3      	strh	r3, [r6, #28]
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800a840:	232a      	movs	r3, #42	@ 0x2a
 800a842:	fb03 4307 	mla	r3, r3, r7, r4
 800a846:	f893 9346 	ldrb.w	r9, [r3, #838]	@ 0x346
 800a84a:	f1b9 0f04 	cmp.w	r9, #4
 800a84e:	bf28      	it	cs
 800a850:	f04f 0904 	movcs.w	r9, #4
  for (num = 0U; num < max_ep; num++)
 800a854:	4645      	mov	r5, r8
 800a856:	e04e      	b.n	800a8f6 <USBH_HID_InterfaceInit+0x14e>
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800a858:	4844      	ldr	r0, [pc, #272]	@ (800a96c <USBH_HID_InterfaceInit+0x1c4>)
 800a85a:	f002 f931 	bl	800cac0 <iprintf>
 800a85e:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800a862:	6819      	ldr	r1, [r3, #0]
 800a864:	4842      	ldr	r0, [pc, #264]	@ (800a970 <USBH_HID_InterfaceInit+0x1c8>)
 800a866:	f002 f92b 	bl	800cac0 <iprintf>
 800a86a:	200a      	movs	r0, #10
 800a86c:	f002 f93a 	bl	800cae4 <putchar>
    return USBH_FAIL;
 800a870:	f04f 0802 	mov.w	r8, #2
 800a874:	e071      	b.n	800a95a <USBH_HID_InterfaceInit+0x1b2>
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800a876:	483d      	ldr	r0, [pc, #244]	@ (800a96c <USBH_HID_InterfaceInit+0x1c4>)
 800a878:	f002 f922 	bl	800cac0 <iprintf>
 800a87c:	483d      	ldr	r0, [pc, #244]	@ (800a974 <USBH_HID_InterfaceInit+0x1cc>)
 800a87e:	f002 f91f 	bl	800cac0 <iprintf>
 800a882:	200a      	movs	r0, #10
 800a884:	f002 f92e 	bl	800cae4 <putchar>
    return USBH_FAIL;
 800a888:	f04f 0802 	mov.w	r8, #2
 800a88c:	e065      	b.n	800a95a <USBH_HID_InterfaceInit+0x1b2>
    USBH_UsrLog("KeyBoard device found!");
 800a88e:	483a      	ldr	r0, [pc, #232]	@ (800a978 <USBH_HID_InterfaceInit+0x1d0>)
 800a890:	f002 f916 	bl	800cac0 <iprintf>
 800a894:	200a      	movs	r0, #10
 800a896:	f002 f925 	bl	800cae4 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800a89a:	4b38      	ldr	r3, [pc, #224]	@ (800a97c <USBH_HID_InterfaceInit+0x1d4>)
 800a89c:	6333      	str	r3, [r6, #48]	@ 0x30
 800a89e:	e7bc      	b.n	800a81a <USBH_HID_InterfaceInit+0x72>
    USBH_UsrLog("Protocol not supported.");
 800a8a0:	4837      	ldr	r0, [pc, #220]	@ (800a980 <USBH_HID_InterfaceInit+0x1d8>)
 800a8a2:	f002 f90d 	bl	800cac0 <iprintf>
 800a8a6:	200a      	movs	r0, #10
 800a8a8:	f002 f91c 	bl	800cae4 <putchar>
    return USBH_FAIL;
 800a8ac:	f04f 0802 	mov.w	r8, #2
 800a8b0:	e053      	b.n	800a95a <USBH_HID_InterfaceInit+0x1b2>
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800a8b2:	7131      	strb	r1, [r6, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f001 fbca 	bl	800c04e <USBH_AllocPipe>
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	7070      	strb	r0, [r6, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800a8be:	1c6a      	adds	r2, r5, #1
 800a8c0:	232a      	movs	r3, #42	@ 0x2a
 800a8c2:	fb07 f303 	mul.w	r3, r7, r3
 800a8c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8ca:	4423      	add	r3, r4
 800a8cc:	f8b3 3348 	ldrh.w	r3, [r3, #840]	@ 0x348
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800a8d0:	7932      	ldrb	r2, [r6, #4]
 800a8d2:	9302      	str	r3, [sp, #8]
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	9301      	str	r3, [sp, #4]
 800a8d8:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f001 fb9e 	bl	800c024 <USBH_OpenPipe>
      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	7871      	ldrb	r1, [r6, #1]
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f001 fef9 	bl	800c6e4 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800a8f2:	3501      	adds	r5, #1
 800a8f4:	b2ed      	uxtb	r5, r5
 800a8f6:	454d      	cmp	r5, r9
 800a8f8:	d22f      	bcs.n	800a95a <USBH_HID_InterfaceInit+0x1b2>
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800a8fa:	1c6a      	adds	r2, r5, #1
 800a8fc:	232a      	movs	r3, #42	@ 0x2a
 800a8fe:	fb07 f303 	mul.w	r3, r7, r3
 800a902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a906:	4423      	add	r3, r4
 800a908:	f893 1346 	ldrb.w	r1, [r3, #838]	@ 0x346
 800a90c:	f993 3346 	ldrsb.w	r3, [r3, #838]	@ 0x346
 800a910:	2b00      	cmp	r3, #0
 800a912:	dbce      	blt.n	800a8b2 <USBH_HID_InterfaceInit+0x10a>
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800a914:	70f1      	strb	r1, [r6, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800a916:	4620      	mov	r0, r4
 800a918:	f001 fb99 	bl	800c04e <USBH_AllocPipe>
 800a91c:	4601      	mov	r1, r0
 800a91e:	7030      	strb	r0, [r6, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800a920:	1c6a      	adds	r2, r5, #1
 800a922:	232a      	movs	r3, #42	@ 0x2a
 800a924:	fb07 f303 	mul.w	r3, r7, r3
 800a928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a92c:	4423      	add	r3, r4
 800a92e:	f8b3 3348 	ldrh.w	r3, [r3, #840]	@ 0x348
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800a932:	78f2      	ldrb	r2, [r6, #3]
 800a934:	9302      	str	r3, [sp, #8]
 800a936:	2303      	movs	r3, #3
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800a944:	4620      	mov	r0, r4
 800a946:	f001 fb6d 	bl	800c024 <USBH_OpenPipe>
      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800a94a:	2200      	movs	r2, #0
 800a94c:	7831      	ldrb	r1, [r6, #0]
 800a94e:	4620      	mov	r0, r4
 800a950:	f001 fec8 	bl	800c6e4 <USBH_LL_SetToggle>
 800a954:	e7cd      	b.n	800a8f2 <USBH_HID_InterfaceInit+0x14a>
    return USBH_FAIL;
 800a956:	f04f 0802 	mov.w	r8, #2
}
 800a95a:	4640      	mov	r0, r8
 800a95c:	b005      	add	sp, #20
 800a95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a962:	bf00      	nop
 800a964:	0800d8cc 	.word	0x0800d8cc
 800a968:	0800ad09 	.word	0x0800ad09
 800a96c:	0800d858 	.word	0x0800d858
 800a970:	0800d864 	.word	0x0800d864
 800a974:	0800d88c 	.word	0x0800d88c
 800a978:	0800d8b4 	.word	0x0800d8b4
 800a97c:	0800acad 	.word	0x0800acad
 800a980:	0800d8e0 	.word	0x0800d8e0

0800a984 <USBH_HID_GetHIDReportDescriptor>:
{
 800a984:	b500      	push	{lr}
 800a986:	b083      	sub	sp, #12
  if (length > sizeof(phost->device.Data))
 800a988:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a98c:	d80a      	bhi.n	800a9a4 <USBH_HID_GetHIDReportDescriptor+0x20>
  status = USBH_GetDescriptor(phost,
 800a98e:	9100      	str	r1, [sp, #0]
 800a990:	f500 738e 	add.w	r3, r0, #284	@ 0x11c
 800a994:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800a998:	2101      	movs	r1, #1
 800a99a:	f001 fa04 	bl	800bda6 <USBH_GetDescriptor>
}
 800a99e:	b003      	add	sp, #12
 800a9a0:	f85d fb04 	ldr.w	pc, [sp], #4
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800a9a4:	4805      	ldr	r0, [pc, #20]	@ (800a9bc <USBH_HID_GetHIDReportDescriptor+0x38>)
 800a9a6:	f002 f88b 	bl	800cac0 <iprintf>
 800a9aa:	4805      	ldr	r0, [pc, #20]	@ (800a9c0 <USBH_HID_GetHIDReportDescriptor+0x3c>)
 800a9ac:	f002 f888 	bl	800cac0 <iprintf>
 800a9b0:	200a      	movs	r0, #10
 800a9b2:	f002 f897 	bl	800cae4 <putchar>
    return USBH_NOT_SUPPORTED;
 800a9b6:	2003      	movs	r0, #3
 800a9b8:	e7f1      	b.n	800a99e <USBH_HID_GetHIDReportDescriptor+0x1a>
 800a9ba:	bf00      	nop
 800a9bc:	0800d820 	.word	0x0800d820
 800a9c0:	0800d8f8 	.word	0x0800d8f8

0800a9c4 <USBH_HID_SetIdle>:
{
 800a9c4:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800a9c6:	f04f 0c21 	mov.w	ip, #33	@ 0x21
 800a9ca:	f880 c010 	strb.w	ip, [r0, #16]
  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800a9ce:	f04f 0c0a 	mov.w	ip, #10
 800a9d2:	f880 c011 	strb.w	ip, [r0, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800a9d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a9da:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a9dc:	2100      	movs	r1, #0
 800a9de:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a9e0:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 800a9e2:	460a      	mov	r2, r1
 800a9e4:	f001 f9be 	bl	800bd64 <USBH_CtlReq>
}
 800a9e8:	bd08      	pop	{r3, pc}

0800a9ea <USBH_HID_GetReport>:
{
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	f89d 4008 	ldrb.w	r4, [sp, #8]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800a9f0:	f04f 0ea1 	mov.w	lr, #161	@ 0xa1
 800a9f4:	f880 e010 	strb.w	lr, [r0, #16]
  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800a9f8:	f04f 0e01 	mov.w	lr, #1
 800a9fc:	f880 e011 	strb.w	lr, [r0, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800aa00:	ea42 2e01 	orr.w	lr, r2, r1, lsl #8
 800aa04:	f8a0 e012 	strh.w	lr, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aa08:	2200      	movs	r2, #0
 800aa0a:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800aa0c:	82c4      	strh	r4, [r0, #22]
  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800aa0e:	4622      	mov	r2, r4
 800aa10:	4619      	mov	r1, r3
 800aa12:	f001 f9a7 	bl	800bd64 <USBH_CtlReq>
}
 800aa16:	bd10      	pop	{r4, pc}

0800aa18 <USBH_HID_SetProtocol>:
{
 800aa18:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800aa1a:	2321      	movs	r3, #33	@ 0x21
 800aa1c:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800aa1e:	230b      	movs	r3, #11
 800aa20:	7443      	strb	r3, [r0, #17]
  if (protocol != 0U)
 800aa22:	b141      	cbz	r1, 800aa36 <USBH_HID_SetProtocol+0x1e>
    phost->Control.setup.b.wValue.w = 0U;
 800aa24:	2300      	movs	r3, #0
 800aa26:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aa28:	2100      	movs	r1, #0
 800aa2a:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800aa2c:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 800aa2e:	460a      	mov	r2, r1
 800aa30:	f001 f998 	bl	800bd64 <USBH_CtlReq>
}
 800aa34:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.wValue.w = 1U;
 800aa36:	2301      	movs	r3, #1
 800aa38:	8243      	strh	r3, [r0, #18]
 800aa3a:	e7f5      	b.n	800aa28 <USBH_HID_SetProtocol+0x10>

0800aa3c <USBH_HID_ClassRequest>:
{
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4605      	mov	r5, r0
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800aa40:	f8d0 33f0 	ldr.w	r3, [r0, #1008]	@ 0x3f0
 800aa44:	69de      	ldr	r6, [r3, #28]
  switch (HID_Handle->ctl_state)
 800aa46:	7974      	ldrb	r4, [r6, #5]
 800aa48:	2c05      	cmp	r4, #5
 800aa4a:	d852      	bhi.n	800aaf2 <USBH_HID_ClassRequest+0xb6>
 800aa4c:	e8df f004 	tbb	[pc, r4]
 800aa50:	030e5103 	.word	0x030e5103
 800aa54:	3524      	.short	0x3524
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800aa56:	f100 011c 	add.w	r1, r0, #28
 800aa5a:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 800aa5e:	f7ff fe4d 	bl	800a6fc <USBH_HID_ParseHIDDesc>
      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800aa62:	2302      	movs	r3, #2
 800aa64:	7173      	strb	r3, [r6, #5]
  USBH_StatusTypeDef status         = USBH_BUSY;
 800aa66:	2401      	movs	r4, #1
}
 800aa68:	4620      	mov	r0, r4
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800aa6c:	8df1      	ldrh	r1, [r6, #46]	@ 0x2e
 800aa6e:	f7ff ff89 	bl	800a984 <USBH_HID_GetHIDReportDescriptor>
      if (classReqStatus == USBH_OK)
 800aa72:	b918      	cbnz	r0, 800aa7c <USBH_HID_ClassRequest+0x40>
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800aa74:	2304      	movs	r3, #4
 800aa76:	7173      	strb	r3, [r6, #5]
  USBH_StatusTypeDef status         = USBH_BUSY;
 800aa78:	2401      	movs	r4, #1
 800aa7a:	e7f5      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800aa7c:	2803      	cmp	r0, #3
 800aa7e:	d001      	beq.n	800aa84 <USBH_HID_ClassRequest+0x48>
  USBH_StatusTypeDef status         = USBH_BUSY;
 800aa80:	2401      	movs	r4, #1
 800aa82:	e7f1      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800aa84:	481c      	ldr	r0, [pc, #112]	@ (800aaf8 <USBH_HID_ClassRequest+0xbc>)
 800aa86:	f002 f81b 	bl	800cac0 <iprintf>
 800aa8a:	481c      	ldr	r0, [pc, #112]	@ (800aafc <USBH_HID_ClassRequest+0xc0>)
 800aa8c:	f002 f818 	bl	800cac0 <iprintf>
 800aa90:	200a      	movs	r0, #10
 800aa92:	f002 f827 	bl	800cae4 <putchar>
        status = USBH_FAIL;
 800aa96:	e7e7      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	f7ff ff92 	bl	800a9c4 <USBH_HID_SetIdle>
      if (classReqStatus == USBH_OK)
 800aaa0:	b918      	cbnz	r0, 800aaaa <USBH_HID_ClassRequest+0x6e>
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800aaa2:	2305      	movs	r3, #5
 800aaa4:	7173      	strb	r3, [r6, #5]
  USBH_StatusTypeDef status         = USBH_BUSY;
 800aaa6:	2401      	movs	r4, #1
 800aaa8:	e7de      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800aaaa:	2803      	cmp	r0, #3
 800aaac:	d001      	beq.n	800aab2 <USBH_HID_ClassRequest+0x76>
  USBH_StatusTypeDef status         = USBH_BUSY;
 800aaae:	2401      	movs	r4, #1
 800aab0:	e7da      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800aab2:	2305      	movs	r3, #5
 800aab4:	7173      	strb	r3, [r6, #5]
  USBH_StatusTypeDef status         = USBH_BUSY;
 800aab6:	2401      	movs	r4, #1
 800aab8:	e7d6      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800aaba:	2100      	movs	r1, #0
 800aabc:	f7ff ffac 	bl	800aa18 <USBH_HID_SetProtocol>
      if (classReqStatus == USBH_OK)
 800aac0:	4604      	mov	r4, r0
 800aac2:	b938      	cbnz	r0, 800aad4 <USBH_HID_ClassRequest+0x98>
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800aac4:	2301      	movs	r3, #1
 800aac6:	7173      	strb	r3, [r6, #5]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aac8:	f8d5 3448 	ldr.w	r3, [r5, #1096]	@ 0x448
 800aacc:	2102      	movs	r1, #2
 800aace:	4628      	mov	r0, r5
 800aad0:	4798      	blx	r3
        status = USBH_OK;
 800aad2:	e7c9      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800aad4:	2803      	cmp	r0, #3
 800aad6:	d001      	beq.n	800aadc <USBH_HID_ClassRequest+0xa0>
  USBH_StatusTypeDef status         = USBH_BUSY;
 800aad8:	2401      	movs	r4, #1
 800aada:	e7c5      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800aadc:	4806      	ldr	r0, [pc, #24]	@ (800aaf8 <USBH_HID_ClassRequest+0xbc>)
 800aade:	f001 ffef 	bl	800cac0 <iprintf>
 800aae2:	4807      	ldr	r0, [pc, #28]	@ (800ab00 <USBH_HID_ClassRequest+0xc4>)
 800aae4:	f001 ffec 	bl	800cac0 <iprintf>
 800aae8:	200a      	movs	r0, #10
 800aaea:	f001 fffb 	bl	800cae4 <putchar>
        status = USBH_FAIL;
 800aaee:	2402      	movs	r4, #2
 800aaf0:	e7ba      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
  switch (HID_Handle->ctl_state)
 800aaf2:	2401      	movs	r4, #1
 800aaf4:	e7b8      	b.n	800aa68 <USBH_HID_ClassRequest+0x2c>
 800aaf6:	bf00      	nop
 800aaf8:	0800d820 	.word	0x0800d820
 800aafc:	0800d940 	.word	0x0800d940
 800ab00:	0800d980 	.word	0x0800d980

0800ab04 <USBH_HID_FifoInit>:
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
  f->head = 0U;
 800ab04:	2300      	movs	r3, #0
 800ab06:	8083      	strh	r3, [r0, #4]
  f->tail = 0U;
 800ab08:	80c3      	strh	r3, [r0, #6]
  f->lock = 0U;
 800ab0a:	7283      	strb	r3, [r0, #10]
  f->size = size;
 800ab0c:	8102      	strh	r2, [r0, #8]
  f->buf = buf;
 800ab0e:	6001      	str	r1, [r0, #0]
}
 800ab10:	4770      	bx	lr

0800ab12 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800ab12:	4603      	mov	r3, r0
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;

  if (f->lock == 0U)
 800ab14:	7a80      	ldrb	r0, [r0, #10]
 800ab16:	bb78      	cbnz	r0, 800ab78 <USBH_HID_FifoWrite+0x66>
  {
    f->lock = 1U;
 800ab18:	2001      	movs	r0, #1
 800ab1a:	7298      	strb	r0, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	4290      	cmp	r0, r2
 800ab20:	d22a      	bcs.n	800ab78 <USBH_HID_FifoWrite+0x66>
{
 800ab22:	b530      	push	{r4, r5, lr}
 800ab24:	e007      	b.n	800ab36 <USBH_HID_FifoWrite+0x24>
    {
      if (((f->head + 1U) == f->tail) ||
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800ab26:	b984      	cbnz	r4, 800ab4a <USBH_HID_FifoWrite+0x38>
      {
        f->lock = 0U;
 800ab28:	2200      	movs	r2, #0
 800ab2a:	729a      	strb	r2, [r3, #10]
        return i;
 800ab2c:	e023      	b.n	800ab76 <USBH_HID_FifoWrite+0x64>
    for (i = 0U; i < nbytes; i++)
 800ab2e:	3001      	adds	r0, #1
 800ab30:	b280      	uxth	r0, r0
 800ab32:	4290      	cmp	r0, r2
 800ab34:	d21c      	bcs.n	800ab70 <USBH_HID_FifoWrite+0x5e>
      if (((f->head + 1U) == f->tail) ||
 800ab36:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 800ab3a:	f10e 0c01 	add.w	ip, lr, #1
 800ab3e:	88dc      	ldrh	r4, [r3, #6]
 800ab40:	45a4      	cmp	ip, r4
 800ab42:	d0f1      	beq.n	800ab28 <USBH_HID_FifoWrite+0x16>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800ab44:	891d      	ldrh	r5, [r3, #8]
      if (((f->head + 1U) == f->tail) ||
 800ab46:	45ac      	cmp	ip, r5
 800ab48:	d0ed      	beq.n	800ab26 <USBH_HID_FifoWrite+0x14>
      }
      else
      {
        f->buf[f->head] = *p++;
 800ab4a:	681c      	ldr	r4, [r3, #0]
 800ab4c:	f811 5b01 	ldrb.w	r5, [r1], #1
 800ab50:	f804 500e 	strb.w	r5, [r4, lr]
        f->head++;
 800ab54:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 800ab58:	f10c 0c01 	add.w	ip, ip, #1
 800ab5c:	fa1f fc8c 	uxth.w	ip, ip
 800ab60:	f8a3 c004 	strh.w	ip, [r3, #4]

        if (f->head == f->size)
 800ab64:	891c      	ldrh	r4, [r3, #8]
 800ab66:	45a4      	cmp	ip, r4
 800ab68:	d1e1      	bne.n	800ab2e <USBH_HID_FifoWrite+0x1c>
        {
          f->head = 0U;
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	809c      	strh	r4, [r3, #4]
 800ab6e:	e7de      	b.n	800ab2e <USBH_HID_FifoWrite+0x1c>
        }
      }
    }
  }

  f->lock = 0U;
 800ab70:	2100      	movs	r1, #0
 800ab72:	7299      	strb	r1, [r3, #10]

  return nbytes;
 800ab74:	4610      	mov	r0, r2
}
 800ab76:	bd30      	pop	{r4, r5, pc}
  f->lock = 0U;
 800ab78:	2100      	movs	r1, #0
 800ab7a:	7299      	strb	r1, [r3, #10]
  return nbytes;
 800ab7c:	4610      	mov	r0, r2
}
 800ab7e:	4770      	bx	lr

0800ab80 <USBH_HID_EventCallback>:
  */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab80:	4770      	bx	lr
	...

0800ab84 <USBH_HID_Process>:
{
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	4604      	mov	r4, r0
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ab8a:	f8d0 33f0 	ldr.w	r3, [r0, #1008]	@ 0x3f0
 800ab8e:	69de      	ldr	r6, [r3, #28]
  switch (HID_Handle->state)
 800ab90:	78b3      	ldrb	r3, [r6, #2]
 800ab92:	2b06      	cmp	r3, #6
 800ab94:	d87d      	bhi.n	800ac92 <USBH_HID_Process+0x10e>
 800ab96:	e8df f003 	tbb	[pc, r3]
 800ab9a:	1804      	.short	0x1804
 800ab9c:	343d7c7c 	.word	0x343d7c7c
 800aba0:	4d          	.byte	0x4d
 800aba1:	00          	.byte	0x00
      status = HID_Handle->Init(phost);
 800aba2:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800aba4:	4798      	blx	r3
      if (status == USBH_OK)
 800aba6:	4605      	mov	r5, r0
 800aba8:	b910      	cbnz	r0, 800abb0 <USBH_HID_Process+0x2c>
        HID_Handle->state = USBH_HID_IDLE;
 800abaa:	2301      	movs	r3, #1
 800abac:	70b3      	strb	r3, [r6, #2]
 800abae:	e03e      	b.n	800ac2e <USBH_HID_Process+0xaa>
        USBH_ErrLog("HID Class Init failed");
 800abb0:	483c      	ldr	r0, [pc, #240]	@ (800aca4 <USBH_HID_Process+0x120>)
 800abb2:	f001 ff85 	bl	800cac0 <iprintf>
 800abb6:	483c      	ldr	r0, [pc, #240]	@ (800aca8 <USBH_HID_Process+0x124>)
 800abb8:	f001 ff82 	bl	800cac0 <iprintf>
 800abbc:	200a      	movs	r0, #10
 800abbe:	f001 ff91 	bl	800cae4 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800abc2:	2307      	movs	r3, #7
 800abc4:	70b3      	strb	r3, [r6, #2]
        status = USBH_FAIL;
 800abc6:	2502      	movs	r5, #2
 800abc8:	e031      	b.n	800ac2e <USBH_HID_Process+0xaa>
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800abca:	6973      	ldr	r3, [r6, #20]
 800abcc:	7e32      	ldrb	r2, [r6, #24]
 800abce:	9200      	str	r2, [sp, #0]
 800abd0:	2200      	movs	r2, #0
 800abd2:	2101      	movs	r1, #1
 800abd4:	f7ff ff09 	bl	800a9ea <USBH_HID_GetReport>
      if (status == USBH_OK)
 800abd8:	4605      	mov	r5, r0
 800abda:	b910      	cbnz	r0, 800abe2 <USBH_HID_Process+0x5e>
        HID_Handle->state = USBH_HID_SYNC;
 800abdc:	2305      	movs	r3, #5
 800abde:	70b3      	strb	r3, [r6, #2]
 800abe0:	e025      	b.n	800ac2e <USBH_HID_Process+0xaa>
      else if (status == USBH_BUSY)
 800abe2:	2801      	cmp	r0, #1
 800abe4:	d005      	beq.n	800abf2 <USBH_HID_Process+0x6e>
      else if (status == USBH_NOT_SUPPORTED)
 800abe6:	2803      	cmp	r0, #3
 800abe8:	d007      	beq.n	800abfa <USBH_HID_Process+0x76>
        HID_Handle->state = USBH_HID_ERROR;
 800abea:	2307      	movs	r3, #7
 800abec:	70b3      	strb	r3, [r6, #2]
        status = USBH_FAIL;
 800abee:	2502      	movs	r5, #2
 800abf0:	e01d      	b.n	800ac2e <USBH_HID_Process+0xaa>
        HID_Handle->state = USBH_HID_IDLE;
 800abf2:	2301      	movs	r3, #1
 800abf4:	70b3      	strb	r3, [r6, #2]
        status = USBH_OK;
 800abf6:	2500      	movs	r5, #0
 800abf8:	e019      	b.n	800ac2e <USBH_HID_Process+0xaa>
        HID_Handle->state = USBH_HID_SYNC;
 800abfa:	2305      	movs	r3, #5
 800abfc:	70b3      	strb	r3, [r6, #2]
        status = USBH_OK;
 800abfe:	2500      	movs	r5, #0
 800ac00:	e015      	b.n	800ac2e <USBH_HID_Process+0xaa>
      if ((phost->Timer & 1U) != 0U)
 800ac02:	f8d0 3438 	ldr.w	r3, [r0, #1080]	@ 0x438
 800ac06:	f013 0f01 	tst.w	r3, #1
 800ac0a:	d044      	beq.n	800ac96 <USBH_HID_Process+0x112>
        HID_Handle->state = USBH_HID_GET_DATA;
 800ac0c:	2304      	movs	r3, #4
 800ac0e:	70b3      	strb	r3, [r6, #2]
  USBH_StatusTypeDef status = USBH_OK;
 800ac10:	2500      	movs	r5, #0
 800ac12:	e00c      	b.n	800ac2e <USBH_HID_Process+0xaa>
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800ac14:	7873      	ldrb	r3, [r6, #1]
 800ac16:	7e32      	ldrb	r2, [r6, #24]
 800ac18:	6971      	ldr	r1, [r6, #20]
 800ac1a:	f001 f9e1 	bl	800bfe0 <USBH_InterruptReceiveData>
      HID_Handle->state = USBH_HID_POLL;
 800ac1e:	2306      	movs	r3, #6
 800ac20:	70b3      	strb	r3, [r6, #2]
      HID_Handle->timer = phost->Timer;
 800ac22:	f8d4 3438 	ldr.w	r3, [r4, #1080]	@ 0x438
 800ac26:	6233      	str	r3, [r6, #32]
      HID_Handle->DataReady = 0U;
 800ac28:	2500      	movs	r5, #0
 800ac2a:	f886 5024 	strb.w	r5, [r6, #36]	@ 0x24
}
 800ac2e:	4628      	mov	r0, r5
 800ac30:	b002      	add	sp, #8
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800ac34:	7871      	ldrb	r1, [r6, #1]
 800ac36:	f001 fd49 	bl	800c6cc <USBH_LL_GetURBState>
 800ac3a:	2801      	cmp	r0, #1
 800ac3c:	d007      	beq.n	800ac4e <USBH_HID_Process+0xca>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800ac3e:	7871      	ldrb	r1, [r6, #1]
 800ac40:	4620      	mov	r0, r4
 800ac42:	f001 fd43 	bl	800c6cc <USBH_LL_GetURBState>
 800ac46:	2805      	cmp	r0, #5
 800ac48:	d01a      	beq.n	800ac80 <USBH_HID_Process+0xfc>
  USBH_StatusTypeDef status = USBH_OK;
 800ac4a:	2500      	movs	r5, #0
 800ac4c:	e7ef      	b.n	800ac2e <USBH_HID_Process+0xaa>
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800ac4e:	7871      	ldrb	r1, [r6, #1]
 800ac50:	4620      	mov	r0, r4
 800ac52:	f001 fd35 	bl	800c6c0 <USBH_LL_GetLastXferSize>
        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800ac56:	f896 5024 	ldrb.w	r5, [r6, #36]	@ 0x24
 800ac5a:	b9f5      	cbnz	r5, 800ac9a <USBH_HID_Process+0x116>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d0e6      	beq.n	800ac2e <USBH_HID_Process+0xaa>
 800ac60:	68b3      	ldr	r3, [r6, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d0e3      	beq.n	800ac2e <USBH_HID_Process+0xaa>
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800ac66:	8b32      	ldrh	r2, [r6, #24]
 800ac68:	6971      	ldr	r1, [r6, #20]
 800ac6a:	f106 0008 	add.w	r0, r6, #8
 800ac6e:	f7ff ff50 	bl	800ab12 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f886 3024 	strb.w	r3, [r6, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f7ff ff81 	bl	800ab80 <USBH_HID_EventCallback>
 800ac7e:	e7d6      	b.n	800ac2e <USBH_HID_Process+0xaa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800ac80:	7eb1      	ldrb	r1, [r6, #26]
 800ac82:	4620      	mov	r0, r4
 800ac84:	f001 f963 	bl	800bf4e <USBH_ClrFeature>
 800ac88:	4605      	mov	r5, r0
 800ac8a:	b940      	cbnz	r0, 800ac9e <USBH_HID_Process+0x11a>
            HID_Handle->state = USBH_HID_GET_DATA;
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	70b3      	strb	r3, [r6, #2]
 800ac90:	e7cd      	b.n	800ac2e <USBH_HID_Process+0xaa>
  switch (HID_Handle->state)
 800ac92:	2500      	movs	r5, #0
 800ac94:	e7cb      	b.n	800ac2e <USBH_HID_Process+0xaa>
  USBH_StatusTypeDef status = USBH_OK;
 800ac96:	2500      	movs	r5, #0
 800ac98:	e7c9      	b.n	800ac2e <USBH_HID_Process+0xaa>
 800ac9a:	2500      	movs	r5, #0
 800ac9c:	e7c7      	b.n	800ac2e <USBH_HID_Process+0xaa>
 800ac9e:	2500      	movs	r5, #0
 800aca0:	e7c5      	b.n	800ac2e <USBH_HID_Process+0xaa>
 800aca2:	bf00      	nop
 800aca4:	0800d820 	.word	0x0800d820
 800aca8:	0800d9b8 	.word	0x0800d9b8

0800acac <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800acac:	b538      	push	{r3, r4, r5, lr}
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800acae:	f8d0 33f0 	ldr.w	r3, [r0, #1008]	@ 0x3f0
 800acb2:	69dd      	ldr	r5, [r3, #28]

  keybd_info.lctrl = 0U;
 800acb4:	4a11      	ldr	r2, [pc, #68]	@ (800acfc <USBH_HID_KeybdInit+0x50>)
 800acb6:	2300      	movs	r3, #0
 800acb8:	7053      	strb	r3, [r2, #1]
  keybd_info.lshift = 0U;
 800acba:	7093      	strb	r3, [r2, #2]
  keybd_info.lalt = 0U;
 800acbc:	70d3      	strb	r3, [r2, #3]
  keybd_info.lgui = 0U;
 800acbe:	7113      	strb	r3, [r2, #4]
  keybd_info.rctrl = 0U;
 800acc0:	7153      	strb	r3, [r2, #5]
  keybd_info.rshift = 0U;
 800acc2:	7193      	strb	r3, [r2, #6]
  keybd_info.ralt = 0U;
 800acc4:	71d3      	strb	r3, [r2, #7]
  keybd_info.rgui = 0U;
 800acc6:	7213      	strb	r3, [r2, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800acc8:	e005      	b.n	800acd6 <USBH_HID_KeybdInit+0x2a>
  {
    keybd_report_data[x] = 0U;
 800acca:	2200      	movs	r2, #0
 800accc:	4c0c      	ldr	r4, [pc, #48]	@ (800ad00 <USBH_HID_KeybdInit+0x54>)
 800acce:	54e2      	strb	r2, [r4, r3]
    keybd_rx_report_buf[x] = 0U;
 800acd0:	4c0c      	ldr	r4, [pc, #48]	@ (800ad04 <USBH_HID_KeybdInit+0x58>)
 800acd2:	54e2      	strb	r2, [r4, r3]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800acd4:	3301      	adds	r3, #1
 800acd6:	2b07      	cmp	r3, #7
 800acd8:	d9f7      	bls.n	800acca <USBH_HID_KeybdInit+0x1e>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800acda:	8b2b      	ldrh	r3, [r5, #24]
 800acdc:	2b08      	cmp	r3, #8
 800acde:	d901      	bls.n	800ace4 <USBH_HID_KeybdInit+0x38>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800ace0:	2308      	movs	r3, #8
 800ace2:	832b      	strh	r3, [r5, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800ace4:	4b07      	ldr	r3, [pc, #28]	@ (800ad04 <USBH_HID_KeybdInit+0x58>)
 800ace6:	616b      	str	r3, [r5, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800ace8:	2250      	movs	r2, #80	@ 0x50
 800acea:	f500 718e 	add.w	r1, r0, #284	@ 0x11c
 800acee:	f105 0008 	add.w	r0, r5, #8
 800acf2:	f7ff ff07 	bl	800ab04 <USBH_HID_FifoInit>
  }

  return USBH_OK;
}
 800acf6:	2000      	movs	r0, #0
 800acf8:	bd38      	pop	{r3, r4, r5, pc}
 800acfa:	bf00      	nop
 800acfc:	24000834 	.word	0x24000834
 800ad00:	24000824 	.word	0x24000824
 800ad04:	2400082c 	.word	0x2400082c

0800ad08 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800ad08:	b538      	push	{r3, r4, r5, lr}
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ad0a:	f8d0 33f0 	ldr.w	r3, [r0, #1008]	@ 0x3f0
 800ad0e:	69dd      	ldr	r5, [r3, #28]

  mouse_info.x = 0U;
 800ad10:	4a0f      	ldr	r2, [pc, #60]	@ (800ad50 <USBH_HID_MouseInit+0x48>)
 800ad12:	2300      	movs	r3, #0
 800ad14:	7013      	strb	r3, [r2, #0]
  mouse_info.y = 0U;
 800ad16:	7053      	strb	r3, [r2, #1]
  mouse_info.buttons[0] = 0U;
 800ad18:	7093      	strb	r3, [r2, #2]
  mouse_info.buttons[1] = 0U;
 800ad1a:	70d3      	strb	r3, [r2, #3]
  mouse_info.buttons[2] = 0U;
 800ad1c:	7113      	strb	r3, [r2, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800ad1e:	e005      	b.n	800ad2c <USBH_HID_MouseInit+0x24>
  {
    mouse_report_data[i] = 0U;
 800ad20:	2200      	movs	r2, #0
 800ad22:	4c0c      	ldr	r4, [pc, #48]	@ (800ad54 <USBH_HID_MouseInit+0x4c>)
 800ad24:	54e2      	strb	r2, [r4, r3]
    mouse_rx_report_buf[i] = 0U;
 800ad26:	4c0c      	ldr	r4, [pc, #48]	@ (800ad58 <USBH_HID_MouseInit+0x50>)
 800ad28:	54e2      	strb	r2, [r4, r3]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	2b07      	cmp	r3, #7
 800ad2e:	d9f7      	bls.n	800ad20 <USBH_HID_MouseInit+0x18>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800ad30:	8b2b      	ldrh	r3, [r5, #24]
 800ad32:	2b08      	cmp	r3, #8
 800ad34:	d901      	bls.n	800ad3a <USBH_HID_MouseInit+0x32>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800ad36:	2308      	movs	r3, #8
 800ad38:	832b      	strh	r3, [r5, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800ad3a:	4b07      	ldr	r3, [pc, #28]	@ (800ad58 <USBH_HID_MouseInit+0x50>)
 800ad3c:	616b      	str	r3, [r5, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800ad3e:	2250      	movs	r2, #80	@ 0x50
 800ad40:	f500 718e 	add.w	r1, r0, #284	@ 0x11c
 800ad44:	f105 0008 	add.w	r0, r5, #8
 800ad48:	f7ff fedc 	bl	800ab04 <USBH_HID_FifoInit>
  }

  return USBH_OK;
}
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	24000854 	.word	0x24000854
 800ad54:	2400084c 	.word	0x2400084c
 800ad58:	24000844 	.word	0x24000844

0800ad5c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ad5c:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ad5e:	7803      	ldrb	r3, [r0, #0]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b0b      	cmp	r3, #11
 800ad64:	d000      	beq.n	800ad68 <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 800ad66:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ad68:	f8d0 33f0 	ldr.w	r3, [r0, #1008]	@ 0x3f0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d0fa      	beq.n	800ad66 <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	4798      	blx	r3
}
 800ad74:	e7f7      	b.n	800ad66 <USBH_HandleSof+0xa>

0800ad76 <DeInitStateMachine>:
{
 800ad76:	b538      	push	{r3, r4, r5, lr}
 800ad78:	4604      	mov	r4, r0
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e005      	b.n	800ad8a <DeInitStateMachine+0x14>
    phost->Pipes[i] = 0U;
 800ad7e:	f103 02fe 	add.w	r2, r3, #254	@ 0xfe
 800ad82:	2100      	movs	r1, #0
 800ad84:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ad88:	3301      	adds	r3, #1
 800ad8a:	2b0f      	cmp	r3, #15
 800ad8c:	d9f7      	bls.n	800ad7e <DeInitStateMachine+0x8>
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e004      	b.n	800ad9c <DeInitStateMachine+0x26>
    phost->device.Data[i] = 0U;
 800ad92:	18e2      	adds	r2, r4, r3
 800ad94:	2100      	movs	r1, #0
 800ad96:	f882 111c 	strb.w	r1, [r2, #284]	@ 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ada0:	d3f7      	bcc.n	800ad92 <DeInitStateMachine+0x1c>
  phost->gState = HOST_IDLE;
 800ada2:	2500      	movs	r5, #0
 800ada4:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 800ada6:	7065      	strb	r5, [r4, #1]
  phost->RequestState = CMD_SEND;
 800ada8:	2301      	movs	r3, #1
 800adaa:	70a3      	strb	r3, [r4, #2]
  phost->Timer = 0U;
 800adac:	f8c4 5438 	str.w	r5, [r4, #1080]	@ 0x438
  phost->Control.state = CTRL_SETUP;
 800adb0:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800adb2:	2240      	movs	r2, #64	@ 0x40
 800adb4:	71a2      	strb	r2, [r4, #6]
  phost->Control.errorcount = 0U;
 800adb6:	7665      	strb	r5, [r4, #25]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800adb8:	f884 531c 	strb.w	r5, [r4, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800adbc:	f884 331d 	strb.w	r3, [r4, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800adc0:	f884 531f 	strb.w	r5, [r4, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800adc4:	f884 531e 	strb.w	r5, [r4, #798]	@ 0x31e
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800adc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800adcc:	4629      	mov	r1, r5
 800adce:	f104 001c 	add.w	r0, r4, #28
 800add2:	f001 ffc5 	bl	800cd60 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800add6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adda:	4629      	mov	r1, r5
 800addc:	f504 708e 	add.w	r0, r4, #284	@ 0x11c
 800ade0:	f001 ffbe 	bl	800cd60 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ade4:	f8c4 5326 	str.w	r5, [r4, #806]	@ 0x326
 800ade8:	f8c4 532a 	str.w	r5, [r4, #810]	@ 0x32a
 800adec:	f8c4 532e 	str.w	r5, [r4, #814]	@ 0x32e
 800adf0:	f8c4 5332 	str.w	r5, [r4, #818]	@ 0x332
 800adf4:	f8a4 5336 	strh.w	r5, [r4, #822]	@ 0x336
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800adf8:	22b2      	movs	r2, #178	@ 0xb2
 800adfa:	4629      	mov	r1, r5
 800adfc:	f504 704e 	add.w	r0, r4, #824	@ 0x338
 800ae00:	f001 ffae 	bl	800cd60 <memset>
}
 800ae04:	4628      	mov	r0, r5
 800ae06:	bd38      	pop	{r3, r4, r5, pc}

0800ae08 <USBH_HandleEnum>:
{
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	4604      	mov	r4, r0
  switch (phost->EnumState)
 800ae0e:	7845      	ldrb	r5, [r0, #1]
 800ae10:	2d07      	cmp	r5, #7
 800ae12:	f200 81e8 	bhi.w	800b1e6 <USBH_HandleEnum+0x3de>
 800ae16:	e8df f015 	tbh	[pc, r5, lsl #1]
 800ae1a:	0008      	.short	0x0008
 800ae1c:	00990057 	.word	0x00990057
 800ae20:	011500e1 	.word	0x011500e1
 800ae24:	0177014a 	.word	0x0177014a
 800ae28:	01bf      	.short	0x01bf
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ae2a:	2108      	movs	r1, #8
 800ae2c:	f000 ffdc 	bl	800bde8 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800ae30:	b118      	cbz	r0, 800ae3a <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae32:	2803      	cmp	r0, #3
 800ae34:	d021      	beq.n	800ae7a <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ae36:	2501      	movs	r5, #1
 800ae38:	e04c      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ae3a:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 800ae3e:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ae40:	2501      	movs	r5, #1
 800ae42:	7065      	strb	r5, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae44:	9302      	str	r3, [sp, #8]
 800ae46:	2600      	movs	r6, #0
 800ae48:	9601      	str	r6, [sp, #4]
 800ae4a:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800ae54:	2280      	movs	r2, #128	@ 0x80
 800ae56:	7921      	ldrb	r1, [r4, #4]
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f001 f8e3 	bl	800c024 <USBH_OpenPipe>
                            (uint16_t)phost->Control.pipe_size);
 800ae5e:	79a3      	ldrb	r3, [r4, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae60:	9302      	str	r3, [sp, #8]
 800ae62:	9601      	str	r6, [sp, #4]
 800ae64:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800ae6e:	4632      	mov	r2, r6
 800ae70:	7961      	ldrb	r1, [r4, #5]
 800ae72:	4620      	mov	r0, r4
 800ae74:	f001 f8d6 	bl	800c024 <USBH_OpenPipe>
 800ae78:	e02c      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800ae7a:	48ba      	ldr	r0, [pc, #744]	@ (800b164 <USBH_HandleEnum+0x35c>)
 800ae7c:	f001 fe20 	bl	800cac0 <iprintf>
 800ae80:	48b9      	ldr	r0, [pc, #740]	@ (800b168 <USBH_HandleEnum+0x360>)
 800ae82:	f001 fe1d 	bl	800cac0 <iprintf>
 800ae86:	200a      	movs	r0, #10
 800ae88:	f001 fe2c 	bl	800cae4 <putchar>
        phost->device.EnumCnt++;
 800ae8c:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 800ae90:	3301      	adds	r3, #1
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae98:	2b03      	cmp	r3, #3
 800ae9a:	d909      	bls.n	800aeb0 <USBH_HandleEnum+0xa8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ae9c:	48b3      	ldr	r0, [pc, #716]	@ (800b16c <USBH_HandleEnum+0x364>)
 800ae9e:	f001 fe0f 	bl	800cac0 <iprintf>
 800aea2:	200a      	movs	r0, #10
 800aea4:	f001 fe1e 	bl	800cae4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800aea8:	230d      	movs	r3, #13
 800aeaa:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aeac:	2501      	movs	r5, #1
 800aeae:	e011      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aeb0:	7961      	ldrb	r1, [r4, #5]
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f001 f8dd 	bl	800c072 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aeb8:	7921      	ldrb	r1, [r4, #4]
 800aeba:	4620      	mov	r0, r4
 800aebc:	f001 f8d9 	bl	800c072 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aec0:	2300      	movs	r3, #0
 800aec2:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aec4:	2501      	movs	r5, #1
 800aec6:	e005      	b.n	800aed4 <USBH_HandleEnum+0xcc>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aec8:	2112      	movs	r1, #18
 800aeca:	f000 ff8d 	bl	800bde8 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800aece:	b120      	cbz	r0, 800aeda <USBH_HandleEnum+0xd2>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aed0:	2803      	cmp	r0, #3
 800aed2:	d015      	beq.n	800af00 <USBH_HandleEnum+0xf8>
}
 800aed4:	4628      	mov	r0, r5
 800aed6:	b004      	add	sp, #16
 800aed8:	bd70      	pop	{r4, r5, r6, pc}
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800aeda:	f8b4 1330 	ldrh.w	r1, [r4, #816]	@ 0x330
 800aede:	48a4      	ldr	r0, [pc, #656]	@ (800b170 <USBH_HandleEnum+0x368>)
 800aee0:	f001 fdee 	bl	800cac0 <iprintf>
 800aee4:	200a      	movs	r0, #10
 800aee6:	f001 fdfd 	bl	800cae4 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800aeea:	f8b4 132e 	ldrh.w	r1, [r4, #814]	@ 0x32e
 800aeee:	48a1      	ldr	r0, [pc, #644]	@ (800b174 <USBH_HandleEnum+0x36c>)
 800aef0:	f001 fde6 	bl	800cac0 <iprintf>
 800aef4:	200a      	movs	r0, #10
 800aef6:	f001 fdf5 	bl	800cae4 <putchar>
        phost->EnumState = ENUM_SET_ADDR;
 800aefa:	2302      	movs	r3, #2
 800aefc:	7063      	strb	r3, [r4, #1]
 800aefe:	e7e9      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800af00:	4898      	ldr	r0, [pc, #608]	@ (800b164 <USBH_HandleEnum+0x35c>)
 800af02:	f001 fddd 	bl	800cac0 <iprintf>
 800af06:	489c      	ldr	r0, [pc, #624]	@ (800b178 <USBH_HandleEnum+0x370>)
 800af08:	f001 fdda 	bl	800cac0 <iprintf>
 800af0c:	200a      	movs	r0, #10
 800af0e:	f001 fde9 	bl	800cae4 <putchar>
        phost->device.EnumCnt++;
 800af12:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 800af16:	3301      	adds	r3, #1
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d908      	bls.n	800af34 <USBH_HandleEnum+0x12c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800af22:	4892      	ldr	r0, [pc, #584]	@ (800b16c <USBH_HandleEnum+0x364>)
 800af24:	f001 fdcc 	bl	800cac0 <iprintf>
 800af28:	200a      	movs	r0, #10
 800af2a:	f001 fddb 	bl	800cae4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800af2e:	230d      	movs	r3, #13
 800af30:	7023      	strb	r3, [r4, #0]
 800af32:	e7cf      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af34:	7961      	ldrb	r1, [r4, #5]
 800af36:	4620      	mov	r0, r4
 800af38:	f001 f89b 	bl	800c072 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af3c:	7921      	ldrb	r1, [r4, #4]
 800af3e:	4620      	mov	r0, r4
 800af40:	f001 f897 	bl	800c072 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af44:	2300      	movs	r3, #0
 800af46:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800af48:	7023      	strb	r3, [r4, #0]
 800af4a:	e7c3      	b.n	800aed4 <USBH_HandleEnum+0xcc>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800af4c:	2101      	movs	r1, #1
 800af4e:	f000 ffcb 	bl	800bee8 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800af52:	b118      	cbz	r0, 800af5c <USBH_HandleEnum+0x154>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af54:	2803      	cmp	r0, #3
 800af56:	d02c      	beq.n	800afb2 <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800af58:	2501      	movs	r5, #1
 800af5a:	e7bb      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_Delay(2U);
 800af5c:	2002      	movs	r0, #2
 800af5e:	f001 fbd8 	bl	800c712 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800af62:	2501      	movs	r5, #1
 800af64:	f884 531c 	strb.w	r5, [r4, #796]	@ 0x31c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800af68:	4629      	mov	r1, r5
 800af6a:	4884      	ldr	r0, [pc, #528]	@ (800b17c <USBH_HandleEnum+0x374>)
 800af6c:	f001 fda8 	bl	800cac0 <iprintf>
 800af70:	200a      	movs	r0, #10
 800af72:	f001 fdb7 	bl	800cae4 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800af76:	2303      	movs	r3, #3
 800af78:	7063      	strb	r3, [r4, #1]
                            (uint16_t)phost->Control.pipe_size);
 800af7a:	79a3      	ldrb	r3, [r4, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800af7c:	9302      	str	r3, [sp, #8]
 800af7e:	2600      	movs	r6, #0
 800af80:	9601      	str	r6, [sp, #4]
 800af82:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800af8c:	2280      	movs	r2, #128	@ 0x80
 800af8e:	7921      	ldrb	r1, [r4, #4]
 800af90:	4620      	mov	r0, r4
 800af92:	f001 f847 	bl	800c024 <USBH_OpenPipe>
                            (uint16_t)phost->Control.pipe_size);
 800af96:	79a3      	ldrb	r3, [r4, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af98:	9302      	str	r3, [sp, #8]
 800af9a:	9601      	str	r6, [sp, #4]
 800af9c:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800afa6:	4632      	mov	r2, r6
 800afa8:	7961      	ldrb	r1, [r4, #5]
 800afaa:	4620      	mov	r0, r4
 800afac:	f001 f83a 	bl	800c024 <USBH_OpenPipe>
 800afb0:	e790      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800afb2:	486c      	ldr	r0, [pc, #432]	@ (800b164 <USBH_HandleEnum+0x35c>)
 800afb4:	f001 fd84 	bl	800cac0 <iprintf>
 800afb8:	4871      	ldr	r0, [pc, #452]	@ (800b180 <USBH_HandleEnum+0x378>)
 800afba:	f001 fd81 	bl	800cac0 <iprintf>
 800afbe:	200a      	movs	r0, #10
 800afc0:	f001 fd90 	bl	800cae4 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800afc4:	4869      	ldr	r0, [pc, #420]	@ (800b16c <USBH_HandleEnum+0x364>)
 800afc6:	f001 fd7b 	bl	800cac0 <iprintf>
 800afca:	200a      	movs	r0, #10
 800afcc:	f001 fd8a 	bl	800cae4 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800afd0:	230d      	movs	r3, #13
 800afd2:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 800afd4:	2300      	movs	r3, #0
 800afd6:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800afd8:	2501      	movs	r5, #1
 800afda:	e77b      	b.n	800aed4 <USBH_HandleEnum+0xcc>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800afdc:	2109      	movs	r1, #9
 800afde:	f000 ff2b 	bl	800be38 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800afe2:	b918      	cbnz	r0, 800afec <USBH_HandleEnum+0x1e4>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800afe4:	2304      	movs	r3, #4
 800afe6:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800afe8:	2501      	movs	r5, #1
 800afea:	e773      	b.n	800aed4 <USBH_HandleEnum+0xcc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afec:	2803      	cmp	r0, #3
 800afee:	d001      	beq.n	800aff4 <USBH_HandleEnum+0x1ec>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aff0:	2501      	movs	r5, #1
 800aff2:	e76f      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800aff4:	485b      	ldr	r0, [pc, #364]	@ (800b164 <USBH_HandleEnum+0x35c>)
 800aff6:	f001 fd63 	bl	800cac0 <iprintf>
 800affa:	4862      	ldr	r0, [pc, #392]	@ (800b184 <USBH_HandleEnum+0x37c>)
 800affc:	f001 fd60 	bl	800cac0 <iprintf>
 800b000:	200a      	movs	r0, #10
 800b002:	f001 fd6f 	bl	800cae4 <putchar>
        phost->device.EnumCnt++;
 800b006:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 800b00a:	3301      	adds	r3, #1
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b012:	2b03      	cmp	r3, #3
 800b014:	d909      	bls.n	800b02a <USBH_HandleEnum+0x222>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b016:	4855      	ldr	r0, [pc, #340]	@ (800b16c <USBH_HandleEnum+0x364>)
 800b018:	f001 fd52 	bl	800cac0 <iprintf>
 800b01c:	200a      	movs	r0, #10
 800b01e:	f001 fd61 	bl	800cae4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b022:	230d      	movs	r3, #13
 800b024:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b026:	2501      	movs	r5, #1
 800b028:	e754      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b02a:	7961      	ldrb	r1, [r4, #5]
 800b02c:	4620      	mov	r0, r4
 800b02e:	f001 f820 	bl	800c072 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b032:	7921      	ldrb	r1, [r4, #4]
 800b034:	4620      	mov	r0, r4
 800b036:	f001 f81c 	bl	800c072 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800b03e:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b040:	2501      	movs	r5, #1
 800b042:	e747      	b.n	800aed4 <USBH_HandleEnum+0xcc>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b044:	f8b0 133a 	ldrh.w	r1, [r0, #826]	@ 0x33a
 800b048:	f000 fef6 	bl	800be38 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800b04c:	b918      	cbnz	r0, 800b056 <USBH_HandleEnum+0x24e>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b04e:	2305      	movs	r3, #5
 800b050:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b052:	2501      	movs	r5, #1
 800b054:	e73e      	b.n	800aed4 <USBH_HandleEnum+0xcc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b056:	2803      	cmp	r0, #3
 800b058:	d001      	beq.n	800b05e <USBH_HandleEnum+0x256>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b05a:	2501      	movs	r5, #1
 800b05c:	e73a      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800b05e:	4841      	ldr	r0, [pc, #260]	@ (800b164 <USBH_HandleEnum+0x35c>)
 800b060:	f001 fd2e 	bl	800cac0 <iprintf>
 800b064:	4847      	ldr	r0, [pc, #284]	@ (800b184 <USBH_HandleEnum+0x37c>)
 800b066:	f001 fd2b 	bl	800cac0 <iprintf>
 800b06a:	200a      	movs	r0, #10
 800b06c:	f001 fd3a 	bl	800cae4 <putchar>
        phost->device.EnumCnt++;
 800b070:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 800b074:	3301      	adds	r3, #1
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b07c:	2b03      	cmp	r3, #3
 800b07e:	d909      	bls.n	800b094 <USBH_HandleEnum+0x28c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800b080:	483a      	ldr	r0, [pc, #232]	@ (800b16c <USBH_HandleEnum+0x364>)
 800b082:	f001 fd1d 	bl	800cac0 <iprintf>
 800b086:	200a      	movs	r0, #10
 800b088:	f001 fd2c 	bl	800cae4 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800b08c:	230d      	movs	r3, #13
 800b08e:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b090:	2501      	movs	r5, #1
 800b092:	e71f      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b094:	7961      	ldrb	r1, [r4, #5]
 800b096:	4620      	mov	r0, r4
 800b098:	f000 ffeb 	bl	800c072 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b09c:	7921      	ldrb	r1, [r4, #4]
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 ffe7 	bl	800c072 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800b0a8:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b0aa:	2501      	movs	r5, #1
 800b0ac:	e712      	b.n	800aed4 <USBH_HandleEnum+0xcc>
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b0ae:	f890 1334 	ldrb.w	r1, [r0, #820]	@ 0x334
 800b0b2:	b1f9      	cbz	r1, 800b0f4 <USBH_HandleEnum+0x2ec>
                                        phost->device.Data, 0xFFU);
 800b0b4:	f500 758e 	add.w	r5, r0, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b0b8:	23ff      	movs	r3, #255	@ 0xff
 800b0ba:	462a      	mov	r2, r5
 800b0bc:	f000 fee4 	bl	800be88 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800b0c0:	b118      	cbz	r0, 800b0ca <USBH_HandleEnum+0x2c2>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0c2:	2803      	cmp	r0, #3
 800b0c4:	d00c      	beq.n	800b0e0 <USBH_HandleEnum+0x2d8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b0c6:	2501      	movs	r5, #1
 800b0c8:	e704      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	482e      	ldr	r0, [pc, #184]	@ (800b188 <USBH_HandleEnum+0x380>)
 800b0ce:	f001 fcf7 	bl	800cac0 <iprintf>
 800b0d2:	200a      	movs	r0, #10
 800b0d4:	f001 fd06 	bl	800cae4 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0d8:	2306      	movs	r3, #6
 800b0da:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b0dc:	2501      	movs	r5, #1
 800b0de:	e6f9      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          USBH_UsrLog("Manufacturer : N/A");
 800b0e0:	482a      	ldr	r0, [pc, #168]	@ (800b18c <USBH_HandleEnum+0x384>)
 800b0e2:	f001 fced 	bl	800cac0 <iprintf>
 800b0e6:	200a      	movs	r0, #10
 800b0e8:	f001 fcfc 	bl	800cae4 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0ec:	2306      	movs	r3, #6
 800b0ee:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b0f0:	2501      	movs	r5, #1
 800b0f2:	e6ef      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_UsrLog("Manufacturer : N/A");
 800b0f4:	4825      	ldr	r0, [pc, #148]	@ (800b18c <USBH_HandleEnum+0x384>)
 800b0f6:	f001 fce3 	bl	800cac0 <iprintf>
 800b0fa:	200a      	movs	r0, #10
 800b0fc:	f001 fcf2 	bl	800cae4 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b100:	2306      	movs	r3, #6
 800b102:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b104:	2501      	movs	r5, #1
 800b106:	e6e5      	b.n	800aed4 <USBH_HandleEnum+0xcc>
      if (phost->device.DevDesc.iProduct != 0U)
 800b108:	f890 1335 	ldrb.w	r1, [r0, #821]	@ 0x335
 800b10c:	b1f9      	cbz	r1, 800b14e <USBH_HandleEnum+0x346>
                                        phost->device.Data, 0xFFU);
 800b10e:	f500 758e 	add.w	r5, r0, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b112:	23ff      	movs	r3, #255	@ 0xff
 800b114:	462a      	mov	r2, r5
 800b116:	f000 feb7 	bl	800be88 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800b11a:	b118      	cbz	r0, 800b124 <USBH_HandleEnum+0x31c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b11c:	2803      	cmp	r0, #3
 800b11e:	d00c      	beq.n	800b13a <USBH_HandleEnum+0x332>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b120:	2501      	movs	r5, #1
 800b122:	e6d7      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800b124:	4629      	mov	r1, r5
 800b126:	481a      	ldr	r0, [pc, #104]	@ (800b190 <USBH_HandleEnum+0x388>)
 800b128:	f001 fcca 	bl	800cac0 <iprintf>
 800b12c:	200a      	movs	r0, #10
 800b12e:	f001 fcd9 	bl	800cae4 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b132:	2307      	movs	r3, #7
 800b134:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b136:	2501      	movs	r5, #1
 800b138:	e6cc      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          USBH_UsrLog("Product : N/A");
 800b13a:	4816      	ldr	r0, [pc, #88]	@ (800b194 <USBH_HandleEnum+0x38c>)
 800b13c:	f001 fcc0 	bl	800cac0 <iprintf>
 800b140:	200a      	movs	r0, #10
 800b142:	f001 fccf 	bl	800cae4 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b146:	2307      	movs	r3, #7
 800b148:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b14a:	2501      	movs	r5, #1
 800b14c:	e6c2      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_UsrLog("Product : N/A");
 800b14e:	4811      	ldr	r0, [pc, #68]	@ (800b194 <USBH_HandleEnum+0x38c>)
 800b150:	f001 fcb6 	bl	800cac0 <iprintf>
 800b154:	200a      	movs	r0, #10
 800b156:	f001 fcc5 	bl	800cae4 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b15a:	2307      	movs	r3, #7
 800b15c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b15e:	2501      	movs	r5, #1
 800b160:	e6b8      	b.n	800aed4 <USBH_HandleEnum+0xcc>
 800b162:	bf00      	nop
 800b164:	0800d820 	.word	0x0800d820
 800b168:	0800d9d4 	.word	0x0800d9d4
 800b16c:	0800da08 	.word	0x0800da08
 800b170:	0800da48 	.word	0x0800da48
 800b174:	0800da54 	.word	0x0800da54
 800b178:	0800da60 	.word	0x0800da60
 800b17c:	0800da9c 	.word	0x0800da9c
 800b180:	0800dab4 	.word	0x0800dab4
 800b184:	0800dae8 	.word	0x0800dae8
 800b188:	0800db2c 	.word	0x0800db2c
 800b18c:	0800db40 	.word	0x0800db40
 800b190:	0800db54 	.word	0x0800db54
 800b194:	0800db64 	.word	0x0800db64
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b198:	f890 5336 	ldrb.w	r5, [r0, #822]	@ 0x336
 800b19c:	b1e5      	cbz	r5, 800b1d8 <USBH_HandleEnum+0x3d0>
                                        phost->device.Data, 0xFFU);
 800b19e:	f500 768e 	add.w	r6, r0, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b1a2:	23ff      	movs	r3, #255	@ 0xff
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f000 fe6e 	bl	800be88 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	b118      	cbz	r0, 800b1b8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1b0:	2803      	cmp	r0, #3
 800b1b2:	d009      	beq.n	800b1c8 <USBH_HandleEnum+0x3c0>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b1b4:	2501      	movs	r5, #1
 800b1b6:	e68d      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	480c      	ldr	r0, [pc, #48]	@ (800b1ec <USBH_HandleEnum+0x3e4>)
 800b1bc:	f001 fc80 	bl	800cac0 <iprintf>
 800b1c0:	200a      	movs	r0, #10
 800b1c2:	f001 fc8f 	bl	800cae4 <putchar>
          Status = USBH_OK;
 800b1c6:	e685      	b.n	800aed4 <USBH_HandleEnum+0xcc>
          USBH_UsrLog("Serial Number : N/A");
 800b1c8:	4809      	ldr	r0, [pc, #36]	@ (800b1f0 <USBH_HandleEnum+0x3e8>)
 800b1ca:	f001 fc79 	bl	800cac0 <iprintf>
 800b1ce:	200a      	movs	r0, #10
 800b1d0:	f001 fc88 	bl	800cae4 <putchar>
          Status = USBH_OK;
 800b1d4:	2500      	movs	r5, #0
 800b1d6:	e67d      	b.n	800aed4 <USBH_HandleEnum+0xcc>
        USBH_UsrLog("Serial Number : N/A");
 800b1d8:	4805      	ldr	r0, [pc, #20]	@ (800b1f0 <USBH_HandleEnum+0x3e8>)
 800b1da:	f001 fc71 	bl	800cac0 <iprintf>
 800b1de:	200a      	movs	r0, #10
 800b1e0:	f001 fc80 	bl	800cae4 <putchar>
        Status = USBH_OK;
 800b1e4:	e676      	b.n	800aed4 <USBH_HandleEnum+0xcc>
  switch (phost->EnumState)
 800b1e6:	2501      	movs	r5, #1
 800b1e8:	e674      	b.n	800aed4 <USBH_HandleEnum+0xcc>
 800b1ea:	bf00      	nop
 800b1ec:	0800db74 	.word	0x0800db74
 800b1f0:	0800db88 	.word	0x0800db88

0800b1f4 <USBH_Init>:
{
 800b1f4:	b570      	push	{r4, r5, r6, lr}
  if (phost == NULL)
 800b1f6:	b1d0      	cbz	r0, 800b22e <USBH_Init+0x3a>
 800b1f8:	460e      	mov	r6, r1
 800b1fa:	4604      	mov	r4, r0
  phost->id = id;
 800b1fc:	f880 2440 	strb.w	r2, [r0, #1088]	@ 0x440
  phost->pActiveClass = NULL;
 800b200:	2500      	movs	r5, #0
 800b202:	f8c0 53f0 	str.w	r5, [r0, #1008]	@ 0x3f0
  phost->ClassNumber = 0U;
 800b206:	f8c0 53f4 	str.w	r5, [r0, #1012]	@ 0x3f4
  (void)DeInitStateMachine(phost);
 800b20a:	f7ff fdb4 	bl	800ad76 <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 800b20e:	f884 5323 	strb.w	r5, [r4, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800b212:	f884 5320 	strb.w	r5, [r4, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b216:	f884 5321 	strb.w	r5, [r4, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b21a:	f884 5322 	strb.w	r5, [r4, #802]	@ 0x322
  if (pUsrFunc != NULL)
 800b21e:	b10e      	cbz	r6, 800b224 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 800b220:	f8c4 6448 	str.w	r6, [r4, #1096]	@ 0x448
  (void)USBH_LL_Init(phost);
 800b224:	4620      	mov	r0, r4
 800b226:	f001 fa0f 	bl	800c648 <USBH_LL_Init>
  return USBH_OK;
 800b22a:	2000      	movs	r0, #0
}
 800b22c:	bd70      	pop	{r4, r5, r6, pc}
    USBH_ErrLog("Invalid Host handle");
 800b22e:	4805      	ldr	r0, [pc, #20]	@ (800b244 <USBH_Init+0x50>)
 800b230:	f001 fc46 	bl	800cac0 <iprintf>
 800b234:	4804      	ldr	r0, [pc, #16]	@ (800b248 <USBH_Init+0x54>)
 800b236:	f001 fc43 	bl	800cac0 <iprintf>
 800b23a:	200a      	movs	r0, #10
 800b23c:	f001 fc52 	bl	800cae4 <putchar>
    return USBH_FAIL;
 800b240:	2002      	movs	r0, #2
 800b242:	e7f3      	b.n	800b22c <USBH_Init+0x38>
 800b244:	0800d820 	.word	0x0800d820
 800b248:	0800db9c 	.word	0x0800db9c

0800b24c <USBH_RegisterClass>:
{
 800b24c:	b508      	push	{r3, lr}
  if (pclass != NULL)
 800b24e:	b1b9      	cbz	r1, 800b280 <USBH_RegisterClass+0x34>
 800b250:	460a      	mov	r2, r1
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b252:	f8d0 33f4 	ldr.w	r3, [r0, #1012]	@ 0x3f4
 800b256:	b943      	cbnz	r3, 800b26a <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 800b258:	1c59      	adds	r1, r3, #1
 800b25a:	f8c0 13f4 	str.w	r1, [r0, #1012]	@ 0x3f4
 800b25e:	33fa      	adds	r3, #250	@ 0xfa
 800b260:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b264:	6042      	str	r2, [r0, #4]
      status = USBH_OK;
 800b266:	2000      	movs	r0, #0
}
 800b268:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
 800b26a:	480b      	ldr	r0, [pc, #44]	@ (800b298 <USBH_RegisterClass+0x4c>)
 800b26c:	f001 fc28 	bl	800cac0 <iprintf>
 800b270:	480a      	ldr	r0, [pc, #40]	@ (800b29c <USBH_RegisterClass+0x50>)
 800b272:	f001 fc25 	bl	800cac0 <iprintf>
 800b276:	200a      	movs	r0, #10
 800b278:	f001 fc34 	bl	800cae4 <putchar>
      status = USBH_FAIL;
 800b27c:	2002      	movs	r0, #2
 800b27e:	e7f3      	b.n	800b268 <USBH_RegisterClass+0x1c>
    USBH_ErrLog("Invalid Class handle");
 800b280:	4805      	ldr	r0, [pc, #20]	@ (800b298 <USBH_RegisterClass+0x4c>)
 800b282:	f001 fc1d 	bl	800cac0 <iprintf>
 800b286:	4806      	ldr	r0, [pc, #24]	@ (800b2a0 <USBH_RegisterClass+0x54>)
 800b288:	f001 fc1a 	bl	800cac0 <iprintf>
 800b28c:	200a      	movs	r0, #10
 800b28e:	f001 fc29 	bl	800cae4 <putchar>
    status = USBH_FAIL;
 800b292:	2002      	movs	r0, #2
 800b294:	e7e8      	b.n	800b268 <USBH_RegisterClass+0x1c>
 800b296:	bf00      	nop
 800b298:	0800d820 	.word	0x0800d820
 800b29c:	0800dbb0 	.word	0x0800dbb0
 800b2a0:	0800d840 	.word	0x0800d840

0800b2a4 <USBH_SelectInterface>:
{
 800b2a4:	b538      	push	{r3, r4, r5, lr}
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b2a6:	f890 333c 	ldrb.w	r3, [r0, #828]	@ 0x33c
 800b2aa:	428b      	cmp	r3, r1
 800b2ac:	d926      	bls.n	800b2fc <USBH_SelectInterface+0x58>
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	460d      	mov	r5, r1
    phost->device.current_interface = interface;
 800b2b2:	f880 1324 	strb.w	r1, [r0, #804]	@ 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800b2b6:	4817      	ldr	r0, [pc, #92]	@ (800b314 <USBH_SelectInterface+0x70>)
 800b2b8:	f001 fc02 	bl	800cac0 <iprintf>
 800b2bc:	200a      	movs	r0, #10
 800b2be:	f001 fc11 	bl	800cae4 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800b2c2:	232a      	movs	r3, #42	@ 0x2a
 800b2c4:	fb03 4405 	mla	r4, r3, r5, r4
 800b2c8:	f894 1347 	ldrb.w	r1, [r4, #839]	@ 0x347
 800b2cc:	4812      	ldr	r0, [pc, #72]	@ (800b318 <USBH_SelectInterface+0x74>)
 800b2ce:	f001 fbf7 	bl	800cac0 <iprintf>
 800b2d2:	200a      	movs	r0, #10
 800b2d4:	f001 fc06 	bl	800cae4 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800b2d8:	f894 1348 	ldrb.w	r1, [r4, #840]	@ 0x348
 800b2dc:	480f      	ldr	r0, [pc, #60]	@ (800b31c <USBH_SelectInterface+0x78>)
 800b2de:	f001 fbef 	bl	800cac0 <iprintf>
 800b2e2:	200a      	movs	r0, #10
 800b2e4:	f001 fbfe 	bl	800cae4 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800b2e8:	f894 1349 	ldrb.w	r1, [r4, #841]	@ 0x349
 800b2ec:	480c      	ldr	r0, [pc, #48]	@ (800b320 <USBH_SelectInterface+0x7c>)
 800b2ee:	f001 fbe7 	bl	800cac0 <iprintf>
 800b2f2:	200a      	movs	r0, #10
 800b2f4:	f001 fbf6 	bl	800cae4 <putchar>
  USBH_StatusTypeDef status = USBH_OK;
 800b2f8:	2000      	movs	r0, #0
}
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Cannot Select This Interface.");
 800b2fc:	4809      	ldr	r0, [pc, #36]	@ (800b324 <USBH_SelectInterface+0x80>)
 800b2fe:	f001 fbdf 	bl	800cac0 <iprintf>
 800b302:	4809      	ldr	r0, [pc, #36]	@ (800b328 <USBH_SelectInterface+0x84>)
 800b304:	f001 fbdc 	bl	800cac0 <iprintf>
 800b308:	200a      	movs	r0, #10
 800b30a:	f001 fbeb 	bl	800cae4 <putchar>
    status = USBH_FAIL;
 800b30e:	2002      	movs	r0, #2
 800b310:	e7f3      	b.n	800b2fa <USBH_SelectInterface+0x56>
 800b312:	bf00      	nop
 800b314:	0800dbcc 	.word	0x0800dbcc
 800b318:	0800dbec 	.word	0x0800dbec
 800b31c:	0800dbfc 	.word	0x0800dbfc
 800b320:	0800dc0c 	.word	0x0800dc0c
 800b324:	0800d820 	.word	0x0800d820
 800b328:	0800dc1c 	.word	0x0800dc1c

0800b32c <USBH_FindInterface>:
{
 800b32c:	b510      	push	{r4, lr}
 800b32e:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 800b330:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b332:	e00b      	b.n	800b34c <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b334:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800b338:	fb0c 4e0e 	mla	lr, ip, lr, r4
 800b33c:	f89e c349 	ldrb.w	ip, [lr, #841]	@ 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b340:	459c      	cmp	ip, r3
 800b342:	d01c      	beq.n	800b37e <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b344:	2bff      	cmp	r3, #255	@ 0xff
 800b346:	d01a      	beq.n	800b37e <USBH_FindInterface+0x52>
    if_ix++;
 800b348:	3001      	adds	r0, #1
 800b34a:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b34c:	2803      	cmp	r0, #3
 800b34e:	d815      	bhi.n	800b37c <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 800b350:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b352:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800b356:	fb0c 4c00 	mla	ip, ip, r0, r4
 800b35a:	f89c c347 	ldrb.w	ip, [ip, #839]	@ 0x347
 800b35e:	458c      	cmp	ip, r1
 800b360:	d001      	beq.n	800b366 <USBH_FindInterface+0x3a>
 800b362:	29ff      	cmp	r1, #255	@ 0xff
 800b364:	d1f0      	bne.n	800b348 <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b366:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800b36a:	fb0c 4c0e 	mla	ip, ip, lr, r4
 800b36e:	f89c c348 	ldrb.w	ip, [ip, #840]	@ 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b372:	4594      	cmp	ip, r2
 800b374:	d0de      	beq.n	800b334 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b376:	2aff      	cmp	r2, #255	@ 0xff
 800b378:	d1e6      	bne.n	800b348 <USBH_FindInterface+0x1c>
 800b37a:	e7db      	b.n	800b334 <USBH_FindInterface+0x8>
  return 0xFFU;
 800b37c:	20ff      	movs	r0, #255	@ 0xff
}
 800b37e:	bd10      	pop	{r4, pc}

0800b380 <USBH_Start>:
{
 800b380:	b510      	push	{r4, lr}
 800b382:	4604      	mov	r4, r0
  (void)USBH_LL_Start(phost);
 800b384:	f001 f9d3 	bl	800c72e <USBH_LL_Start>
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b388:	2101      	movs	r1, #1
 800b38a:	4620      	mov	r0, r4
 800b38c:	f001 f9a4 	bl	800c6d8 <USBH_LL_DriverVBUS>
}
 800b390:	2000      	movs	r0, #0
 800b392:	bd10      	pop	{r4, pc}

0800b394 <USBH_Process>:
{
 800b394:	b530      	push	{r4, r5, lr}
 800b396:	b087      	sub	sp, #28
 800b398:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b39a:	2302      	movs	r3, #2
 800b39c:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 800b3a0:	f890 3321 	ldrb.w	r3, [r0, #801]	@ 0x321
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d012      	beq.n	800b3d0 <USBH_Process+0x3c>
  switch (phost->gState)
 800b3aa:	7823      	ldrb	r3, [r4, #0]
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b0b      	cmp	r3, #11
 800b3b0:	f200 808f 	bhi.w	800b4d2 <USBH_Process+0x13e>
 800b3b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b3b8:	0027000f 	.word	0x0027000f
 800b3bc:	01940058 	.word	0x01940058
 800b3c0:	0090008d 	.word	0x0090008d
 800b3c4:	00b20140 	.word	0x00b20140
 800b3c8:	00cc00bc 	.word	0x00cc00bc
 800b3cc:	016c00f4 	.word	0x016c00f4
    phost->gState = HOST_DEV_DISCONNECTED;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	7003      	strb	r3, [r0, #0]
 800b3d4:	e7e9      	b.n	800b3aa <USBH_Process+0x16>
      if ((phost->device.is_connected) != 0U)
 800b3d6:	f894 3320 	ldrb.w	r3, [r4, #800]	@ 0x320
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d079      	beq.n	800b4d2 <USBH_Process+0x13e>
        USBH_UsrLog("USB Device Connected");
 800b3de:	48b1      	ldr	r0, [pc, #708]	@ (800b6a4 <USBH_Process+0x310>)
 800b3e0:	f001 fb6e 	bl	800cac0 <iprintf>
 800b3e4:	200a      	movs	r0, #10
 800b3e6:	f001 fb7d 	bl	800cae4 <putchar>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 800b3ee:	20c8      	movs	r0, #200	@ 0xc8
 800b3f0:	f001 f98f 	bl	800c712 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f001 f9aa 	bl	800c74e <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f884 331c 	strb.w	r3, [r4, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b400:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
 800b404:	e065      	b.n	800b4d2 <USBH_Process+0x13e>
      if (phost->device.PortEnabled == 1U)
 800b406:	f894 3323 	ldrb.w	r3, [r4, #803]	@ 0x323
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d00f      	beq.n	800b430 <USBH_Process+0x9c>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b410:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800b414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b418:	d91f      	bls.n	800b45a <USBH_Process+0xc6>
          phost->device.RstCnt++;
 800b41a:	f894 331f 	ldrb.w	r3, [r4, #799]	@ 0x31f
 800b41e:	3301      	adds	r3, #1
 800b420:	b2db      	uxtb	r3, r3
 800b422:	f884 331f 	strb.w	r3, [r4, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b426:	2b03      	cmp	r3, #3
 800b428:	d80e      	bhi.n	800b448 <USBH_Process+0xb4>
            phost->gState = HOST_IDLE;
 800b42a:	2300      	movs	r3, #0
 800b42c:	7023      	strb	r3, [r4, #0]
 800b42e:	e050      	b.n	800b4d2 <USBH_Process+0x13e>
        USBH_UsrLog("USB Device Reset Completed");
 800b430:	489d      	ldr	r0, [pc, #628]	@ (800b6a8 <USBH_Process+0x314>)
 800b432:	f001 fb45 	bl	800cac0 <iprintf>
 800b436:	200a      	movs	r0, #10
 800b438:	f001 fb54 	bl	800cae4 <putchar>
        phost->device.RstCnt = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	f884 331f 	strb.w	r3, [r4, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b442:	2302      	movs	r3, #2
 800b444:	7023      	strb	r3, [r4, #0]
 800b446:	e044      	b.n	800b4d2 <USBH_Process+0x13e>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800b448:	4898      	ldr	r0, [pc, #608]	@ (800b6ac <USBH_Process+0x318>)
 800b44a:	f001 fb39 	bl	800cac0 <iprintf>
 800b44e:	200a      	movs	r0, #10
 800b450:	f001 fb48 	bl	800cae4 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800b454:	230d      	movs	r3, #13
 800b456:	7023      	strb	r3, [r4, #0]
 800b458:	e03b      	b.n	800b4d2 <USBH_Process+0x13e>
          phost->Timeout += 10U;
 800b45a:	330a      	adds	r3, #10
 800b45c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
          USBH_Delay(10U);
 800b460:	200a      	movs	r0, #10
 800b462:	f001 f956 	bl	800c712 <USBH_Delay>
 800b466:	e034      	b.n	800b4d2 <USBH_Process+0x13e>
      if (phost->pUser != NULL)
 800b468:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800b46c:	b113      	cbz	r3, 800b474 <USBH_Process+0xe0>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b46e:	2104      	movs	r1, #4
 800b470:	4620      	mov	r0, r4
 800b472:	4798      	blx	r3
      USBH_Delay(100U);
 800b474:	2064      	movs	r0, #100	@ 0x64
 800b476:	f001 f94c 	bl	800c712 <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b47a:	4620      	mov	r0, r4
 800b47c:	f001 f910 	bl	800c6a0 <USBH_LL_GetSpeed>
 800b480:	f884 031d 	strb.w	r0, [r4, #797]	@ 0x31d
      phost->gState = HOST_ENUMERATION;
 800b484:	2305      	movs	r3, #5
 800b486:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b488:	2100      	movs	r1, #0
 800b48a:	4620      	mov	r0, r4
 800b48c:	f000 fddf 	bl	800c04e <USBH_AllocPipe>
 800b490:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b492:	2180      	movs	r1, #128	@ 0x80
 800b494:	4620      	mov	r0, r4
 800b496:	f000 fdda 	bl	800c04e <USBH_AllocPipe>
 800b49a:	4601      	mov	r1, r0
 800b49c:	7120      	strb	r0, [r4, #4]
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b49e:	79a3      	ldrb	r3, [r4, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b4a0:	9302      	str	r3, [sp, #8]
 800b4a2:	2500      	movs	r5, #0
 800b4a4:	9501      	str	r5, [sp, #4]
 800b4a6:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800b4b0:	2280      	movs	r2, #128	@ 0x80
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 fdb6 	bl	800c024 <USBH_OpenPipe>
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b4b8:	79a3      	ldrb	r3, [r4, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b4ba:	9302      	str	r3, [sp, #8]
 800b4bc:	9501      	str	r5, [sp, #4]
 800b4be:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800b4c8:	462a      	mov	r2, r5
 800b4ca:	7961      	ldrb	r1, [r4, #5]
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f000 fda9 	bl	800c024 <USBH_OpenPipe>
}
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	b007      	add	sp, #28
 800b4d6:	bd30      	pop	{r4, r5, pc}
      status = USBH_HandleEnum(phost);
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f7ff fc95 	bl	800ae08 <USBH_HandleEnum>
 800b4de:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 800b4e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1f3      	bne.n	800b4d2 <USBH_Process+0x13e>
        USBH_UsrLog("Enumeration done.");
 800b4ea:	4871      	ldr	r0, [pc, #452]	@ (800b6b0 <USBH_Process+0x31c>)
 800b4ec:	f001 fae8 	bl	800cac0 <iprintf>
 800b4f0:	200a      	movs	r0, #10
 800b4f2:	f001 faf7 	bl	800cae4 <putchar>
        phost->device.current_interface = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f884 3324 	strb.w	r3, [r4, #804]	@ 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b4fc:	f894 3337 	ldrb.w	r3, [r4, #823]	@ 0x337
 800b500:	2b01      	cmp	r3, #1
 800b502:	d002      	beq.n	800b50a <USBH_Process+0x176>
          phost->gState = HOST_INPUT;
 800b504:	2307      	movs	r3, #7
 800b506:	7023      	strb	r3, [r4, #0]
 800b508:	e7e3      	b.n	800b4d2 <USBH_Process+0x13e>
          USBH_UsrLog("This device has only 1 configuration.");
 800b50a:	486a      	ldr	r0, [pc, #424]	@ (800b6b4 <USBH_Process+0x320>)
 800b50c:	f001 fad8 	bl	800cac0 <iprintf>
 800b510:	200a      	movs	r0, #10
 800b512:	f001 fae7 	bl	800cae4 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800b516:	2308      	movs	r3, #8
 800b518:	7023      	strb	r3, [r4, #0]
 800b51a:	e7da      	b.n	800b4d2 <USBH_Process+0x13e>
      if (phost->pUser != NULL)
 800b51c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800b520:	2b00      	cmp	r3, #0
 800b522:	d0d6      	beq.n	800b4d2 <USBH_Process+0x13e>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b524:	2101      	movs	r1, #1
 800b526:	4620      	mov	r0, r4
 800b528:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b52a:	2308      	movs	r3, #8
 800b52c:	7023      	strb	r3, [r4, #0]
 800b52e:	e7d0      	b.n	800b4d2 <USBH_Process+0x13e>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b530:	f894 133d 	ldrb.w	r1, [r4, #829]	@ 0x33d
 800b534:	4620      	mov	r0, r4
 800b536:	f000 fce8 	bl	800bf0a <USBH_SetCfg>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d1c9      	bne.n	800b4d2 <USBH_Process+0x13e>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b53e:	2309      	movs	r3, #9
 800b540:	7023      	strb	r3, [r4, #0]
        USBH_UsrLog("Default configuration set.");
 800b542:	485d      	ldr	r0, [pc, #372]	@ (800b6b8 <USBH_Process+0x324>)
 800b544:	f001 fabc 	bl	800cac0 <iprintf>
 800b548:	200a      	movs	r0, #10
 800b54a:	f001 facb 	bl	800cae4 <putchar>
 800b54e:	e7c0      	b.n	800b4d2 <USBH_Process+0x13e>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b550:	f894 333f 	ldrb.w	r3, [r4, #831]	@ 0x33f
 800b554:	f013 0f20 	tst.w	r3, #32
 800b558:	d102      	bne.n	800b560 <USBH_Process+0x1cc>
        phost->gState = HOST_CHECK_CLASS;
 800b55a:	230a      	movs	r3, #10
 800b55c:	7023      	strb	r3, [r4, #0]
 800b55e:	e7b8      	b.n	800b4d2 <USBH_Process+0x13e>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b560:	2101      	movs	r1, #1
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fce2 	bl	800bf2c <USBH_SetFeature>
 800b568:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800b56c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b570:	b16b      	cbz	r3, 800b58e <USBH_Process+0x1fa>
        else if (status == USBH_NOT_SUPPORTED)
 800b572:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d1aa      	bne.n	800b4d2 <USBH_Process+0x13e>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800b57c:	484f      	ldr	r0, [pc, #316]	@ (800b6bc <USBH_Process+0x328>)
 800b57e:	f001 fa9f 	bl	800cac0 <iprintf>
 800b582:	200a      	movs	r0, #10
 800b584:	f001 faae 	bl	800cae4 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800b588:	230a      	movs	r3, #10
 800b58a:	7023      	strb	r3, [r4, #0]
 800b58c:	e7a1      	b.n	800b4d2 <USBH_Process+0x13e>
          USBH_UsrLog("Device remote wakeup enabled");
 800b58e:	484c      	ldr	r0, [pc, #304]	@ (800b6c0 <USBH_Process+0x32c>)
 800b590:	f001 fa96 	bl	800cac0 <iprintf>
 800b594:	200a      	movs	r0, #10
 800b596:	f001 faa5 	bl	800cae4 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800b59a:	230a      	movs	r3, #10
 800b59c:	7023      	strb	r3, [r4, #0]
 800b59e:	e798      	b.n	800b4d2 <USBH_Process+0x13e>
      if (phost->ClassNumber == 0U)
 800b5a0:	f8d4 33f4 	ldr.w	r3, [r4, #1012]	@ 0x3f4
 800b5a4:	b1e3      	cbz	r3, 800b5e0 <USBH_Process+0x24c>
        phost->pActiveClass = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b5ac:	b1fb      	cbz	r3, 800b5ee <USBH_Process+0x25a>
        if (phost->pActiveClass != NULL)
 800b5ae:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d037      	beq.n	800b626 <USBH_Process+0x292>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4798      	blx	r3
 800b5bc:	bb38      	cbnz	r0, 800b60e <USBH_Process+0x27a>
            phost->gState = HOST_CLASS_REQUEST;
 800b5be:	2306      	movs	r3, #6
 800b5c0:	7023      	strb	r3, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800b5c2:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800b5c6:	6819      	ldr	r1, [r3, #0]
 800b5c8:	483e      	ldr	r0, [pc, #248]	@ (800b6c4 <USBH_Process+0x330>)
 800b5ca:	f001 fa79 	bl	800cac0 <iprintf>
 800b5ce:	200a      	movs	r0, #10
 800b5d0:	f001 fa88 	bl	800cae4 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b5d4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800b5d8:	2103      	movs	r1, #3
 800b5da:	4620      	mov	r0, r4
 800b5dc:	4798      	blx	r3
 800b5de:	e778      	b.n	800b4d2 <USBH_Process+0x13e>
        USBH_UsrLog("No Class has been registered.");
 800b5e0:	4839      	ldr	r0, [pc, #228]	@ (800b6c8 <USBH_Process+0x334>)
 800b5e2:	f001 fa6d 	bl	800cac0 <iprintf>
 800b5e6:	200a      	movs	r0, #10
 800b5e8:	f001 fa7c 	bl	800cae4 <putchar>
 800b5ec:	e771      	b.n	800b4d2 <USBH_Process+0x13e>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b5ee:	f103 02fa 	add.w	r2, r3, #250	@ 0xfa
 800b5f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b5f6:	6852      	ldr	r2, [r2, #4]
 800b5f8:	7910      	ldrb	r0, [r2, #4]
 800b5fa:	f894 1347 	ldrb.w	r1, [r4, #839]	@ 0x347
 800b5fe:	4288      	cmp	r0, r1
 800b600:	d002      	beq.n	800b608 <USBH_Process+0x274>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b602:	3301      	adds	r3, #1
 800b604:	b2db      	uxtb	r3, r3
 800b606:	e7d1      	b.n	800b5ac <USBH_Process+0x218>
            phost->pActiveClass = phost->pClass[idx];
 800b608:	f8c4 23f0 	str.w	r2, [r4, #1008]	@ 0x3f0
            break;
 800b60c:	e7cf      	b.n	800b5ae <USBH_Process+0x21a>
            phost->gState = HOST_ABORT_STATE;
 800b60e:	230d      	movs	r3, #13
 800b610:	7023      	strb	r3, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800b612:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800b616:	6819      	ldr	r1, [r3, #0]
 800b618:	482c      	ldr	r0, [pc, #176]	@ (800b6cc <USBH_Process+0x338>)
 800b61a:	f001 fa51 	bl	800cac0 <iprintf>
 800b61e:	200a      	movs	r0, #10
 800b620:	f001 fa60 	bl	800cae4 <putchar>
 800b624:	e755      	b.n	800b4d2 <USBH_Process+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b626:	230d      	movs	r3, #13
 800b628:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog("No registered class for this device.");
 800b62a:	4829      	ldr	r0, [pc, #164]	@ (800b6d0 <USBH_Process+0x33c>)
 800b62c:	f001 fa48 	bl	800cac0 <iprintf>
 800b630:	200a      	movs	r0, #10
 800b632:	f001 fa57 	bl	800cae4 <putchar>
 800b636:	e74c      	b.n	800b4d2 <USBH_Process+0x13e>
      if (phost->pActiveClass != NULL)
 800b638:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800b63c:	b1e3      	cbz	r3, 800b678 <USBH_Process+0x2e4>
        status = phost->pActiveClass->Requests(phost);
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	4620      	mov	r0, r4
 800b642:	4798      	blx	r3
 800b644:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800b648:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b64c:	b913      	cbnz	r3, 800b654 <USBH_Process+0x2c0>
          phost->gState = HOST_CLASS;
 800b64e:	230b      	movs	r3, #11
 800b650:	7023      	strb	r3, [r4, #0]
 800b652:	e73e      	b.n	800b4d2 <USBH_Process+0x13e>
        else if (status == USBH_FAIL)
 800b654:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	f47f af39 	bne.w	800b4d2 <USBH_Process+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b660:	230d      	movs	r3, #13
 800b662:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800b664:	481b      	ldr	r0, [pc, #108]	@ (800b6d4 <USBH_Process+0x340>)
 800b666:	f001 fa2b 	bl	800cac0 <iprintf>
 800b66a:	481b      	ldr	r0, [pc, #108]	@ (800b6d8 <USBH_Process+0x344>)
 800b66c:	f001 fa28 	bl	800cac0 <iprintf>
 800b670:	200a      	movs	r0, #10
 800b672:	f001 fa37 	bl	800cae4 <putchar>
 800b676:	e72c      	b.n	800b4d2 <USBH_Process+0x13e>
        phost->gState = HOST_ABORT_STATE;
 800b678:	230d      	movs	r3, #13
 800b67a:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800b67c:	4815      	ldr	r0, [pc, #84]	@ (800b6d4 <USBH_Process+0x340>)
 800b67e:	f001 fa1f 	bl	800cac0 <iprintf>
 800b682:	4816      	ldr	r0, [pc, #88]	@ (800b6dc <USBH_Process+0x348>)
 800b684:	f001 fa1c 	bl	800cac0 <iprintf>
 800b688:	200a      	movs	r0, #10
 800b68a:	f001 fa2b 	bl	800cae4 <putchar>
 800b68e:	e720      	b.n	800b4d2 <USBH_Process+0x13e>
      if (phost->pActiveClass != NULL)
 800b690:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800b694:	2b00      	cmp	r3, #0
 800b696:	f43f af1c 	beq.w	800b4d2 <USBH_Process+0x13e>
        phost->pActiveClass->BgndProcess(phost);
 800b69a:	695b      	ldr	r3, [r3, #20]
 800b69c:	4620      	mov	r0, r4
 800b69e:	4798      	blx	r3
 800b6a0:	e717      	b.n	800b4d2 <USBH_Process+0x13e>
 800b6a2:	bf00      	nop
 800b6a4:	0800dc3c 	.word	0x0800dc3c
 800b6a8:	0800dc54 	.word	0x0800dc54
 800b6ac:	0800dc70 	.word	0x0800dc70
 800b6b0:	0800dc9c 	.word	0x0800dc9c
 800b6b4:	0800dcb0 	.word	0x0800dcb0
 800b6b8:	0800dcd8 	.word	0x0800dcd8
 800b6bc:	0800dd14 	.word	0x0800dd14
 800b6c0:	0800dcf4 	.word	0x0800dcf4
 800b6c4:	0800dd60 	.word	0x0800dd60
 800b6c8:	0800dd40 	.word	0x0800dd40
 800b6cc:	0800dd74 	.word	0x0800dd74
 800b6d0:	0800dd94 	.word	0x0800dd94
 800b6d4:	0800d820 	.word	0x0800d820
 800b6d8:	0800ddbc 	.word	0x0800ddbc
 800b6dc:	0800dde4 	.word	0x0800dde4
      phost->device.is_disconnected = 0U;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f884 3321 	strb.w	r3, [r4, #801]	@ 0x321
      (void)DeInitStateMachine(phost);
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f7ff fb45 	bl	800ad76 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 800b6ec:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
 800b6f0:	b12b      	cbz	r3, 800b6fe <USBH_Process+0x36a>
        phost->pActiveClass->DeInit(phost);
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
      if (phost->pUser != NULL)
 800b6fe:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800b702:	b113      	cbz	r3, 800b70a <USBH_Process+0x376>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b704:	2105      	movs	r1, #5
 800b706:	4620      	mov	r0, r4
 800b708:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
 800b70a:	480b      	ldr	r0, [pc, #44]	@ (800b738 <USBH_Process+0x3a4>)
 800b70c:	f001 f9d8 	bl	800cac0 <iprintf>
 800b710:	200a      	movs	r0, #10
 800b712:	f001 f9e7 	bl	800cae4 <putchar>
      if (phost->device.is_ReEnumerated == 1U)
 800b716:	f894 3322 	ldrb.w	r3, [r4, #802]	@ 0x322
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d003      	beq.n	800b728 <USBH_Process+0x394>
        (void)USBH_LL_Start(phost);
 800b720:	4620      	mov	r0, r4
 800b722:	f001 f804 	bl	800c72e <USBH_LL_Start>
 800b726:	e6d4      	b.n	800b4d2 <USBH_Process+0x13e>
        phost->device.is_ReEnumerated = 0U;
 800b728:	2300      	movs	r3, #0
 800b72a:	f884 3322 	strb.w	r3, [r4, #802]	@ 0x322
        (void)USBH_Start(phost);
 800b72e:	4620      	mov	r0, r4
 800b730:	f7ff fe26 	bl	800b380 <USBH_Start>
 800b734:	e6cd      	b.n	800b4d2 <USBH_Process+0x13e>
 800b736:	bf00      	nop
 800b738:	0800ddfc 	.word	0x0800ddfc

0800b73c <USBH_LL_SetTimer>:
  phost->Timer = time;
 800b73c:	f8c0 1438 	str.w	r1, [r0, #1080]	@ 0x438
}
 800b740:	4770      	bx	lr

0800b742 <USBH_LL_IncTimer>:
{
 800b742:	b508      	push	{r3, lr}
  phost->Timer++;
 800b744:	f8d0 2438 	ldr.w	r2, [r0, #1080]	@ 0x438
 800b748:	3201      	adds	r2, #1
 800b74a:	f8c0 2438 	str.w	r2, [r0, #1080]	@ 0x438
  USBH_HandleSof(phost);
 800b74e:	f7ff fb05 	bl	800ad5c <USBH_HandleSof>
}
 800b752:	bd08      	pop	{r3, pc}

0800b754 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 800b754:	2301      	movs	r3, #1
 800b756:	f880 3323 	strb.w	r3, [r0, #803]	@ 0x323
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
}
 800b75a:	4770      	bx	lr

0800b75c <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 800b75c:	2300      	movs	r3, #0
 800b75e:	f880 3323 	strb.w	r3, [r0, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800b762:	2301      	movs	r3, #1
 800b764:	f880 3321 	strb.w	r3, [r0, #801]	@ 0x321

  return;
}
 800b768:	4770      	bx	lr

0800b76a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b76a:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 800b76c:	2201      	movs	r2, #1
 800b76e:	f880 2320 	strb.w	r2, [r0, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b772:	2000      	movs	r0, #0
 800b774:	f883 0321 	strb.w	r0, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b778:	f883 0322 	strb.w	r0, [r3, #802]	@ 0x322
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
}
 800b77c:	4770      	bx	lr

0800b77e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b77e:	b538      	push	{r3, r4, r5, lr}
 800b780:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b782:	2301      	movs	r3, #1
 800b784:	f880 3321 	strb.w	r3, [r0, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b788:	2500      	movs	r5, #0
 800b78a:	f880 5320 	strb.w	r5, [r0, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b78e:	f880 5323 	strb.w	r5, [r0, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b792:	f000 ffd4 	bl	800c73e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b796:	7921      	ldrb	r1, [r4, #4]
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 fc6a 	bl	800c072 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b79e:	7961      	ldrb	r1, [r4, #5]
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 fc66 	bl	800c072 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
}
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b7ac <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b7ac:	4603      	mov	r3, r0
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
  USBH_StatusTypeDef status = USBH_OK;

  if (buf == NULL)
 800b7ae:	468c      	mov	ip, r1
 800b7b0:	2900      	cmp	r1, #0
 800b7b2:	d070      	beq.n	800b896 <USBH_ParseDevDesc+0xea>
  {
    return USBH_FAIL;
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b7b4:	7809      	ldrb	r1, [r1, #0]
 800b7b6:	f880 1326 	strb.w	r1, [r0, #806]	@ 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b7ba:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800b7be:	f880 1327 	strb.w	r1, [r0, #807]	@ 0x327
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b7c2:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800b7c6:	f89c 0003 	ldrb.w	r0, [ip, #3]
 800b7ca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800b7ce:	f8a3 1328 	strh.w	r1, [r3, #808]	@ 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b7d2:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800b7d6:	f883 132a 	strb.w	r1, [r3, #810]	@ 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b7da:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800b7de:	f883 132b 	strb.w	r1, [r3, #811]	@ 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b7e2:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800b7e6:	f883 132c 	strb.w	r1, [r3, #812]	@ 0x32c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b7ea:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800b7ee:	f883 132d 	strb.w	r1, [r3, #813]	@ 0x32d

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b7f2:	f893 031d 	ldrb.w	r0, [r3, #797]	@ 0x31d
 800b7f6:	2801      	cmp	r0, #1
 800b7f8:	d92d      	bls.n	800b856 <USBH_ParseDevDesc+0xaa>
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
        break;
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b7fa:	2802      	cmp	r0, #2
 800b7fc:	d040      	beq.n	800b880 <USBH_ParseDevDesc+0xd4>
      dev_desc->bMaxPacketSize = 8U;
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b7fe:	2003      	movs	r0, #3
  }

  if (length > 8U)
 800b800:	2a08      	cmp	r2, #8
 800b802:	d949      	bls.n	800b898 <USBH_ParseDevDesc+0xec>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b804:	f89c 2008 	ldrb.w	r2, [ip, #8]
 800b808:	f89c 1009 	ldrb.w	r1, [ip, #9]
 800b80c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b810:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
    dev_desc->idProduct          = LE16(buf + 10U);
 800b814:	f89c 200a 	ldrb.w	r2, [ip, #10]
 800b818:	f89c 100b 	ldrb.w	r1, [ip, #11]
 800b81c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b820:	f8a3 2330 	strh.w	r2, [r3, #816]	@ 0x330
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b824:	f89c 200c 	ldrb.w	r2, [ip, #12]
 800b828:	f89c 100d 	ldrb.w	r1, [ip, #13]
 800b82c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b830:	f8a3 2332 	strh.w	r2, [r3, #818]	@ 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b834:	f89c 200e 	ldrb.w	r2, [ip, #14]
 800b838:	f883 2334 	strb.w	r2, [r3, #820]	@ 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b83c:	f89c 200f 	ldrb.w	r2, [ip, #15]
 800b840:	f883 2335 	strb.w	r2, [r3, #821]	@ 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b844:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800b848:	f883 2336 	strb.w	r2, [r3, #822]	@ 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b84c:	f89c 2011 	ldrb.w	r2, [ip, #17]
 800b850:	f883 2337 	strb.w	r2, [r3, #823]	@ 0x337
 800b854:	4770      	bx	lr
    switch (dev_desc->bMaxPacketSize)
 800b856:	2920      	cmp	r1, #32
 800b858:	d80b      	bhi.n	800b872 <USBH_ParseDevDesc+0xc6>
 800b85a:	2908      	cmp	r1, #8
 800b85c:	d30b      	bcc.n	800b876 <USBH_ParseDevDesc+0xca>
 800b85e:	3908      	subs	r1, #8
 800b860:	b2c9      	uxtb	r1, r1
 800b862:	480e      	ldr	r0, [pc, #56]	@ (800b89c <USBH_ParseDevDesc+0xf0>)
 800b864:	fa20 f101 	lsr.w	r1, r0, r1
 800b868:	f011 0f01 	tst.w	r1, #1
 800b86c:	d003      	beq.n	800b876 <USBH_ParseDevDesc+0xca>
 800b86e:	2000      	movs	r0, #0
 800b870:	e7c6      	b.n	800b800 <USBH_ParseDevDesc+0x54>
 800b872:	2940      	cmp	r1, #64	@ 0x40
 800b874:	d00b      	beq.n	800b88e <USBH_ParseDevDesc+0xe2>
        dev_desc->bMaxPacketSize = 8U;
 800b876:	2108      	movs	r1, #8
 800b878:	f883 132d 	strb.w	r1, [r3, #813]	@ 0x32d
  USBH_StatusTypeDef status = USBH_OK;
 800b87c:	2000      	movs	r0, #0
        break;
 800b87e:	e7bf      	b.n	800b800 <USBH_ParseDevDesc+0x54>
    if (dev_desc->bMaxPacketSize != 8U)
 800b880:	2908      	cmp	r1, #8
 800b882:	d006      	beq.n	800b892 <USBH_ParseDevDesc+0xe6>
      dev_desc->bMaxPacketSize = 8U;
 800b884:	2108      	movs	r1, #8
 800b886:	f883 132d 	strb.w	r1, [r3, #813]	@ 0x32d
  USBH_StatusTypeDef status = USBH_OK;
 800b88a:	2000      	movs	r0, #0
 800b88c:	e7b8      	b.n	800b800 <USBH_ParseDevDesc+0x54>
    switch (dev_desc->bMaxPacketSize)
 800b88e:	2000      	movs	r0, #0
 800b890:	e7b6      	b.n	800b800 <USBH_ParseDevDesc+0x54>
  USBH_StatusTypeDef status = USBH_OK;
 800b892:	2000      	movs	r0, #0
 800b894:	e7b4      	b.n	800b800 <USBH_ParseDevDesc+0x54>
    return USBH_FAIL;
 800b896:	2002      	movs	r0, #2
  }

  return status;
}
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	01000101 	.word	0x01000101

0800b8a0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b8a0:	780b      	ldrb	r3, [r1, #0]
 800b8a2:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b8a4:	784b      	ldrb	r3, [r1, #1]
 800b8a6:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b8a8:	788b      	ldrb	r3, [r1, #2]
 800b8aa:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b8ac:	78cb      	ldrb	r3, [r1, #3]
 800b8ae:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b8b0:	790b      	ldrb	r3, [r1, #4]
 800b8b2:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b8b4:	794b      	ldrb	r3, [r1, #5]
 800b8b6:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b8b8:	798b      	ldrb	r3, [r1, #6]
 800b8ba:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b8bc:	79cb      	ldrb	r3, [r1, #7]
 800b8be:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b8c0:	7a0b      	ldrb	r3, [r1, #8]
 800b8c2:	7203      	strb	r3, [r0, #8]
}
 800b8c4:	4770      	bx	lr

0800b8c6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	4686      	mov	lr, r0
  USBH_StatusTypeDef status = USBH_OK;

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b8ca:	7813      	ldrb	r3, [r2, #0]
 800b8cc:	700b      	strb	r3, [r1, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b8ce:	7853      	ldrb	r3, [r2, #1]
 800b8d0:	704b      	strb	r3, [r1, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b8d2:	7893      	ldrb	r3, [r2, #2]
 800b8d4:	708b      	strb	r3, [r1, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b8d6:	f892 c003 	ldrb.w	ip, [r2, #3]
 800b8da:	f881 c003 	strb.w	ip, [r1, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b8de:	7913      	ldrb	r3, [r2, #4]
 800b8e0:	7950      	ldrb	r0, [r2, #5]
 800b8e2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b8e6:	808b      	strh	r3, [r1, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b8e8:	7994      	ldrb	r4, [r2, #6]
 800b8ea:	718c      	strb	r4, [r1, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b8ec:	1e5a      	subs	r2, r3, #1
 800b8ee:	b292      	uxth	r2, r2
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b8f0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b8f4:	d20c      	bcs.n	800b910 <USBH_ParseEPDesc+0x4a>
  USBH_StatusTypeDef status = USBH_OK;
 800b8f6:	2000      	movs	r0, #0
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
  {
    status = USBH_NOT_SUPPORTED;
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b8f8:	f89e 231d 	ldrb.w	r2, [lr, #797]	@ 0x31d
 800b8fc:	b9ca      	cbnz	r2, 800b932 <USBH_ParseEPDesc+0x6c>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b8fe:	f00c 0c03 	and.w	ip, ip, #3
 800b902:	f1bc 0f03 	cmp.w	ip, #3
 800b906:	d846      	bhi.n	800b996 <USBH_ParseEPDesc+0xd0>
 800b908:	e8df f00c 	tbb	[pc, ip]
 800b90c:	0d040d09 	.word	0x0d040d09
    status = USBH_NOT_SUPPORTED;
 800b910:	2003      	movs	r0, #3
 800b912:	e7f1      	b.n	800b8f8 <USBH_ParseEPDesc+0x32>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b918:	d910      	bls.n	800b93c <USBH_ParseEPDesc+0x76>
      {
        status = USBH_NOT_SUPPORTED;
 800b91a:	2003      	movs	r0, #3
 800b91c:	e00e      	b.n	800b93c <USBH_ParseEPDesc+0x76>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b91e:	2b40      	cmp	r3, #64	@ 0x40
 800b920:	d90c      	bls.n	800b93c <USBH_ParseEPDesc+0x76>
      {
        status = USBH_NOT_SUPPORTED;
 800b922:	2003      	movs	r0, #3
 800b924:	e00a      	b.n	800b93c <USBH_ParseEPDesc+0x76>
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b926:	3c01      	subs	r4, #1
 800b928:	b2e4      	uxtb	r4, r4
 800b92a:	2c0f      	cmp	r4, #15
 800b92c:	d906      	bls.n	800b93c <USBH_ParseEPDesc+0x76>
      {
        status = USBH_NOT_SUPPORTED;
 800b92e:	2003      	movs	r0, #3
 800b930:	e004      	b.n	800b93c <USBH_ParseEPDesc+0x76>
    else
    {
      status = USBH_NOT_SUPPORTED;
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b932:	2a01      	cmp	r2, #1
 800b934:	d003      	beq.n	800b93e <USBH_ParseEPDesc+0x78>
    else
    {
      status = USBH_NOT_SUPPORTED;
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b936:	2a02      	cmp	r2, #2
 800b938:	d01c      	beq.n	800b974 <USBH_ParseEPDesc+0xae>
      status = USBH_NOT_SUPPORTED;
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b93a:	2003      	movs	r0, #3
  }

  return status;
}
 800b93c:	bd10      	pop	{r4, pc}
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b93e:	f00c 0c03 	and.w	ip, ip, #3
 800b942:	f1bc 0f03 	cmp.w	ip, #3
 800b946:	d828      	bhi.n	800b99a <USBH_ParseEPDesc+0xd4>
 800b948:	e8df f00c 	tbb	[pc, ip]
 800b94c:	0e020602 	.word	0x0e020602
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b950:	2b40      	cmp	r3, #64	@ 0x40
 800b952:	d9f3      	bls.n	800b93c <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800b954:	2003      	movs	r0, #3
 800b956:	e7f1      	b.n	800b93c <USBH_ParseEPDesc+0x76>
      if ((ep_descriptor->bInterval == 0U) ||
 800b958:	3c01      	subs	r4, #1
 800b95a:	b2e4      	uxtb	r4, r4
 800b95c:	2c0f      	cmp	r4, #15
 800b95e:	d81e      	bhi.n	800b99e <USBH_ParseEPDesc+0xd8>
          (ep_descriptor->bInterval > 0x10U) ||
 800b960:	2b40      	cmp	r3, #64	@ 0x40
 800b962:	d9eb      	bls.n	800b93c <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800b964:	2003      	movs	r0, #3
 800b966:	e7e9      	b.n	800b93c <USBH_ParseEPDesc+0x76>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b968:	b1dc      	cbz	r4, 800b9a2 <USBH_ParseEPDesc+0xdc>
 800b96a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b96e:	d3e5      	bcc.n	800b93c <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800b970:	4660      	mov	r0, ip
 800b972:	e7e3      	b.n	800b93c <USBH_ParseEPDesc+0x76>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b974:	f01c 0c03 	ands.w	ip, ip, #3
 800b978:	d103      	bne.n	800b982 <USBH_ParseEPDesc+0xbc>
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b97a:	2b08      	cmp	r3, #8
 800b97c:	d0de      	beq.n	800b93c <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800b97e:	2003      	movs	r0, #3
 800b980:	e7dc      	b.n	800b93c <USBH_ParseEPDesc+0x76>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b982:	f1bc 0f03 	cmp.w	ip, #3
 800b986:	d001      	beq.n	800b98c <USBH_ParseEPDesc+0xc6>
      status = USBH_NOT_SUPPORTED;
 800b988:	2003      	movs	r0, #3
 800b98a:	e7d7      	b.n	800b93c <USBH_ParseEPDesc+0x76>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b98c:	b15c      	cbz	r4, 800b9a6 <USBH_ParseEPDesc+0xe0>
 800b98e:	2b08      	cmp	r3, #8
 800b990:	d9d4      	bls.n	800b93c <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800b992:	4660      	mov	r0, ip
 800b994:	e7d2      	b.n	800b93c <USBH_ParseEPDesc+0x76>
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b996:	2003      	movs	r0, #3
 800b998:	e7d0      	b.n	800b93c <USBH_ParseEPDesc+0x76>
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b99a:	2003      	movs	r0, #3
 800b99c:	e7ce      	b.n	800b93c <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800b99e:	2003      	movs	r0, #3
 800b9a0:	e7cc      	b.n	800b93c <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800b9a2:	4660      	mov	r0, ip
 800b9a4:	e7ca      	b.n	800b93c <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800b9a6:	4660      	mov	r0, ip
 800b9a8:	e7c8      	b.n	800b93c <USBH_ParseEPDesc+0x76>

0800b9aa <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b9aa:	7843      	ldrb	r3, [r0, #1]
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d000      	beq.n	800b9b2 <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 800b9b0:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b9b2:	7803      	ldrb	r3, [r0, #0]
 800b9b4:	3b02      	subs	r3, #2
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	bf28      	it	cs
 800b9ba:	461a      	movcs	r2, r3
 800b9bc:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e007      	b.n	800b9d2 <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 800b9c2:	eb00 0c03 	add.w	ip, r0, r3
 800b9c6:	f89c c002 	ldrb.w	ip, [ip, #2]
 800b9ca:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800b9ce:	3302      	adds	r3, #2
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d3f5      	bcc.n	800b9c2 <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	700b      	strb	r3, [r1, #0]
}
 800b9da:	e7e9      	b.n	800b9b0 <USBH_ParseStringDesc+0x6>

0800b9dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b9dc:	b530      	push	{r4, r5, lr}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800b9e2:	7e05      	ldrb	r5, [r0, #24]
 800b9e4:	1e6b      	subs	r3, r5, #1
 800b9e6:	2b0a      	cmp	r3, #10
 800b9e8:	f200 80e6 	bhi.w	800bbb8 <USBH_HandleControl+0x1dc>
 800b9ec:	e8df f003 	tbb	[pc, r3]
 800b9f0:	40341006 	.word	0x40341006
 800b9f4:	897d6154 	.word	0x897d6154
 800b9f8:	a99c      	.short	0xa99c
 800b9fa:	c0          	.byte	0xc0
 800b9fb:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b9fc:	7942      	ldrb	r2, [r0, #5]
 800b9fe:	f100 0110 	add.w	r1, r0, #16
 800ba02:	f000 fab6 	bl	800bf72 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ba06:	2302      	movs	r3, #2
 800ba08:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	b003      	add	sp, #12
 800ba0e:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba10:	7941      	ldrb	r1, [r0, #5]
 800ba12:	f000 fe5b 	bl	800c6cc <USBH_LL_GetURBState>
 800ba16:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800ba18:	2801      	cmp	r0, #1
 800ba1a:	d008      	beq.n	800ba2e <USBH_HandleControl+0x52>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ba1c:	2802      	cmp	r0, #2
 800ba1e:	bf18      	it	ne
 800ba20:	2804      	cmpne	r0, #4
 800ba22:	f040 80cb 	bne.w	800bbbc <USBH_HandleControl+0x1e0>
          phost->Control.state = CTRL_ERROR;
 800ba26:	230b      	movs	r3, #11
 800ba28:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba2a:	2501      	movs	r5, #1
 800ba2c:	e7ed      	b.n	800ba0a <USBH_HandleControl+0x2e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ba2e:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba30:	8ae2      	ldrh	r2, [r4, #22]
 800ba32:	b142      	cbz	r2, 800ba46 <USBH_HandleControl+0x6a>
          if (direction == USB_D2H)
 800ba34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba38:	d102      	bne.n	800ba40 <USBH_HandleControl+0x64>
            phost->Control.state = CTRL_DATA_OUT;
 800ba3a:	2305      	movs	r3, #5
 800ba3c:	7623      	strb	r3, [r4, #24]
 800ba3e:	e7e4      	b.n	800ba0a <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_DATA_IN;
 800ba40:	2303      	movs	r3, #3
 800ba42:	7623      	strb	r3, [r4, #24]
 800ba44:	e7e1      	b.n	800ba0a <USBH_HandleControl+0x2e>
          if (direction == USB_D2H)
 800ba46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba4a:	d102      	bne.n	800ba52 <USBH_HandleControl+0x76>
            phost->Control.state = CTRL_STATUS_IN;
 800ba4c:	2307      	movs	r3, #7
 800ba4e:	7623      	strb	r3, [r4, #24]
 800ba50:	e7db      	b.n	800ba0a <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_STATUS_OUT;
 800ba52:	2309      	movs	r3, #9
 800ba54:	7623      	strb	r3, [r4, #24]
 800ba56:	e7d8      	b.n	800ba0a <USBH_HandleControl+0x2e>
      phost->Control.timer = (uint16_t)phost->Timer;
 800ba58:	f8d0 3438 	ldr.w	r3, [r0, #1080]	@ 0x438
 800ba5c:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ba5e:	7903      	ldrb	r3, [r0, #4]
 800ba60:	8982      	ldrh	r2, [r0, #12]
 800ba62:	6881      	ldr	r1, [r0, #8]
 800ba64:	f000 faac 	bl	800bfc0 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ba68:	2304      	movs	r3, #4
 800ba6a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba6c:	2501      	movs	r5, #1
      break;
 800ba6e:	e7cc      	b.n	800ba0a <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba70:	7901      	ldrb	r1, [r0, #4]
 800ba72:	f000 fe2b 	bl	800c6cc <USBH_LL_GetURBState>
 800ba76:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800ba78:	2801      	cmp	r0, #1
 800ba7a:	d006      	beq.n	800ba8a <USBH_HandleControl+0xae>
      else if (URB_Status == USBH_URB_STALL)
 800ba7c:	2805      	cmp	r0, #5
 800ba7e:	f000 809f 	beq.w	800bbc0 <USBH_HandleControl+0x1e4>
        if (URB_Status == USBH_URB_ERROR)
 800ba82:	2804      	cmp	r0, #4
 800ba84:	d004      	beq.n	800ba90 <USBH_HandleControl+0xb4>
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba86:	2501      	movs	r5, #1
 800ba88:	e7bf      	b.n	800ba0a <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 800ba8a:	2309      	movs	r3, #9
 800ba8c:	7623      	strb	r3, [r4, #24]
 800ba8e:	e7bc      	b.n	800ba0a <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 800ba90:	230b      	movs	r3, #11
 800ba92:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba94:	2501      	movs	r5, #1
 800ba96:	e7b8      	b.n	800ba0a <USBH_HandleControl+0x2e>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ba98:	2501      	movs	r5, #1
 800ba9a:	9500      	str	r5, [sp, #0]
 800ba9c:	7943      	ldrb	r3, [r0, #5]
 800ba9e:	8982      	ldrh	r2, [r0, #12]
 800baa0:	6881      	ldr	r1, [r0, #8]
 800baa2:	f000 fa77 	bl	800bf94 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800baa6:	f8d4 3438 	ldr.w	r3, [r4, #1080]	@ 0x438
 800baaa:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800baac:	2306      	movs	r3, #6
 800baae:	7623      	strb	r3, [r4, #24]
      break;
 800bab0:	e7ab      	b.n	800ba0a <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bab2:	7941      	ldrb	r1, [r0, #5]
 800bab4:	f000 fe0a 	bl	800c6cc <USBH_LL_GetURBState>
 800bab8:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800baba:	1e43      	subs	r3, r0, #1
 800babc:	2b04      	cmp	r3, #4
 800babe:	f200 8081 	bhi.w	800bbc4 <USBH_HandleControl+0x1e8>
 800bac2:	e8df f003 	tbb	[pc, r3]
 800bac6:	0a03      	.short	0x0a03
 800bac8:	0e7f      	.short	0x0e7f
 800baca:	06          	.byte	0x06
 800bacb:	00          	.byte	0x00
        phost->Control.state = CTRL_STATUS_IN;
 800bacc:	2307      	movs	r3, #7
 800bace:	7623      	strb	r3, [r4, #24]
 800bad0:	e79b      	b.n	800ba0a <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STALLED;
 800bad2:	230c      	movs	r3, #12
 800bad4:	7623      	strb	r3, [r4, #24]
        status = USBH_NOT_SUPPORTED;
 800bad6:	2503      	movs	r5, #3
 800bad8:	e797      	b.n	800ba0a <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_DATA_OUT;
 800bada:	2305      	movs	r3, #5
 800badc:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bade:	2501      	movs	r5, #1
 800bae0:	e793      	b.n	800ba0a <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 800bae2:	230b      	movs	r3, #11
 800bae4:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 800bae6:	2502      	movs	r5, #2
 800bae8:	e78f      	b.n	800ba0a <USBH_HandleControl+0x2e>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800baea:	7903      	ldrb	r3, [r0, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	4611      	mov	r1, r2
 800baf0:	f000 fa66 	bl	800bfc0 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800baf4:	f8d4 3438 	ldr.w	r3, [r4, #1080]	@ 0x438
 800baf8:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bafa:	2308      	movs	r3, #8
 800bafc:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bafe:	2501      	movs	r5, #1
      break;
 800bb00:	e783      	b.n	800ba0a <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb02:	7901      	ldrb	r1, [r0, #4]
 800bb04:	f000 fde2 	bl	800c6cc <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800bb08:	2801      	cmp	r0, #1
 800bb0a:	d005      	beq.n	800bb18 <USBH_HandleControl+0x13c>
      else if (URB_Status == USBH_URB_ERROR)
 800bb0c:	2804      	cmp	r0, #4
 800bb0e:	d007      	beq.n	800bb20 <USBH_HandleControl+0x144>
        if (URB_Status == USBH_URB_STALL)
 800bb10:	2805      	cmp	r0, #5
 800bb12:	d059      	beq.n	800bbc8 <USBH_HandleControl+0x1ec>
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb14:	2501      	movs	r5, #1
 800bb16:	e778      	b.n	800ba0a <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 800bb18:	230d      	movs	r3, #13
 800bb1a:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 800bb1c:	2500      	movs	r5, #0
 800bb1e:	e774      	b.n	800ba0a <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 800bb20:	230b      	movs	r3, #11
 800bb22:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb24:	2501      	movs	r5, #1
 800bb26:	e770      	b.n	800ba0a <USBH_HandleControl+0x2e>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bb28:	2501      	movs	r5, #1
 800bb2a:	9500      	str	r5, [sp, #0]
 800bb2c:	7943      	ldrb	r3, [r0, #5]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4611      	mov	r1, r2
 800bb32:	f000 fa2f 	bl	800bf94 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800bb36:	f8d4 3438 	ldr.w	r3, [r4, #1080]	@ 0x438
 800bb3a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bb3c:	230a      	movs	r3, #10
 800bb3e:	7623      	strb	r3, [r4, #24]
      break;
 800bb40:	e763      	b.n	800ba0a <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb42:	7941      	ldrb	r1, [r0, #5]
 800bb44:	f000 fdc2 	bl	800c6cc <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800bb48:	2801      	cmp	r0, #1
 800bb4a:	d005      	beq.n	800bb58 <USBH_HandleControl+0x17c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb4c:	2802      	cmp	r0, #2
 800bb4e:	d007      	beq.n	800bb60 <USBH_HandleControl+0x184>
        if (URB_Status == USBH_URB_ERROR)
 800bb50:	2804      	cmp	r0, #4
 800bb52:	d009      	beq.n	800bb68 <USBH_HandleControl+0x18c>
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb54:	2501      	movs	r5, #1
 800bb56:	e758      	b.n	800ba0a <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 800bb58:	230d      	movs	r3, #13
 800bb5a:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 800bb5c:	2500      	movs	r5, #0
 800bb5e:	e754      	b.n	800ba0a <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb60:	2309      	movs	r3, #9
 800bb62:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb64:	2501      	movs	r5, #1
 800bb66:	e750      	b.n	800ba0a <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 800bb68:	230b      	movs	r3, #11
 800bb6a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb6c:	2501      	movs	r5, #1
 800bb6e:	e74c      	b.n	800ba0a <USBH_HandleControl+0x2e>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb70:	7e43      	ldrb	r3, [r0, #25]
 800bb72:	3301      	adds	r3, #1
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	7643      	strb	r3, [r0, #25]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d803      	bhi.n	800bb84 <USBH_HandleControl+0x1a8>
        phost->Control.state = CTRL_SETUP;
 800bb7c:	2501      	movs	r5, #1
 800bb7e:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 800bb80:	7085      	strb	r5, [r0, #2]
 800bb82:	e742      	b.n	800ba0a <USBH_HandleControl+0x2e>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb84:	f8d0 3448 	ldr.w	r3, [r0, #1096]	@ 0x448
 800bb88:	2106      	movs	r1, #6
 800bb8a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bb8c:	2500      	movs	r5, #0
 800bb8e:	7665      	strb	r5, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
 800bb90:	480e      	ldr	r0, [pc, #56]	@ (800bbcc <USBH_HandleControl+0x1f0>)
 800bb92:	f000 ff95 	bl	800cac0 <iprintf>
 800bb96:	480e      	ldr	r0, [pc, #56]	@ (800bbd0 <USBH_HandleControl+0x1f4>)
 800bb98:	f000 ff92 	bl	800cac0 <iprintf>
 800bb9c:	200a      	movs	r0, #10
 800bb9e:	f000 ffa1 	bl	800cae4 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bba2:	7961      	ldrb	r1, [r4, #5]
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 fa64 	bl	800c072 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbaa:	7921      	ldrb	r1, [r4, #4]
 800bbac:	4620      	mov	r0, r4
 800bbae:	f000 fa60 	bl	800c072 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bbb2:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 800bbb4:	2502      	movs	r5, #2
 800bbb6:	e728      	b.n	800ba0a <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 800bbb8:	2501      	movs	r5, #1
 800bbba:	e726      	b.n	800ba0a <USBH_HandleControl+0x2e>
  USBH_StatusTypeDef status = USBH_BUSY;
 800bbbc:	2501      	movs	r5, #1
 800bbbe:	e724      	b.n	800ba0a <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 800bbc0:	2503      	movs	r5, #3
 800bbc2:	e722      	b.n	800ba0a <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbc4:	2501      	movs	r5, #1
 800bbc6:	e720      	b.n	800ba0a <USBH_HandleControl+0x2e>
          status = USBH_NOT_SUPPORTED;
 800bbc8:	2503      	movs	r5, #3
 800bbca:	e71e      	b.n	800ba0a <USBH_HandleControl+0x2e>
 800bbcc:	0800d820 	.word	0x0800d820
 800bbd0:	0800de14 	.word	0x0800de14

0800bbd4 <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bbd4:	880b      	ldrh	r3, [r1, #0]
 800bbd6:	7802      	ldrb	r2, [r0, #0]
 800bbd8:	4413      	add	r3, r2
 800bbda:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bbdc:	7803      	ldrb	r3, [r0, #0]
}
 800bbde:	4418      	add	r0, r3
 800bbe0:	4770      	bx	lr

0800bbe2 <USBH_ParseCfgDesc>:
{
 800bbe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbe6:	b083      	sub	sp, #12
  if (buf == NULL)
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	f000 80b2 	beq.w	800bd52 <USBH_ParseCfgDesc+0x170>
 800bbee:	4605      	mov	r5, r0
 800bbf0:	460c      	mov	r4, r1
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bbf2:	780b      	ldrb	r3, [r1, #0]
 800bbf4:	2b09      	cmp	r3, #9
 800bbf6:	d001      	beq.n	800bbfc <USBH_ParseCfgDesc+0x1a>
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bbf8:	2309      	movs	r3, #9
 800bbfa:	700b      	strb	r3, [r1, #0]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bbfc:	7823      	ldrb	r3, [r4, #0]
 800bbfe:	f885 3338 	strb.w	r3, [r5, #824]	@ 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bc02:	7863      	ldrb	r3, [r4, #1]
 800bc04:	f885 3339 	strb.w	r3, [r5, #825]	@ 0x339
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bc08:	78a3      	ldrb	r3, [r4, #2]
 800bc0a:	78e1      	ldrb	r1, [r4, #3]
 800bc0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bc10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc14:	bf28      	it	cs
 800bc16:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bc1a:	f8a5 333a 	strh.w	r3, [r5, #826]	@ 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bc1e:	7923      	ldrb	r3, [r4, #4]
 800bc20:	f885 333c 	strb.w	r3, [r5, #828]	@ 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bc24:	7963      	ldrb	r3, [r4, #5]
 800bc26:	f885 333d 	strb.w	r3, [r5, #829]	@ 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bc2a:	79a3      	ldrb	r3, [r4, #6]
 800bc2c:	f885 333e 	strb.w	r3, [r5, #830]	@ 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bc30:	79e3      	ldrb	r3, [r4, #7]
 800bc32:	f885 333f 	strb.w	r3, [r5, #831]	@ 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bc36:	7a23      	ldrb	r3, [r4, #8]
 800bc38:	f885 3340 	strb.w	r3, [r5, #832]	@ 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bc3c:	2a09      	cmp	r2, #9
 800bc3e:	f240 808a 	bls.w	800bd56 <USBH_ParseCfgDesc+0x174>
    ptr = USB_LEN_CFG_DESC;
 800bc42:	2309      	movs	r3, #9
 800bc44:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 800bc48:	2600      	movs	r6, #0
  USBH_StatusTypeDef           status = USBH_OK;
 800bc4a:	4637      	mov	r7, r6
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bc4c:	2e03      	cmp	r6, #3
 800bc4e:	d877      	bhi.n	800bd40 <USBH_ParseCfgDesc+0x15e>
 800bc50:	f8b5 233a 	ldrh.w	r2, [r5, #826]	@ 0x33a
 800bc54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d971      	bls.n	800bd40 <USBH_ParseCfgDesc+0x15e>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bc5c:	f10d 0106 	add.w	r1, sp, #6
 800bc60:	4620      	mov	r0, r4
 800bc62:	f7ff ffb7 	bl	800bbd4 <USBH_GetNextDesc>
 800bc66:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bc68:	7843      	ldrb	r3, [r0, #1]
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	d1ee      	bne.n	800bc4c <USBH_ParseCfgDesc+0x6a>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bc6e:	7803      	ldrb	r3, [r0, #0]
 800bc70:	2b09      	cmp	r3, #9
 800bc72:	d001      	beq.n	800bc78 <USBH_ParseCfgDesc+0x96>
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bc74:	2309      	movs	r3, #9
 800bc76:	7003      	strb	r3, [r0, #0]
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bc78:	46b1      	mov	r9, r6
 800bc7a:	f505 704e 	add.w	r0, r5, #824	@ 0x338
 800bc7e:	232a      	movs	r3, #42	@ 0x2a
 800bc80:	fb06 f303 	mul.w	r3, r6, r3
 800bc84:	3308      	adds	r3, #8
 800bc86:	4418      	add	r0, r3
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bc88:	4621      	mov	r1, r4
 800bc8a:	3002      	adds	r0, #2
 800bc8c:	f7ff fe08 	bl	800b8a0 <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 800bc90:	f04f 0800 	mov.w	r8, #0
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc94:	e014      	b.n	800bcc0 <USBH_ParseCfgDesc+0xde>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bc96:	2307      	movs	r3, #7
 800bc98:	7023      	strb	r3, [r4, #0]
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bc9a:	f505 714e 	add.w	r1, r5, #824	@ 0x338
 800bc9e:	f108 0801 	add.w	r8, r8, #1
 800bca2:	232a      	movs	r3, #42	@ 0x2a
 800bca4:	fb03 f309 	mul.w	r3, r3, r9
 800bca8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bcac:	3308      	adds	r3, #8
 800bcae:	4419      	add	r1, r3
            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bcb0:	4622      	mov	r2, r4
 800bcb2:	3104      	adds	r1, #4
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7ff fe06 	bl	800b8c6 <USBH_ParseEPDesc>
 800bcba:	4607      	mov	r7, r0
            ep_ix++;
 800bcbc:	fa5f f888 	uxtb.w	r8, r8
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bcc0:	f1b8 0f03 	cmp.w	r8, #3
 800bcc4:	d832      	bhi.n	800bd2c <USBH_ParseCfgDesc+0x14a>
 800bcc6:	232a      	movs	r3, #42	@ 0x2a
 800bcc8:	fb03 5309 	mla	r3, r3, r9, r5
 800bccc:	f893 3346 	ldrb.w	r3, [r3, #838]	@ 0x346
 800bcd0:	4543      	cmp	r3, r8
 800bcd2:	d92b      	bls.n	800bd2c <USBH_ParseCfgDesc+0x14a>
 800bcd4:	f8b5 233a 	ldrh.w	r2, [r5, #826]	@ 0x33a
 800bcd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d925      	bls.n	800bd2c <USBH_ParseCfgDesc+0x14a>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bce0:	f10d 0106 	add.w	r1, sp, #6
 800bce4:	4620      	mov	r0, r4
 800bce6:	f7ff ff75 	bl	800bbd4 <USBH_GetNextDesc>
 800bcea:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcec:	7843      	ldrb	r3, [r0, #1]
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	d1e6      	bne.n	800bcc0 <USBH_ParseCfgDesc+0xde>
            if ((pif->bInterfaceClass == 0x01U) &&
 800bcf2:	232a      	movs	r3, #42	@ 0x2a
 800bcf4:	fb03 5309 	mla	r3, r3, r9, r5
 800bcf8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d1ca      	bne.n	800bc96 <USBH_ParseCfgDesc+0xb4>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bd00:	232a      	movs	r3, #42	@ 0x2a
 800bd02:	fb03 5309 	mla	r3, r3, r9, r5
 800bd06:	f893 3348 	ldrb.w	r3, [r3, #840]	@ 0x348
 800bd0a:	3b02      	subs	r3, #2
 800bd0c:	b2db      	uxtb	r3, r3
            if ((pif->bInterfaceClass == 0x01U) &&
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d8c1      	bhi.n	800bc96 <USBH_ParseCfgDesc+0xb4>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd12:	232a      	movs	r3, #42	@ 0x2a
 800bd14:	fb03 5309 	mla	r3, r3, r9, r5
 800bd18:	f893 3349 	ldrb.w	r3, [r3, #841]	@ 0x349
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1bc      	bne.n	800bc9a <USBH_ParseCfgDesc+0xb8>
 800bd20:	7803      	ldrb	r3, [r0, #0]
 800bd22:	2b09      	cmp	r3, #9
 800bd24:	d0b9      	beq.n	800bc9a <USBH_ParseCfgDesc+0xb8>
                pdesc->bLength = 0x09U;
 800bd26:	2309      	movs	r3, #9
 800bd28:	7003      	strb	r3, [r0, #0]
 800bd2a:	e7b6      	b.n	800bc9a <USBH_ParseCfgDesc+0xb8>
        if (ep_ix < pif->bNumEndpoints)
 800bd2c:	232a      	movs	r3, #42	@ 0x2a
 800bd2e:	fb03 5909 	mla	r9, r3, r9, r5
 800bd32:	f899 3346 	ldrb.w	r3, [r9, #838]	@ 0x346
 800bd36:	4543      	cmp	r3, r8
 800bd38:	d812      	bhi.n	800bd60 <USBH_ParseCfgDesc+0x17e>
        if_ix++;
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	b2f6      	uxtb	r6, r6
 800bd3e:	e785      	b.n	800bc4c <USBH_ParseCfgDesc+0x6a>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bd40:	f895 333c 	ldrb.w	r3, [r5, #828]	@ 0x33c
 800bd44:	2b04      	cmp	r3, #4
 800bd46:	bf28      	it	cs
 800bd48:	2304      	movcs	r3, #4
 800bd4a:	42b3      	cmp	r3, r6
 800bd4c:	d904      	bls.n	800bd58 <USBH_ParseCfgDesc+0x176>
      return USBH_NOT_SUPPORTED;
 800bd4e:	2703      	movs	r7, #3
 800bd50:	e002      	b.n	800bd58 <USBH_ParseCfgDesc+0x176>
    return USBH_FAIL;
 800bd52:	2702      	movs	r7, #2
 800bd54:	e000      	b.n	800bd58 <USBH_ParseCfgDesc+0x176>
  USBH_StatusTypeDef           status = USBH_OK;
 800bd56:	2700      	movs	r7, #0
}
 800bd58:	4638      	mov	r0, r7
 800bd5a:	b003      	add	sp, #12
 800bd5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return USBH_NOT_SUPPORTED;
 800bd60:	2703      	movs	r7, #3
 800bd62:	e7f9      	b.n	800bd58 <USBH_ParseCfgDesc+0x176>

0800bd64 <USBH_CtlReq>:
{
 800bd64:	b510      	push	{r4, lr}
 800bd66:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800bd68:	7880      	ldrb	r0, [r0, #2]
 800bd6a:	2801      	cmp	r0, #1
 800bd6c:	d003      	beq.n	800bd76 <USBH_CtlReq+0x12>
 800bd6e:	2802      	cmp	r0, #2
 800bd70:	d008      	beq.n	800bd84 <USBH_CtlReq+0x20>
 800bd72:	2001      	movs	r0, #1
 800bd74:	e005      	b.n	800bd82 <USBH_CtlReq+0x1e>
      phost->Control.buff = buff;
 800bd76:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 800bd78:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_WAIT;
 800bd7e:	2302      	movs	r3, #2
 800bd80:	70a3      	strb	r3, [r4, #2]
}
 800bd82:	bd10      	pop	{r4, pc}
      status = USBH_HandleControl(phost);
 800bd84:	4620      	mov	r0, r4
 800bd86:	f7ff fe29 	bl	800b9dc <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bd8a:	2803      	cmp	r0, #3
 800bd8c:	bf18      	it	ne
 800bd8e:	2800      	cmpne	r0, #0
 800bd90:	d104      	bne.n	800bd9c <USBH_CtlReq+0x38>
        phost->RequestState = CMD_SEND;
 800bd92:	2301      	movs	r3, #1
 800bd94:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800bd96:	2300      	movs	r3, #0
 800bd98:	7623      	strb	r3, [r4, #24]
 800bd9a:	e7f2      	b.n	800bd82 <USBH_CtlReq+0x1e>
      else if (status == USBH_FAIL)
 800bd9c:	2802      	cmp	r0, #2
 800bd9e:	d1f0      	bne.n	800bd82 <USBH_CtlReq+0x1e>
        phost->RequestState = CMD_SEND;
 800bda0:	2301      	movs	r3, #1
 800bda2:	70a3      	strb	r3, [r4, #2]
 800bda4:	e7ed      	b.n	800bd82 <USBH_CtlReq+0x1e>

0800bda6 <USBH_GetDescriptor>:
{
 800bda6:	b508      	push	{r3, lr}
 800bda8:	468e      	mov	lr, r1
 800bdaa:	4694      	mov	ip, r2
 800bdac:	4619      	mov	r1, r3
 800bdae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 800bdb2:	7883      	ldrb	r3, [r0, #2]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d002      	beq.n	800bdbe <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 800bdb8:	f7ff ffd4 	bl	800bd64 <USBH_CtlReq>
}
 800bdbc:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bdbe:	f06e 0e7f 	orn	lr, lr, #127	@ 0x7f
 800bdc2:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bdc6:	2306      	movs	r3, #6
 800bdc8:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bdca:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bdce:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 800bdd2:	f5bc 7f40 	cmp.w	ip, #768	@ 0x300
 800bdd6:	d003      	beq.n	800bde0 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 800bddc:	82c2      	strh	r2, [r0, #22]
 800bdde:	e7eb      	b.n	800bdb8 <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bde0:	f240 4309 	movw	r3, #1033	@ 0x409
 800bde4:	8283      	strh	r3, [r0, #20]
 800bde6:	e7f9      	b.n	800bddc <USBH_GetDescriptor+0x36>

0800bde8 <USBH_Get_DevDesc>:
{
 800bde8:	b570      	push	{r4, r5, r6, lr}
 800bdea:	b082      	sub	sp, #8
  if (length > sizeof(phost->device.Data))
 800bdec:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bdf0:	d80d      	bhi.n	800be0e <USBH_Get_DevDesc+0x26>
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	460c      	mov	r4, r1
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bdf6:	f500 768e 	add.w	r6, r0, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bdfa:	9100      	str	r1, [sp, #0]
 800bdfc:	4633      	mov	r3, r6
 800bdfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be02:	2100      	movs	r1, #0
 800be04:	f7ff ffcf 	bl	800bda6 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800be08:	b160      	cbz	r0, 800be24 <USBH_Get_DevDesc+0x3c>
}
 800be0a:	b002      	add	sp, #8
 800be0c:	bd70      	pop	{r4, r5, r6, pc}
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800be0e:	4808      	ldr	r0, [pc, #32]	@ (800be30 <USBH_Get_DevDesc+0x48>)
 800be10:	f000 fe56 	bl	800cac0 <iprintf>
 800be14:	4807      	ldr	r0, [pc, #28]	@ (800be34 <USBH_Get_DevDesc+0x4c>)
 800be16:	f000 fe53 	bl	800cac0 <iprintf>
 800be1a:	200a      	movs	r0, #10
 800be1c:	f000 fe62 	bl	800cae4 <putchar>
    return USBH_NOT_SUPPORTED;
 800be20:	2003      	movs	r0, #3
 800be22:	e7f2      	b.n	800be0a <USBH_Get_DevDesc+0x22>
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800be24:	4622      	mov	r2, r4
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	f7ff fcbf 	bl	800b7ac <USBH_ParseDevDesc>
 800be2e:	e7ec      	b.n	800be0a <USBH_Get_DevDesc+0x22>
 800be30:	0800d820 	.word	0x0800d820
 800be34:	0800de3c 	.word	0x0800de3c

0800be38 <USBH_Get_CfgDesc>:
{
 800be38:	b570      	push	{r4, r5, r6, lr}
 800be3a:	b082      	sub	sp, #8
  if (length > sizeof(phost->device.CfgDesc_Raw))
 800be3c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800be40:	d80d      	bhi.n	800be5e <USBH_Get_CfgDesc+0x26>
 800be42:	4604      	mov	r4, r0
 800be44:	460d      	mov	r5, r1
 800be46:	f100 061c 	add.w	r6, r0, #28
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800be4a:	9100      	str	r1, [sp, #0]
 800be4c:	4633      	mov	r3, r6
 800be4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be52:	2100      	movs	r1, #0
 800be54:	f7ff ffa7 	bl	800bda6 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800be58:	b160      	cbz	r0, 800be74 <USBH_Get_CfgDesc+0x3c>
}
 800be5a:	b002      	add	sp, #8
 800be5c:	bd70      	pop	{r4, r5, r6, pc}
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800be5e:	4808      	ldr	r0, [pc, #32]	@ (800be80 <USBH_Get_CfgDesc+0x48>)
 800be60:	f000 fe2e 	bl	800cac0 <iprintf>
 800be64:	4807      	ldr	r0, [pc, #28]	@ (800be84 <USBH_Get_CfgDesc+0x4c>)
 800be66:	f000 fe2b 	bl	800cac0 <iprintf>
 800be6a:	200a      	movs	r0, #10
 800be6c:	f000 fe3a 	bl	800cae4 <putchar>
    return USBH_NOT_SUPPORTED;
 800be70:	2003      	movs	r0, #3
 800be72:	e7f2      	b.n	800be5a <USBH_Get_CfgDesc+0x22>
    status = USBH_ParseCfgDesc(phost, pData, length);
 800be74:	462a      	mov	r2, r5
 800be76:	4631      	mov	r1, r6
 800be78:	4620      	mov	r0, r4
 800be7a:	f7ff feb2 	bl	800bbe2 <USBH_ParseCfgDesc>
 800be7e:	e7ec      	b.n	800be5a <USBH_Get_CfgDesc+0x22>
 800be80:	0800d820 	.word	0x0800d820
 800be84:	0800de80 	.word	0x0800de80

0800be88 <USBH_Get_StringDesc>:
{
 800be88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be8a:	b083      	sub	sp, #12
  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800be8c:	4615      	mov	r5, r2
 800be8e:	fab2 f282 	clz	r2, r2
 800be92:	0952      	lsrs	r2, r2, #5
 800be94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be98:	bf88      	it	hi
 800be9a:	f042 0201 	orrhi.w	r2, r2, #1
 800be9e:	b972      	cbnz	r2, 800bebe <USBH_Get_StringDesc+0x36>
 800bea0:	461c      	mov	r4, r3
                              phost->device.Data, length);
 800bea2:	f500 778e 	add.w	r7, r0, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	463b      	mov	r3, r7
 800beaa:	f441 7240 	orr.w	r2, r1, #768	@ 0x300
 800beae:	2100      	movs	r1, #0
 800beb0:	f7ff ff79 	bl	800bda6 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800beb4:	4606      	mov	r6, r0
 800beb6:	b168      	cbz	r0, 800bed4 <USBH_Get_StringDesc+0x4c>
}
 800beb8:	4630      	mov	r0, r6
 800beba:	b003      	add	sp, #12
 800bebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800bebe:	4808      	ldr	r0, [pc, #32]	@ (800bee0 <USBH_Get_StringDesc+0x58>)
 800bec0:	f000 fdfe 	bl	800cac0 <iprintf>
 800bec4:	4807      	ldr	r0, [pc, #28]	@ (800bee4 <USBH_Get_StringDesc+0x5c>)
 800bec6:	f000 fdfb 	bl	800cac0 <iprintf>
 800beca:	200a      	movs	r0, #10
 800becc:	f000 fe0a 	bl	800cae4 <putchar>
    return USBH_NOT_SUPPORTED;
 800bed0:	2603      	movs	r6, #3
 800bed2:	e7f1      	b.n	800beb8 <USBH_Get_StringDesc+0x30>
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bed4:	4622      	mov	r2, r4
 800bed6:	4629      	mov	r1, r5
 800bed8:	4638      	mov	r0, r7
 800beda:	f7ff fd66 	bl	800b9aa <USBH_ParseStringDesc>
 800bede:	e7eb      	b.n	800beb8 <USBH_Get_StringDesc+0x30>
 800bee0:	0800d820 	.word	0x0800d820
 800bee4:	0800decc 	.word	0x0800decc

0800bee8 <USBH_SetAddress>:
{
 800bee8:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 800beea:	7883      	ldrb	r3, [r0, #2]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d004      	beq.n	800befa <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 800bef0:	2200      	movs	r2, #0
 800bef2:	4611      	mov	r1, r2
 800bef4:	f7ff ff36 	bl	800bd64 <USBH_CtlReq>
}
 800bef8:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800befa:	2300      	movs	r3, #0
 800befc:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800befe:	2205      	movs	r2, #5
 800bf00:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bf02:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf04:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf06:	82c3      	strh	r3, [r0, #22]
 800bf08:	e7f2      	b.n	800bef0 <USBH_SetAddress+0x8>

0800bf0a <USBH_SetCfg>:
{
 800bf0a:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 800bf0c:	7883      	ldrb	r3, [r0, #2]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d004      	beq.n	800bf1c <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 800bf12:	2200      	movs	r2, #0
 800bf14:	4611      	mov	r1, r2
 800bf16:	f7ff ff25 	bl	800bd64 <USBH_CtlReq>
}
 800bf1a:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bf20:	2209      	movs	r2, #9
 800bf22:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bf24:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf26:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf28:	82c3      	strh	r3, [r0, #22]
 800bf2a:	e7f2      	b.n	800bf12 <USBH_SetCfg+0x8>

0800bf2c <USBH_SetFeature>:
{
 800bf2c:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 800bf2e:	7883      	ldrb	r3, [r0, #2]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d004      	beq.n	800bf3e <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 800bf34:	2200      	movs	r2, #0
 800bf36:	4611      	mov	r1, r2
 800bf38:	f7ff ff14 	bl	800bd64 <USBH_CtlReq>
}
 800bf3c:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bf3e:	2300      	movs	r3, #0
 800bf40:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bf42:	2203      	movs	r2, #3
 800bf44:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bf46:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf48:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf4a:	82c3      	strh	r3, [r0, #22]
 800bf4c:	e7f2      	b.n	800bf34 <USBH_SetFeature+0x8>

0800bf4e <USBH_ClrFeature>:
{
 800bf4e:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 800bf50:	7883      	ldrb	r3, [r0, #2]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d004      	beq.n	800bf60 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 800bf56:	2200      	movs	r2, #0
 800bf58:	4611      	mov	r1, r2
 800bf5a:	f7ff ff03 	bl	800bd64 <USBH_CtlReq>
}
 800bf5e:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bf60:	2302      	movs	r3, #2
 800bf62:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bf64:	2301      	movs	r3, #1
 800bf66:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bf6c:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf6e:	82c3      	strh	r3, [r0, #22]
 800bf70:	e7f1      	b.n	800bf56 <USBH_ClrFeature+0x8>

0800bf72 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bf72:	b510      	push	{r4, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	460b      	mov	r3, r1
 800bf78:	4611      	mov	r1, r2

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf7a:	2400      	movs	r4, #0
 800bf7c:	9403      	str	r4, [sp, #12]
 800bf7e:	2208      	movs	r2, #8
 800bf80:	9202      	str	r2, [sp, #8]
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	9400      	str	r4, [sp, #0]
 800bf86:	4623      	mov	r3, r4
 800bf88:	4622      	mov	r2, r4
 800bf8a:	f000 fc03 	bl	800c794 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 800bf8e:	4620      	mov	r0, r4
 800bf90:	b004      	add	sp, #16
 800bf92:	bd10      	pop	{r4, pc}

0800bf94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bf94:	b530      	push	{r4, r5, lr}
 800bf96:	b085      	sub	sp, #20
 800bf98:	460c      	mov	r4, r1
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bfa0:	f890 531d 	ldrb.w	r5, [r0, #797]	@ 0x31d
 800bfa4:	b105      	cbz	r5, 800bfa8 <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 800bfa6:	2300      	movs	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfa8:	9303      	str	r3, [sp, #12]
 800bfaa:	9202      	str	r2, [sp, #8]
 800bfac:	9401      	str	r4, [sp, #4]
 800bfae:	2301      	movs	r3, #1
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	f000 fbed 	bl	800c794 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800bfba:	2000      	movs	r0, #0
 800bfbc:	b005      	add	sp, #20
 800bfbe:	bd30      	pop	{r4, r5, pc}

0800bfc0 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bfc0:	b530      	push	{r4, r5, lr}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	460d      	mov	r5, r1
 800bfc6:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfc8:	2400      	movs	r4, #0
 800bfca:	9403      	str	r4, [sp, #12]
 800bfcc:	9202      	str	r2, [sp, #8]
 800bfce:	9501      	str	r5, [sp, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	9200      	str	r2, [sp, #0]
 800bfd4:	4623      	mov	r3, r4
 800bfd6:	f000 fbdd 	bl	800c794 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 800bfda:	4620      	mov	r0, r4
 800bfdc:	b005      	add	sp, #20
 800bfde:	bd30      	pop	{r4, r5, pc}

0800bfe0 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800bfe0:	b530      	push	{r4, r5, lr}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	460d      	mov	r5, r1
 800bfe6:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfe8:	2400      	movs	r4, #0
 800bfea:	9403      	str	r4, [sp, #12]
 800bfec:	9202      	str	r2, [sp, #8]
 800bfee:	9501      	str	r5, [sp, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	9200      	str	r2, [sp, #0]
 800bff4:	2303      	movs	r3, #3
 800bff6:	f000 fbcd 	bl	800c794 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
}
 800bffa:	4620      	mov	r0, r4
 800bffc:	b005      	add	sp, #20
 800bffe:	bd30      	pop	{r4, r5, pc}

0800c000 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c000:	2300      	movs	r3, #0
 800c002:	2b0f      	cmp	r3, #15
 800c004:	d80b      	bhi.n	800c01e <USBH_GetFreePipe+0x1e>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c006:	f103 02fe 	add.w	r2, r3, #254	@ 0xfe
 800c00a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c00e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800c012:	d002      	beq.n	800c01a <USBH_GetFreePipe+0x1a>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c014:	3301      	adds	r3, #1
 800c016:	b2db      	uxtb	r3, r3
 800c018:	e7f3      	b.n	800c002 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 800c01a:	4618      	mov	r0, r3
 800c01c:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 800c01e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 800c022:	4770      	bx	lr

0800c024 <USBH_OpenPipe>:
{
 800c024:	b510      	push	{r4, lr}
 800c026:	b084      	sub	sp, #16
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c028:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800c02c:	9402      	str	r4, [sp, #8]
 800c02e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800c032:	9401      	str	r4, [sp, #4]
 800c034:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800c038:	9400      	str	r4, [sp, #0]
 800c03a:	f000 fb90 	bl	800c75e <USBH_LL_OpenPipe>
}
 800c03e:	2000      	movs	r0, #0
 800c040:	b004      	add	sp, #16
 800c042:	bd10      	pop	{r4, pc}

0800c044 <USBH_ClosePipe>:
{
 800c044:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c046:	f000 fb9d 	bl	800c784 <USBH_LL_ClosePipe>
}
 800c04a:	2000      	movs	r0, #0
 800c04c:	bd08      	pop	{r3, pc}

0800c04e <USBH_AllocPipe>:
{
 800c04e:	b538      	push	{r3, r4, r5, lr}
 800c050:	4605      	mov	r5, r0
 800c052:	460c      	mov	r4, r1
  pipe =  USBH_GetFreePipe(phost);
 800c054:	f7ff ffd4 	bl	800c000 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 800c058:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c05c:	4298      	cmp	r0, r3
 800c05e:	d006      	beq.n	800c06e <USBH_AllocPipe+0x20>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c060:	f000 030f 	and.w	r3, r0, #15
 800c064:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 800c068:	33fe      	adds	r3, #254	@ 0xfe
 800c06a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
}
 800c06e:	b2c0      	uxtb	r0, r0
 800c070:	bd38      	pop	{r3, r4, r5, pc}

0800c072 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 800c072:	290f      	cmp	r1, #15
 800c074:	d806      	bhi.n	800c084 <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 800c076:	31fe      	adds	r1, #254	@ 0xfe
 800c078:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c07c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c080:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
 800c084:	2000      	movs	r0, #0
 800c086:	4770      	bx	lr

0800c088 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c08a:	2200      	movs	r2, #0
 800c08c:	490c      	ldr	r1, [pc, #48]	@ (800c0c0 <MX_USB_DEVICE_Init+0x38>)
 800c08e:	480d      	ldr	r0, [pc, #52]	@ (800c0c4 <MX_USB_DEVICE_Init+0x3c>)
 800c090:	f7fd fd2a 	bl	8009ae8 <USBD_Init>
 800c094:	b958      	cbnz	r0, 800c0ae <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c096:	490c      	ldr	r1, [pc, #48]	@ (800c0c8 <MX_USB_DEVICE_Init+0x40>)
 800c098:	480a      	ldr	r0, [pc, #40]	@ (800c0c4 <MX_USB_DEVICE_Init+0x3c>)
 800c09a:	f7fd fd49 	bl	8009b30 <USBD_RegisterClass>
 800c09e:	b948      	cbnz	r0, 800c0b4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c0a0:	4808      	ldr	r0, [pc, #32]	@ (800c0c4 <MX_USB_DEVICE_Init+0x3c>)
 800c0a2:	f7fd fd73 	bl	8009b8c <USBD_Start>
 800c0a6:	b940      	cbnz	r0, 800c0ba <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c0a8:	f7f9 f9e0 	bl	800546c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c0ac:	bd08      	pop	{r3, pc}
    Error_Handler();
 800c0ae:	f7f4 fe4c 	bl	8000d4a <Error_Handler>
 800c0b2:	e7f0      	b.n	800c096 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800c0b4:	f7f4 fe49 	bl	8000d4a <Error_Handler>
 800c0b8:	e7f2      	b.n	800c0a0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800c0ba:	f7f4 fe46 	bl	8000d4a <Error_Handler>
 800c0be:	e7f3      	b.n	800c0a8 <MX_USB_DEVICE_Init+0x20>
 800c0c0:	24000148 	.word	0x24000148
 800c0c4:	2400085c 	.word	0x2400085c
 800c0c8:	240000bc 	.word	0x240000bc

0800c0cc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c0cc:	2312      	movs	r3, #18
 800c0ce:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800c0d0:	4800      	ldr	r0, [pc, #0]	@ (800c0d4 <USBD_FS_DeviceDescriptor+0x8>)
 800c0d2:	4770      	bx	lr
 800c0d4:	24000134 	.word	0x24000134

0800c0d8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0d8:	2304      	movs	r3, #4
 800c0da:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800c0dc:	4800      	ldr	r0, [pc, #0]	@ (800c0e0 <USBD_FS_LangIDStrDescriptor+0x8>)
 800c0de:	4770      	bx	lr
 800c0e0:	24000130 	.word	0x24000130

0800c0e4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d21e      	bcs.n	800c128 <IntToUnicode+0x44>
{
 800c0ea:	b500      	push	{lr}
 800c0ec:	e010      	b.n	800c110 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0ee:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 800c0f2:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 800c0f6:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800c0f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c0fc:	f10c 0c01 	add.w	ip, ip, #1
 800c100:	f04f 0e00 	mov.w	lr, #0
 800c104:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 800c108:	3301      	adds	r3, #1
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d209      	bcs.n	800c124 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 800c110:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 800c114:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 800c118:	d2e9      	bcs.n	800c0ee <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800c11a:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800c11e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 800c122:	e7e8      	b.n	800c0f6 <IntToUnicode+0x12>
  }
}
 800c124:	f85d fb04 	ldr.w	pc, [sp], #4
 800c128:	4770      	bx	lr
	...

0800c12c <Get_SerialNum>:
{
 800c12c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c12e:	4b0b      	ldr	r3, [pc, #44]	@ (800c15c <Get_SerialNum+0x30>)
 800c130:	f8d3 0800 	ldr.w	r0, [r3, #2048]	@ 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c134:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c138:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
  if (deviceserial0 != 0)
 800c13c:	18c0      	adds	r0, r0, r3
 800c13e:	d100      	bne.n	800c142 <Get_SerialNum+0x16>
}
 800c140:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c142:	4d07      	ldr	r5, [pc, #28]	@ (800c160 <Get_SerialNum+0x34>)
 800c144:	2208      	movs	r2, #8
 800c146:	4629      	mov	r1, r5
 800c148:	f7ff ffcc 	bl	800c0e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c14c:	2204      	movs	r2, #4
 800c14e:	f105 0110 	add.w	r1, r5, #16
 800c152:	4620      	mov	r0, r4
 800c154:	f7ff ffc6 	bl	800c0e4 <IntToUnicode>
}
 800c158:	e7f2      	b.n	800c140 <Get_SerialNum+0x14>
 800c15a:	bf00      	nop
 800c15c:	1ff1e000 	.word	0x1ff1e000
 800c160:	24000116 	.word	0x24000116

0800c164 <USBD_FS_SerialStrDescriptor>:
{
 800c164:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800c166:	231a      	movs	r3, #26
 800c168:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800c16a:	f7ff ffdf 	bl	800c12c <Get_SerialNum>
}
 800c16e:	4801      	ldr	r0, [pc, #4]	@ (800c174 <USBD_FS_SerialStrDescriptor+0x10>)
 800c170:	bd08      	pop	{r3, pc}
 800c172:	bf00      	nop
 800c174:	24000114 	.word	0x24000114

0800c178 <USBD_FS_ProductStrDescriptor>:
{
 800c178:	b508      	push	{r3, lr}
 800c17a:	460a      	mov	r2, r1
  if(speed == 0)
 800c17c:	b928      	cbnz	r0, 800c18a <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c17e:	4905      	ldr	r1, [pc, #20]	@ (800c194 <USBD_FS_ProductStrDescriptor+0x1c>)
 800c180:	4805      	ldr	r0, [pc, #20]	@ (800c198 <USBD_FS_ProductStrDescriptor+0x20>)
 800c182:	f7fe fa53 	bl	800a62c <USBD_GetString>
}
 800c186:	4803      	ldr	r0, [pc, #12]	@ (800c194 <USBD_FS_ProductStrDescriptor+0x1c>)
 800c188:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c18a:	4902      	ldr	r1, [pc, #8]	@ (800c194 <USBD_FS_ProductStrDescriptor+0x1c>)
 800c18c:	4802      	ldr	r0, [pc, #8]	@ (800c198 <USBD_FS_ProductStrDescriptor+0x20>)
 800c18e:	f7fe fa4d 	bl	800a62c <USBD_GetString>
 800c192:	e7f8      	b.n	800c186 <USBD_FS_ProductStrDescriptor+0xe>
 800c194:	24000b38 	.word	0x24000b38
 800c198:	0800df10 	.word	0x0800df10

0800c19c <USBD_FS_ManufacturerStrDescriptor>:
{
 800c19c:	b510      	push	{r4, lr}
 800c19e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1a0:	4c03      	ldr	r4, [pc, #12]	@ (800c1b0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	4803      	ldr	r0, [pc, #12]	@ (800c1b4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800c1a6:	f7fe fa41 	bl	800a62c <USBD_GetString>
}
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	bd10      	pop	{r4, pc}
 800c1ae:	bf00      	nop
 800c1b0:	24000b38 	.word	0x24000b38
 800c1b4:	0800df28 	.word	0x0800df28

0800c1b8 <USBD_FS_ConfigStrDescriptor>:
{
 800c1b8:	b508      	push	{r3, lr}
 800c1ba:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800c1bc:	b928      	cbnz	r0, 800c1ca <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1be:	4905      	ldr	r1, [pc, #20]	@ (800c1d4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800c1c0:	4805      	ldr	r0, [pc, #20]	@ (800c1d8 <USBD_FS_ConfigStrDescriptor+0x20>)
 800c1c2:	f7fe fa33 	bl	800a62c <USBD_GetString>
}
 800c1c6:	4803      	ldr	r0, [pc, #12]	@ (800c1d4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800c1c8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1ca:	4902      	ldr	r1, [pc, #8]	@ (800c1d4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800c1cc:	4802      	ldr	r0, [pc, #8]	@ (800c1d8 <USBD_FS_ConfigStrDescriptor+0x20>)
 800c1ce:	f7fe fa2d 	bl	800a62c <USBD_GetString>
 800c1d2:	e7f8      	b.n	800c1c6 <USBD_FS_ConfigStrDescriptor+0xe>
 800c1d4:	24000b38 	.word	0x24000b38
 800c1d8:	0800df30 	.word	0x0800df30

0800c1dc <USBD_FS_InterfaceStrDescriptor>:
{
 800c1dc:	b508      	push	{r3, lr}
 800c1de:	460a      	mov	r2, r1
  if(speed == 0)
 800c1e0:	b928      	cbnz	r0, 800c1ee <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1e2:	4905      	ldr	r1, [pc, #20]	@ (800c1f8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800c1e4:	4805      	ldr	r0, [pc, #20]	@ (800c1fc <USBD_FS_InterfaceStrDescriptor+0x20>)
 800c1e6:	f7fe fa21 	bl	800a62c <USBD_GetString>
}
 800c1ea:	4803      	ldr	r0, [pc, #12]	@ (800c1f8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800c1ec:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1ee:	4902      	ldr	r1, [pc, #8]	@ (800c1f8 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800c1f0:	4802      	ldr	r0, [pc, #8]	@ (800c1fc <USBD_FS_InterfaceStrDescriptor+0x20>)
 800c1f2:	f7fe fa1b 	bl	800a62c <USBD_GetString>
 800c1f6:	e7f8      	b.n	800c1ea <USBD_FS_InterfaceStrDescriptor+0xe>
 800c1f8:	24000b38 	.word	0x24000b38
 800c1fc:	0800df3c 	.word	0x0800df3c

0800c200 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	b0b8      	sub	sp, #224	@ 0xe0
 800c204:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c206:	2100      	movs	r1, #0
 800c208:	9133      	str	r1, [sp, #204]	@ 0xcc
 800c20a:	9134      	str	r1, [sp, #208]	@ 0xd0
 800c20c:	9135      	str	r1, [sp, #212]	@ 0xd4
 800c20e:	9136      	str	r1, [sp, #216]	@ 0xd8
 800c210:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c212:	22c0      	movs	r2, #192	@ 0xc0
 800c214:	a802      	add	r0, sp, #8
 800c216:	f000 fda3 	bl	800cd60 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c21a:	6822      	ldr	r2, [r4, #0]
 800c21c:	4b23      	ldr	r3, [pc, #140]	@ (800c2ac <HAL_PCD_MspInit+0xac>)
 800c21e:	429a      	cmp	r2, r3
 800c220:	d001      	beq.n	800c226 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c222:	b038      	add	sp, #224	@ 0xe0
 800c224:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c226:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c22a:	2300      	movs	r3, #0
 800c22c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c230:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800c234:	9324      	str	r3, [sp, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c236:	a802      	add	r0, sp, #8
 800c238:	f7fa f8ae 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 800c23c:	bb90      	cbnz	r0, 800c2a4 <HAL_PCD_MspInit+0xa4>
    HAL_PWREx_EnableUSBVoltageDetector();
 800c23e:	f7f9 f915 	bl	800546c <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c242:	4c1b      	ldr	r4, [pc, #108]	@ (800c2b0 <HAL_PCD_MspInit+0xb0>)
 800c244:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800c248:	f043 0301 	orr.w	r3, r3, #1
 800c24c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c250:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c25c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c260:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c262:	2302      	movs	r3, #2
 800c264:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c266:	2600      	movs	r6, #0
 800c268:	9635      	str	r6, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c26a:	2303      	movs	r3, #3
 800c26c:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800c26e:	250a      	movs	r5, #10
 800c270:	9537      	str	r5, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c272:	a933      	add	r1, sp, #204	@ 0xcc
 800c274:	480f      	ldr	r0, [pc, #60]	@ (800c2b4 <HAL_PCD_MspInit+0xb4>)
 800c276:	f7f7 f8df 	bl	8003438 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c27a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800c27e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c282:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 800c286:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800c28a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 10, 0);
 800c292:	4632      	mov	r2, r6
 800c294:	4629      	mov	r1, r5
 800c296:	2065      	movs	r0, #101	@ 0x65
 800c298:	f7f6 fa8a 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c29c:	2065      	movs	r0, #101	@ 0x65
 800c29e:	f7f6 fa97 	bl	80027d0 <HAL_NVIC_EnableIRQ>
}
 800c2a2:	e7be      	b.n	800c222 <HAL_PCD_MspInit+0x22>
      Error_Handler();
 800c2a4:	f7f4 fd51 	bl	8000d4a <Error_Handler>
 800c2a8:	e7c9      	b.n	800c23e <HAL_PCD_MspInit+0x3e>
 800c2aa:	bf00      	nop
 800c2ac:	40080000 	.word	0x40080000
 800c2b0:	58024400 	.word	0x58024400
 800c2b4:	58020000 	.word	0x58020000

0800c2b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c2ba:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 800c2be:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c2c2:	f7fd fc79 	bl	8009bb8 <USBD_LL_SetupStage>
}
 800c2c6:	bd08      	pop	{r3, pc}

0800c2c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2c8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c2ca:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800c2ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c2d2:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 800c2d6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c2da:	f7fd fd3f 	bl	8009d5c <USBD_LL_DataOutStage>
}
 800c2de:	bd08      	pop	{r3, pc}

0800c2e0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2e0:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c2e2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800c2e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c2ea:	6a1a      	ldr	r2, [r3, #32]
 800c2ec:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c2f0:	f7fd fd96 	bl	8009e20 <USBD_LL_DataInStage>
}
 800c2f4:	bd08      	pop	{r3, pc}

0800c2f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2f6:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c2f8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c2fc:	f7fd fcd9 	bl	8009cb2 <USBD_LL_SOF>
}
 800c300:	bd08      	pop	{r3, pc}

0800c302 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c302:	b510      	push	{r4, lr}
 800c304:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c306:	79c1      	ldrb	r1, [r0, #7]
 800c308:	b111      	cbz	r1, 800c310 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c30a:	2902      	cmp	r1, #2
 800c30c:	d109      	bne.n	800c322 <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 800c30e:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c310:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800c314:	f7fd fcae 	bl	8009c74 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c318:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 800c31c:	f7fd fc78 	bl	8009c10 <USBD_LL_Reset>
}
 800c320:	bd10      	pop	{r4, pc}
    Error_Handler();
 800c322:	f7f4 fd12 	bl	8000d4a <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c326:	2101      	movs	r1, #1
 800c328:	e7f2      	b.n	800c310 <HAL_PCD_ResetCallback+0xe>
	...

0800c32c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c32c:	b510      	push	{r4, lr}
 800c32e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c330:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c334:	f7fd fca1 	bl	8009c7a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 800c33e:	f043 0301 	orr.w	r3, r3, #1
 800c342:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c346:	7ae3      	ldrb	r3, [r4, #11]
 800c348:	b123      	cbz	r3, 800c354 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c34a:	4a03      	ldr	r2, [pc, #12]	@ (800c358 <HAL_PCD_SuspendCallback+0x2c>)
 800c34c:	6913      	ldr	r3, [r2, #16]
 800c34e:	f043 0306 	orr.w	r3, r3, #6
 800c352:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c354:	bd10      	pop	{r4, pc}
 800c356:	bf00      	nop
 800c358:	e000ed00 	.word	0xe000ed00

0800c35c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c35c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c35e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c362:	f7fd fc99 	bl	8009c98 <USBD_LL_Resume>
}
 800c366:	bd08      	pop	{r3, pc}

0800c368 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c368:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c36a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c36e:	f7fd fcc8 	bl	8009d02 <USBD_LL_IsoOUTIncomplete>
}
 800c372:	bd08      	pop	{r3, pc}

0800c374 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c374:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c376:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c37a:	f7fd fcab 	bl	8009cd4 <USBD_LL_IsoINIncomplete>
}
 800c37e:	bd08      	pop	{r3, pc}

0800c380 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c380:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c382:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c386:	f7fd fcd3 	bl	8009d30 <USBD_LL_DevConnected>
}
 800c38a:	bd08      	pop	{r3, pc}

0800c38c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c38c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c38e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 800c392:	f7fd fccf 	bl	8009d34 <USBD_LL_DevDisconnected>
}
 800c396:	bd08      	pop	{r3, pc}

0800c398 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c398:	7802      	ldrb	r2, [r0, #0]
 800c39a:	b10a      	cbz	r2, 800c3a0 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800c39c:	2000      	movs	r0, #0
 800c39e:	4770      	bx	lr
{
 800c3a0:	b510      	push	{r4, lr}
 800c3a2:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 800c3a4:	4815      	ldr	r0, [pc, #84]	@ (800c3fc <USBD_LL_Init+0x64>)
 800c3a6:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c3aa:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c3ae:	4b14      	ldr	r3, [pc, #80]	@ (800c400 <USBD_LL_Init+0x68>)
 800c3b0:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800c3b2:	2309      	movs	r3, #9
 800c3b4:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	7183      	strb	r3, [r0, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c3be:	7242      	strb	r2, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c3c0:	7283      	strb	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c3c2:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c3c4:	7303      	strb	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c3c6:	7343      	strb	r3, [r0, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c3c8:	7383      	strb	r3, [r0, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c3ca:	73c3      	strb	r3, [r0, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c3cc:	f7f8 fa24 	bl	8004818 <HAL_PCD_Init>
 800c3d0:	b980      	cbnz	r0, 800c3f4 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c3d2:	4c0a      	ldr	r4, [pc, #40]	@ (800c3fc <USBD_LL_Init+0x64>)
 800c3d4:	2180      	movs	r1, #128	@ 0x80
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f7f9 f804 	bl	80053e4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c3dc:	2240      	movs	r2, #64	@ 0x40
 800c3de:	2100      	movs	r1, #0
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f7f8 ffd9 	bl	8005398 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c3e6:	2280      	movs	r2, #128	@ 0x80
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7f8 ffd4 	bl	8005398 <HAL_PCDEx_SetTxFiFo>
}
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800c3f4:	f7f4 fca9 	bl	8000d4a <Error_Handler>
 800c3f8:	e7eb      	b.n	800c3d2 <USBD_LL_Init+0x3a>
 800c3fa:	bf00      	nop
 800c3fc:	24000d4c 	.word	0x24000d4c
 800c400:	40080000 	.word	0x40080000

0800c404 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c404:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 800c408:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800c40c:	d108      	bne.n	800c420 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c40e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800c412:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800c416:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c41a:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 800c41e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c420:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800c424:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800c428:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c42c:	7d98      	ldrb	r0, [r3, #22]
 800c42e:	4770      	bx	lr

0800c430 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800c430:	4800      	ldr	r0, [pc, #0]	@ (800c434 <USBD_static_malloc+0x4>)
 800c432:	4770      	bx	lr
 800c434:	24000d38 	.word	0x24000d38

0800c438 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{
  UNUSED(p);
}
 800c438:	4770      	bx	lr

0800c43a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800c43a:	2803      	cmp	r0, #3
 800c43c:	d805      	bhi.n	800c44a <USBD_Get_USB_Status+0x10>
 800c43e:	e8df f000 	tbb	[pc, r0]
 800c442:	0405      	.short	0x0405
 800c444:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c446:	2001      	movs	r0, #1
    break;
 800c448:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800c44a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800c44c:	4770      	bx	lr

0800c44e <USBD_LL_Start>:
{
 800c44e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800c450:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800c454:	f7f8 fa61 	bl	800491a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c458:	f7ff ffef 	bl	800c43a <USBD_Get_USB_Status>
}
 800c45c:	bd08      	pop	{r3, pc}

0800c45e <USBD_LL_OpenEP>:
{
 800c45e:	b508      	push	{r3, lr}
 800c460:	4694      	mov	ip, r2
 800c462:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c464:	4663      	mov	r3, ip
 800c466:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800c46a:	f7f8 fb36 	bl	8004ada <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c46e:	f7ff ffe4 	bl	800c43a <USBD_Get_USB_Status>
}
 800c472:	bd08      	pop	{r3, pc}

0800c474 <USBD_LL_CloseEP>:
{
 800c474:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c476:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800c47a:	f7f8 fb74 	bl	8004b66 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c47e:	f7ff ffdc 	bl	800c43a <USBD_Get_USB_Status>
}
 800c482:	bd08      	pop	{r3, pc}

0800c484 <USBD_LL_StallEP>:
{
 800c484:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c486:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800c48a:	f7f8 fbee 	bl	8004c6a <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c48e:	f7ff ffd4 	bl	800c43a <USBD_Get_USB_Status>
}
 800c492:	bd08      	pop	{r3, pc}

0800c494 <USBD_LL_ClearStallEP>:
{
 800c494:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c496:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800c49a:	f7f8 fc29 	bl	8004cf0 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c49e:	f7ff ffcc 	bl	800c43a <USBD_Get_USB_Status>
}
 800c4a2:	bd08      	pop	{r3, pc}

0800c4a4 <USBD_LL_SetUSBAddress>:
{
 800c4a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4a6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800c4aa:	f7f8 fb03 	bl	8004ab4 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ae:	f7ff ffc4 	bl	800c43a <USBD_Get_USB_Status>
}
 800c4b2:	bd08      	pop	{r3, pc}

0800c4b4 <USBD_LL_Transmit>:
{
 800c4b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4b6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800c4ba:	f7f8 fbb1 	bl	8004c20 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4be:	f7ff ffbc 	bl	800c43a <USBD_Get_USB_Status>
}
 800c4c2:	bd08      	pop	{r3, pc}

0800c4c4 <USBD_LL_PrepareReceive>:
{
 800c4c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4c6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 800c4ca:	f7f8 fb84 	bl	8004bd6 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ce:	f7ff ffb4 	bl	800c43a <USBD_Get_USB_Status>
}
 800c4d2:	bd08      	pop	{r3, pc}

0800c4d4 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c4d4:	2904      	cmp	r1, #4
 800c4d6:	d00c      	beq.n	800c4f2 <USBH_UserProcess+0x1e>
 800c4d8:	2905      	cmp	r1, #5
 800c4da:	d002      	beq.n	800c4e2 <USBH_UserProcess+0xe>
 800c4dc:	2902      	cmp	r1, #2
 800c4de:	d004      	beq.n	800c4ea <USBH_UserProcess+0x16>
 800c4e0:	4770      	bx	lr
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c4e2:	4b06      	ldr	r3, [pc, #24]	@ (800c4fc <USBH_UserProcess+0x28>)
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	701a      	strb	r2, [r3, #0]
  break;
 800c4e8:	4770      	bx	lr

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c4ea:	4b04      	ldr	r3, [pc, #16]	@ (800c4fc <USBH_UserProcess+0x28>)
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	701a      	strb	r2, [r3, #0]
  break;
 800c4f0:	4770      	bx	lr

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c4f2:	4b02      	ldr	r3, [pc, #8]	@ (800c4fc <USBH_UserProcess+0x28>)
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	24001230 	.word	0x24001230

0800c500 <MX_USB_HOST_Init>:
{
 800c500:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c502:	2200      	movs	r2, #0
 800c504:	490b      	ldr	r1, [pc, #44]	@ (800c534 <MX_USB_HOST_Init+0x34>)
 800c506:	480c      	ldr	r0, [pc, #48]	@ (800c538 <MX_USB_HOST_Init+0x38>)
 800c508:	f7fe fe74 	bl	800b1f4 <USBH_Init>
 800c50c:	b948      	cbnz	r0, 800c522 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 800c50e:	490b      	ldr	r1, [pc, #44]	@ (800c53c <MX_USB_HOST_Init+0x3c>)
 800c510:	4809      	ldr	r0, [pc, #36]	@ (800c538 <MX_USB_HOST_Init+0x38>)
 800c512:	f7fe fe9b 	bl	800b24c <USBH_RegisterClass>
 800c516:	b938      	cbnz	r0, 800c528 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c518:	4807      	ldr	r0, [pc, #28]	@ (800c538 <MX_USB_HOST_Init+0x38>)
 800c51a:	f7fe ff31 	bl	800b380 <USBH_Start>
 800c51e:	b930      	cbnz	r0, 800c52e <MX_USB_HOST_Init+0x2e>
}
 800c520:	bd08      	pop	{r3, pc}
    Error_Handler();
 800c522:	f7f4 fc12 	bl	8000d4a <Error_Handler>
 800c526:	e7f2      	b.n	800c50e <MX_USB_HOST_Init+0xe>
    Error_Handler();
 800c528:	f7f4 fc0f 	bl	8000d4a <Error_Handler>
 800c52c:	e7f4      	b.n	800c518 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 800c52e:	f7f4 fc0c 	bl	8000d4a <Error_Handler>
}
 800c532:	e7f5      	b.n	800c520 <MX_USB_HOST_Init+0x20>
 800c534:	0800c4d5 	.word	0x0800c4d5
 800c538:	24001234 	.word	0x24001234
 800c53c:	240000f4 	.word	0x240000f4

0800c540 <MX_USB_HOST_Process>:
{
 800c540:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostHS);
 800c542:	4802      	ldr	r0, [pc, #8]	@ (800c54c <MX_USB_HOST_Process+0xc>)
 800c544:	f7fe ff26 	bl	800b394 <USBH_Process>
}
 800c548:	bd08      	pop	{r3, pc}
 800c54a:	bf00      	nop
 800c54c:	24001234 	.word	0x24001234

0800c550 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c550:	b530      	push	{r4, r5, lr}
 800c552:	b0b9      	sub	sp, #228	@ 0xe4
 800c554:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c556:	2100      	movs	r1, #0
 800c558:	9133      	str	r1, [sp, #204]	@ 0xcc
 800c55a:	9134      	str	r1, [sp, #208]	@ 0xd0
 800c55c:	9135      	str	r1, [sp, #212]	@ 0xd4
 800c55e:	9136      	str	r1, [sp, #216]	@ 0xd8
 800c560:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c562:	22c0      	movs	r2, #192	@ 0xc0
 800c564:	a802      	add	r0, sp, #8
 800c566:	f000 fbfb 	bl	800cd60 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800c56a:	6822      	ldr	r2, [r4, #0]
 800c56c:	4b23      	ldr	r3, [pc, #140]	@ (800c5fc <HAL_HCD_MspInit+0xac>)
 800c56e:	429a      	cmp	r2, r3
 800c570:	d001      	beq.n	800c576 <HAL_HCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c572:	b039      	add	sp, #228	@ 0xe4
 800c574:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c576:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c57a:	2300      	movs	r3, #0
 800c57c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c580:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800c584:	9324      	str	r3, [sp, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c586:	a802      	add	r0, sp, #8
 800c588:	f7f9 ff06 	bl	8006398 <HAL_RCCEx_PeriphCLKConfig>
 800c58c:	bb90      	cbnz	r0, 800c5f4 <HAL_HCD_MspInit+0xa4>
    HAL_PWREx_EnableUSBVoltageDetector();
 800c58e:	f7f8 ff6d 	bl	800546c <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c592:	4c1b      	ldr	r4, [pc, #108]	@ (800c600 <HAL_HCD_MspInit+0xb0>)
 800c594:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800c598:	f043 0302 	orr.w	r3, r3, #2
 800c59c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c5a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800c5a4:	f003 0302 	and.w	r3, r3, #2
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800c5ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800c5b0:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5b2:	2302      	movs	r3, #2
 800c5b4:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b6:	2500      	movs	r5, #0
 800c5b8:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 800c5be:	230c      	movs	r3, #12
 800c5c0:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c5c2:	a933      	add	r1, sp, #204	@ 0xcc
 800c5c4:	480f      	ldr	r0, [pc, #60]	@ (800c604 <HAL_HCD_MspInit+0xb4>)
 800c5c6:	f7f6 ff37 	bl	8003438 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c5ca:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800c5ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c5d2:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 800c5d6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 800c5da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 9, 0);
 800c5e2:	462a      	mov	r2, r5
 800c5e4:	2109      	movs	r1, #9
 800c5e6:	204d      	movs	r0, #77	@ 0x4d
 800c5e8:	f7f6 f8e2 	bl	80027b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c5ec:	204d      	movs	r0, #77	@ 0x4d
 800c5ee:	f7f6 f8ef 	bl	80027d0 <HAL_NVIC_EnableIRQ>
}
 800c5f2:	e7be      	b.n	800c572 <HAL_HCD_MspInit+0x22>
      Error_Handler();
 800c5f4:	f7f4 fba9 	bl	8000d4a <Error_Handler>
 800c5f8:	e7c9      	b.n	800c58e <HAL_HCD_MspInit+0x3e>
 800c5fa:	bf00      	nop
 800c5fc:	40040000 	.word	0x40040000
 800c600:	58024400 	.word	0x58024400
 800c604:	58020400 	.word	0x58020400

0800c608 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c608:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 800c60a:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 800c60e:	f7ff f898 	bl	800b742 <USBH_LL_IncTimer>
}
 800c612:	bd08      	pop	{r3, pc}

0800c614 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c614:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 800c616:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 800c61a:	f7ff f8a6 	bl	800b76a <USBH_LL_Connect>
}
 800c61e:	bd08      	pop	{r3, pc}

0800c620 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c620:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 800c622:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 800c626:	f7ff f8aa 	bl	800b77e <USBH_LL_Disconnect>
}
 800c62a:	bd08      	pop	{r3, pc}

0800c62c <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c62c:	4770      	bx	lr

0800c62e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c62e:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 800c630:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 800c634:	f7ff f88e 	bl	800b754 <USBH_LL_PortEnabled>
}
 800c638:	bd08      	pop	{r3, pc}

0800c63a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c63a:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 800c63c:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 800c640:	f7ff f88c 	bl	800b75c <USBH_LL_PortDisabled>
}
 800c644:	bd08      	pop	{r3, pc}
	...

0800c648 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800c648:	f890 3440 	ldrb.w	r3, [r0, #1088]	@ 0x440
 800c64c:	b10b      	cbz	r3, 800c652 <USBH_LL_Init+0xa>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
  }
  return USBH_OK;
}
 800c64e:	2000      	movs	r0, #0
 800c650:	4770      	bx	lr
{
 800c652:	b510      	push	{r4, lr}
 800c654:	4604      	mov	r4, r0
  hhcd_USB_OTG_HS.pData = phost;
 800c656:	4810      	ldr	r0, [pc, #64]	@ (800c698 <USBH_LL_Init+0x50>)
 800c658:	f8c0 43dc 	str.w	r4, [r0, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800c65c:	f8c4 0444 	str.w	r0, [r4, #1092]	@ 0x444
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c660:	4b0e      	ldr	r3, [pc, #56]	@ (800c69c <USBH_LL_Init+0x54>)
 800c662:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800c664:	2310      	movs	r3, #16
 800c666:	7143      	strb	r3, [r0, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800c668:	2301      	movs	r3, #1
 800c66a:	71c3      	strb	r3, [r0, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c66c:	2300      	movs	r3, #0
 800c66e:	7183      	strb	r3, [r0, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c670:	2202      	movs	r2, #2
 800c672:	7242      	strb	r2, [r0, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c674:	7283      	strb	r3, [r0, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c676:	72c3      	strb	r3, [r0, #11]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c678:	7403      	strb	r3, [r0, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c67a:	f7f7 f85b 	bl	8003734 <HAL_HCD_Init>
 800c67e:	b940      	cbnz	r0, 800c692 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c680:	4805      	ldr	r0, [pc, #20]	@ (800c698 <USBH_LL_Init+0x50>)
 800c682:	f7f7 ffe6 	bl	8004652 <HAL_HCD_GetCurrentFrame>
 800c686:	4601      	mov	r1, r0
 800c688:	4620      	mov	r0, r4
 800c68a:	f7ff f857 	bl	800b73c <USBH_LL_SetTimer>
}
 800c68e:	2000      	movs	r0, #0
 800c690:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800c692:	f7f4 fb5a 	bl	8000d4a <Error_Handler>
 800c696:	e7f3      	b.n	800c680 <USBH_LL_Init+0x38>
 800c698:	24001680 	.word	0x24001680
 800c69c:	40040000 	.word	0x40040000

0800c6a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c6a0:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c6a2:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c6a6:	f7f7 ffd9 	bl	800465c <HAL_HCD_GetCurrentSpeed>
 800c6aa:	2801      	cmp	r0, #1
 800c6ac:	d004      	beq.n	800c6b8 <USBH_LL_GetSpeed+0x18>
 800c6ae:	2802      	cmp	r0, #2
 800c6b0:	d004      	beq.n	800c6bc <USBH_LL_GetSpeed+0x1c>
 800c6b2:	b120      	cbz	r0, 800c6be <USBH_LL_GetSpeed+0x1e>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	e002      	b.n	800c6be <USBH_LL_GetSpeed+0x1e>
    speed = USBH_SPEED_FULL;
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	e000      	b.n	800c6be <USBH_LL_GetSpeed+0x1e>
    speed = USBH_SPEED_LOW;
 800c6bc:	2002      	movs	r0, #2
    break;
  }
  return  speed;
}
 800c6be:	bd08      	pop	{r3, pc}

0800c6c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6c0:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c6c2:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c6c6:	f7f7 ffbe 	bl	8004646 <HAL_HCD_HC_GetXferCount>
}
 800c6ca:	bd08      	pop	{r3, pc}

0800c6cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6cc:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c6ce:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c6d2:	f7f7 ffb1 	bl	8004638 <HAL_HCD_HC_GetURBState>
}
 800c6d6:	bd08      	pop	{r3, pc}

0800c6d8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c6d8:	b508      	push	{r3, lr}
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800c6da:	20c8      	movs	r0, #200	@ 0xc8
 800c6dc:	f7f5 fff2 	bl	80026c4 <HAL_Delay>
  return USBH_OK;
}
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	bd08      	pop	{r3, pc}

0800c6e4 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c6e4:	f8d0 3444 	ldr.w	r3, [r0, #1092]	@ 0x444

  if(pHandle->hc[pipe].ep_is_in)
 800c6e8:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
 800c6ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c6f0:	7dc0      	ldrb	r0, [r0, #23]
 800c6f2:	b138      	cbz	r0, 800c704 <USBH_LL_SetToggle+0x20>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c6f4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800c6f8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800c700:	2000      	movs	r0, #0
 800c702:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800c704:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800c708:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c710:	e7f6      	b.n	800c700 <USBH_LL_SetToggle+0x1c>

0800c712 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c712:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 800c714:	f7f5 ffd6 	bl	80026c4 <HAL_Delay>
}
 800c718:	bd08      	pop	{r3, pc}

0800c71a <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800c71a:	2802      	cmp	r0, #2
 800c71c:	d805      	bhi.n	800c72a <USBH_Get_USB_Status+0x10>
 800c71e:	e8df f000 	tbb	[pc, r0]
 800c722:	0405      	.short	0x0405
 800c724:	02          	.byte	0x02
 800c725:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c726:	2001      	movs	r0, #1
    break;
 800c728:	4770      	bx	lr
      usb_status = USBH_FAIL;
 800c72a:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800c72c:	4770      	bx	lr

0800c72e <USBH_LL_Start>:
{
 800c72e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 800c730:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c734:	f7f7 ff54 	bl	80045e0 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 800c738:	f7ff ffef 	bl	800c71a <USBH_Get_USB_Status>
}
 800c73c:	bd08      	pop	{r3, pc}

0800c73e <USBH_LL_Stop>:
{
 800c73e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 800c740:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c744:	f7f7 ff61 	bl	800460a <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 800c748:	f7ff ffe7 	bl	800c71a <USBH_Get_USB_Status>
}
 800c74c:	bd08      	pop	{r3, pc}

0800c74e <USBH_LL_ResetPort>:
{
 800c74e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c750:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c754:	f7f7 ff6b 	bl	800462e <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 800c758:	f7ff ffdf 	bl	800c71a <USBH_Get_USB_Status>
}
 800c75c:	bd08      	pop	{r3, pc}

0800c75e <USBH_LL_OpenPipe>:
{
 800c75e:	b510      	push	{r4, lr}
 800c760:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c762:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c766:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800c76a:	9402      	str	r4, [sp, #8]
 800c76c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800c770:	9401      	str	r4, [sp, #4]
 800c772:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800c776:	9400      	str	r4, [sp, #0]
 800c778:	f7f7 ff81 	bl	800467e <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 800c77c:	f7ff ffcd 	bl	800c71a <USBH_Get_USB_Status>
}
 800c780:	b004      	add	sp, #16
 800c782:	bd10      	pop	{r4, pc}

0800c784 <USBH_LL_ClosePipe>:
{
 800c784:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c786:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c78a:	f7f6 ffc1 	bl	8003710 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 800c78e:	f7ff ffc4 	bl	800c71a <USBH_Get_USB_Status>
}
 800c792:	bd08      	pop	{r3, pc}

0800c794 <USBH_LL_SubmitURB>:
{
 800c794:	b510      	push	{r4, lr}
 800c796:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c798:	f8d0 0444 	ldr.w	r0, [r0, #1092]	@ 0x444
 800c79c:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 800c7a0:	9403      	str	r4, [sp, #12]
 800c7a2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800c7a6:	9402      	str	r4, [sp, #8]
 800c7a8:	9c07      	ldr	r4, [sp, #28]
 800c7aa:	9401      	str	r4, [sp, #4]
 800c7ac:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800c7b0:	9400      	str	r4, [sp, #0]
 800c7b2:	f7f6 ffff 	bl	80037b4 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c7b6:	f7ff ffb0 	bl	800c71a <USBH_Get_USB_Status>
}
 800c7ba:	b004      	add	sp, #16
 800c7bc:	bd10      	pop	{r4, pc}
	...

0800c7c0 <malloc>:
 800c7c0:	4b02      	ldr	r3, [pc, #8]	@ (800c7cc <malloc+0xc>)
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	f000 b82d 	b.w	800c824 <_malloc_r>
 800c7ca:	bf00      	nop
 800c7cc:	24000170 	.word	0x24000170

0800c7d0 <free>:
 800c7d0:	4b02      	ldr	r3, [pc, #8]	@ (800c7dc <free+0xc>)
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	f000 bb5d 	b.w	800ce94 <_free_r>
 800c7da:	bf00      	nop
 800c7dc:	24000170 	.word	0x24000170

0800c7e0 <sbrk_aligned>:
 800c7e0:	b570      	push	{r4, r5, r6, lr}
 800c7e2:	4e0f      	ldr	r6, [pc, #60]	@ (800c820 <sbrk_aligned+0x40>)
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	6831      	ldr	r1, [r6, #0]
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	b911      	cbnz	r1, 800c7f2 <sbrk_aligned+0x12>
 800c7ec:	f000 faf4 	bl	800cdd8 <_sbrk_r>
 800c7f0:	6030      	str	r0, [r6, #0]
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	f000 faef 	bl	800cdd8 <_sbrk_r>
 800c7fa:	1c43      	adds	r3, r0, #1
 800c7fc:	d103      	bne.n	800c806 <sbrk_aligned+0x26>
 800c7fe:	f04f 34ff 	mov.w	r4, #4294967295
 800c802:	4620      	mov	r0, r4
 800c804:	bd70      	pop	{r4, r5, r6, pc}
 800c806:	1cc4      	adds	r4, r0, #3
 800c808:	f024 0403 	bic.w	r4, r4, #3
 800c80c:	42a0      	cmp	r0, r4
 800c80e:	d0f8      	beq.n	800c802 <sbrk_aligned+0x22>
 800c810:	1a21      	subs	r1, r4, r0
 800c812:	4628      	mov	r0, r5
 800c814:	f000 fae0 	bl	800cdd8 <_sbrk_r>
 800c818:	3001      	adds	r0, #1
 800c81a:	d1f2      	bne.n	800c802 <sbrk_aligned+0x22>
 800c81c:	e7ef      	b.n	800c7fe <sbrk_aligned+0x1e>
 800c81e:	bf00      	nop
 800c820:	24001a60 	.word	0x24001a60

0800c824 <_malloc_r>:
 800c824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c828:	1ccd      	adds	r5, r1, #3
 800c82a:	f025 0503 	bic.w	r5, r5, #3
 800c82e:	3508      	adds	r5, #8
 800c830:	2d0c      	cmp	r5, #12
 800c832:	bf38      	it	cc
 800c834:	250c      	movcc	r5, #12
 800c836:	2d00      	cmp	r5, #0
 800c838:	4606      	mov	r6, r0
 800c83a:	db01      	blt.n	800c840 <_malloc_r+0x1c>
 800c83c:	42a9      	cmp	r1, r5
 800c83e:	d904      	bls.n	800c84a <_malloc_r+0x26>
 800c840:	230c      	movs	r3, #12
 800c842:	6033      	str	r3, [r6, #0]
 800c844:	2000      	movs	r0, #0
 800c846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c84a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c920 <_malloc_r+0xfc>
 800c84e:	f000 f869 	bl	800c924 <__malloc_lock>
 800c852:	f8d8 3000 	ldr.w	r3, [r8]
 800c856:	461c      	mov	r4, r3
 800c858:	bb44      	cbnz	r4, 800c8ac <_malloc_r+0x88>
 800c85a:	4629      	mov	r1, r5
 800c85c:	4630      	mov	r0, r6
 800c85e:	f7ff ffbf 	bl	800c7e0 <sbrk_aligned>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	4604      	mov	r4, r0
 800c866:	d158      	bne.n	800c91a <_malloc_r+0xf6>
 800c868:	f8d8 4000 	ldr.w	r4, [r8]
 800c86c:	4627      	mov	r7, r4
 800c86e:	2f00      	cmp	r7, #0
 800c870:	d143      	bne.n	800c8fa <_malloc_r+0xd6>
 800c872:	2c00      	cmp	r4, #0
 800c874:	d04b      	beq.n	800c90e <_malloc_r+0xea>
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	4639      	mov	r1, r7
 800c87a:	4630      	mov	r0, r6
 800c87c:	eb04 0903 	add.w	r9, r4, r3
 800c880:	f000 faaa 	bl	800cdd8 <_sbrk_r>
 800c884:	4581      	cmp	r9, r0
 800c886:	d142      	bne.n	800c90e <_malloc_r+0xea>
 800c888:	6821      	ldr	r1, [r4, #0]
 800c88a:	1a6d      	subs	r5, r5, r1
 800c88c:	4629      	mov	r1, r5
 800c88e:	4630      	mov	r0, r6
 800c890:	f7ff ffa6 	bl	800c7e0 <sbrk_aligned>
 800c894:	3001      	adds	r0, #1
 800c896:	d03a      	beq.n	800c90e <_malloc_r+0xea>
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	442b      	add	r3, r5
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	f8d8 3000 	ldr.w	r3, [r8]
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	bb62      	cbnz	r2, 800c900 <_malloc_r+0xdc>
 800c8a6:	f8c8 7000 	str.w	r7, [r8]
 800c8aa:	e00f      	b.n	800c8cc <_malloc_r+0xa8>
 800c8ac:	6822      	ldr	r2, [r4, #0]
 800c8ae:	1b52      	subs	r2, r2, r5
 800c8b0:	d420      	bmi.n	800c8f4 <_malloc_r+0xd0>
 800c8b2:	2a0b      	cmp	r2, #11
 800c8b4:	d917      	bls.n	800c8e6 <_malloc_r+0xc2>
 800c8b6:	1961      	adds	r1, r4, r5
 800c8b8:	42a3      	cmp	r3, r4
 800c8ba:	6025      	str	r5, [r4, #0]
 800c8bc:	bf18      	it	ne
 800c8be:	6059      	strne	r1, [r3, #4]
 800c8c0:	6863      	ldr	r3, [r4, #4]
 800c8c2:	bf08      	it	eq
 800c8c4:	f8c8 1000 	streq.w	r1, [r8]
 800c8c8:	5162      	str	r2, [r4, r5]
 800c8ca:	604b      	str	r3, [r1, #4]
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f000 f82f 	bl	800c930 <__malloc_unlock>
 800c8d2:	f104 000b 	add.w	r0, r4, #11
 800c8d6:	1d23      	adds	r3, r4, #4
 800c8d8:	f020 0007 	bic.w	r0, r0, #7
 800c8dc:	1ac2      	subs	r2, r0, r3
 800c8de:	bf1c      	itt	ne
 800c8e0:	1a1b      	subne	r3, r3, r0
 800c8e2:	50a3      	strne	r3, [r4, r2]
 800c8e4:	e7af      	b.n	800c846 <_malloc_r+0x22>
 800c8e6:	6862      	ldr	r2, [r4, #4]
 800c8e8:	42a3      	cmp	r3, r4
 800c8ea:	bf0c      	ite	eq
 800c8ec:	f8c8 2000 	streq.w	r2, [r8]
 800c8f0:	605a      	strne	r2, [r3, #4]
 800c8f2:	e7eb      	b.n	800c8cc <_malloc_r+0xa8>
 800c8f4:	4623      	mov	r3, r4
 800c8f6:	6864      	ldr	r4, [r4, #4]
 800c8f8:	e7ae      	b.n	800c858 <_malloc_r+0x34>
 800c8fa:	463c      	mov	r4, r7
 800c8fc:	687f      	ldr	r7, [r7, #4]
 800c8fe:	e7b6      	b.n	800c86e <_malloc_r+0x4a>
 800c900:	461a      	mov	r2, r3
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	42a3      	cmp	r3, r4
 800c906:	d1fb      	bne.n	800c900 <_malloc_r+0xdc>
 800c908:	2300      	movs	r3, #0
 800c90a:	6053      	str	r3, [r2, #4]
 800c90c:	e7de      	b.n	800c8cc <_malloc_r+0xa8>
 800c90e:	230c      	movs	r3, #12
 800c910:	6033      	str	r3, [r6, #0]
 800c912:	4630      	mov	r0, r6
 800c914:	f000 f80c 	bl	800c930 <__malloc_unlock>
 800c918:	e794      	b.n	800c844 <_malloc_r+0x20>
 800c91a:	6005      	str	r5, [r0, #0]
 800c91c:	e7d6      	b.n	800c8cc <_malloc_r+0xa8>
 800c91e:	bf00      	nop
 800c920:	24001a64 	.word	0x24001a64

0800c924 <__malloc_lock>:
 800c924:	4801      	ldr	r0, [pc, #4]	@ (800c92c <__malloc_lock+0x8>)
 800c926:	f000 baa4 	b.w	800ce72 <__retarget_lock_acquire_recursive>
 800c92a:	bf00      	nop
 800c92c:	24001ba8 	.word	0x24001ba8

0800c930 <__malloc_unlock>:
 800c930:	4801      	ldr	r0, [pc, #4]	@ (800c938 <__malloc_unlock+0x8>)
 800c932:	f000 ba9f 	b.w	800ce74 <__retarget_lock_release_recursive>
 800c936:	bf00      	nop
 800c938:	24001ba8 	.word	0x24001ba8

0800c93c <std>:
 800c93c:	2300      	movs	r3, #0
 800c93e:	b510      	push	{r4, lr}
 800c940:	4604      	mov	r4, r0
 800c942:	e9c0 3300 	strd	r3, r3, [r0]
 800c946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c94a:	6083      	str	r3, [r0, #8]
 800c94c:	8181      	strh	r1, [r0, #12]
 800c94e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c950:	81c2      	strh	r2, [r0, #14]
 800c952:	6183      	str	r3, [r0, #24]
 800c954:	4619      	mov	r1, r3
 800c956:	2208      	movs	r2, #8
 800c958:	305c      	adds	r0, #92	@ 0x5c
 800c95a:	f000 fa01 	bl	800cd60 <memset>
 800c95e:	4b0d      	ldr	r3, [pc, #52]	@ (800c994 <std+0x58>)
 800c960:	6263      	str	r3, [r4, #36]	@ 0x24
 800c962:	4b0d      	ldr	r3, [pc, #52]	@ (800c998 <std+0x5c>)
 800c964:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c966:	4b0d      	ldr	r3, [pc, #52]	@ (800c99c <std+0x60>)
 800c968:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c96a:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a0 <std+0x64>)
 800c96c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c96e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a4 <std+0x68>)
 800c970:	6224      	str	r4, [r4, #32]
 800c972:	429c      	cmp	r4, r3
 800c974:	d006      	beq.n	800c984 <std+0x48>
 800c976:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c97a:	4294      	cmp	r4, r2
 800c97c:	d002      	beq.n	800c984 <std+0x48>
 800c97e:	33d0      	adds	r3, #208	@ 0xd0
 800c980:	429c      	cmp	r4, r3
 800c982:	d105      	bne.n	800c990 <std+0x54>
 800c984:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c98c:	f000 ba70 	b.w	800ce70 <__retarget_lock_init_recursive>
 800c990:	bd10      	pop	{r4, pc}
 800c992:	bf00      	nop
 800c994:	0800cbb1 	.word	0x0800cbb1
 800c998:	0800cbd3 	.word	0x0800cbd3
 800c99c:	0800cc0b 	.word	0x0800cc0b
 800c9a0:	0800cc2f 	.word	0x0800cc2f
 800c9a4:	24001a68 	.word	0x24001a68

0800c9a8 <stdio_exit_handler>:
 800c9a8:	4a02      	ldr	r2, [pc, #8]	@ (800c9b4 <stdio_exit_handler+0xc>)
 800c9aa:	4903      	ldr	r1, [pc, #12]	@ (800c9b8 <stdio_exit_handler+0x10>)
 800c9ac:	4803      	ldr	r0, [pc, #12]	@ (800c9bc <stdio_exit_handler+0x14>)
 800c9ae:	f000 b869 	b.w	800ca84 <_fwalk_sglue>
 800c9b2:	bf00      	nop
 800c9b4:	24000164 	.word	0x24000164
 800c9b8:	0800d5cd 	.word	0x0800d5cd
 800c9bc:	24000174 	.word	0x24000174

0800c9c0 <cleanup_stdio>:
 800c9c0:	6841      	ldr	r1, [r0, #4]
 800c9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9f4 <cleanup_stdio+0x34>)
 800c9c4:	4299      	cmp	r1, r3
 800c9c6:	b510      	push	{r4, lr}
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	d001      	beq.n	800c9d0 <cleanup_stdio+0x10>
 800c9cc:	f000 fdfe 	bl	800d5cc <_fflush_r>
 800c9d0:	68a1      	ldr	r1, [r4, #8]
 800c9d2:	4b09      	ldr	r3, [pc, #36]	@ (800c9f8 <cleanup_stdio+0x38>)
 800c9d4:	4299      	cmp	r1, r3
 800c9d6:	d002      	beq.n	800c9de <cleanup_stdio+0x1e>
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 fdf7 	bl	800d5cc <_fflush_r>
 800c9de:	68e1      	ldr	r1, [r4, #12]
 800c9e0:	4b06      	ldr	r3, [pc, #24]	@ (800c9fc <cleanup_stdio+0x3c>)
 800c9e2:	4299      	cmp	r1, r3
 800c9e4:	d004      	beq.n	800c9f0 <cleanup_stdio+0x30>
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9ec:	f000 bdee 	b.w	800d5cc <_fflush_r>
 800c9f0:	bd10      	pop	{r4, pc}
 800c9f2:	bf00      	nop
 800c9f4:	24001a68 	.word	0x24001a68
 800c9f8:	24001ad0 	.word	0x24001ad0
 800c9fc:	24001b38 	.word	0x24001b38

0800ca00 <global_stdio_init.part.0>:
 800ca00:	b510      	push	{r4, lr}
 800ca02:	4b0b      	ldr	r3, [pc, #44]	@ (800ca30 <global_stdio_init.part.0+0x30>)
 800ca04:	4c0b      	ldr	r4, [pc, #44]	@ (800ca34 <global_stdio_init.part.0+0x34>)
 800ca06:	4a0c      	ldr	r2, [pc, #48]	@ (800ca38 <global_stdio_init.part.0+0x38>)
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	2104      	movs	r1, #4
 800ca10:	f7ff ff94 	bl	800c93c <std>
 800ca14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca18:	2201      	movs	r2, #1
 800ca1a:	2109      	movs	r1, #9
 800ca1c:	f7ff ff8e 	bl	800c93c <std>
 800ca20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca24:	2202      	movs	r2, #2
 800ca26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca2a:	2112      	movs	r1, #18
 800ca2c:	f7ff bf86 	b.w	800c93c <std>
 800ca30:	24001ba0 	.word	0x24001ba0
 800ca34:	24001a68 	.word	0x24001a68
 800ca38:	0800c9a9 	.word	0x0800c9a9

0800ca3c <__sfp_lock_acquire>:
 800ca3c:	4801      	ldr	r0, [pc, #4]	@ (800ca44 <__sfp_lock_acquire+0x8>)
 800ca3e:	f000 ba18 	b.w	800ce72 <__retarget_lock_acquire_recursive>
 800ca42:	bf00      	nop
 800ca44:	24001ba9 	.word	0x24001ba9

0800ca48 <__sfp_lock_release>:
 800ca48:	4801      	ldr	r0, [pc, #4]	@ (800ca50 <__sfp_lock_release+0x8>)
 800ca4a:	f000 ba13 	b.w	800ce74 <__retarget_lock_release_recursive>
 800ca4e:	bf00      	nop
 800ca50:	24001ba9 	.word	0x24001ba9

0800ca54 <__sinit>:
 800ca54:	b510      	push	{r4, lr}
 800ca56:	4604      	mov	r4, r0
 800ca58:	f7ff fff0 	bl	800ca3c <__sfp_lock_acquire>
 800ca5c:	6a23      	ldr	r3, [r4, #32]
 800ca5e:	b11b      	cbz	r3, 800ca68 <__sinit+0x14>
 800ca60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca64:	f7ff bff0 	b.w	800ca48 <__sfp_lock_release>
 800ca68:	4b04      	ldr	r3, [pc, #16]	@ (800ca7c <__sinit+0x28>)
 800ca6a:	6223      	str	r3, [r4, #32]
 800ca6c:	4b04      	ldr	r3, [pc, #16]	@ (800ca80 <__sinit+0x2c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1f5      	bne.n	800ca60 <__sinit+0xc>
 800ca74:	f7ff ffc4 	bl	800ca00 <global_stdio_init.part.0>
 800ca78:	e7f2      	b.n	800ca60 <__sinit+0xc>
 800ca7a:	bf00      	nop
 800ca7c:	0800c9c1 	.word	0x0800c9c1
 800ca80:	24001ba0 	.word	0x24001ba0

0800ca84 <_fwalk_sglue>:
 800ca84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca88:	4607      	mov	r7, r0
 800ca8a:	4688      	mov	r8, r1
 800ca8c:	4614      	mov	r4, r2
 800ca8e:	2600      	movs	r6, #0
 800ca90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca94:	f1b9 0901 	subs.w	r9, r9, #1
 800ca98:	d505      	bpl.n	800caa6 <_fwalk_sglue+0x22>
 800ca9a:	6824      	ldr	r4, [r4, #0]
 800ca9c:	2c00      	cmp	r4, #0
 800ca9e:	d1f7      	bne.n	800ca90 <_fwalk_sglue+0xc>
 800caa0:	4630      	mov	r0, r6
 800caa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caa6:	89ab      	ldrh	r3, [r5, #12]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d907      	bls.n	800cabc <_fwalk_sglue+0x38>
 800caac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cab0:	3301      	adds	r3, #1
 800cab2:	d003      	beq.n	800cabc <_fwalk_sglue+0x38>
 800cab4:	4629      	mov	r1, r5
 800cab6:	4638      	mov	r0, r7
 800cab8:	47c0      	blx	r8
 800caba:	4306      	orrs	r6, r0
 800cabc:	3568      	adds	r5, #104	@ 0x68
 800cabe:	e7e9      	b.n	800ca94 <_fwalk_sglue+0x10>

0800cac0 <iprintf>:
 800cac0:	b40f      	push	{r0, r1, r2, r3}
 800cac2:	b507      	push	{r0, r1, r2, lr}
 800cac4:	4906      	ldr	r1, [pc, #24]	@ (800cae0 <iprintf+0x20>)
 800cac6:	ab04      	add	r3, sp, #16
 800cac8:	6808      	ldr	r0, [r1, #0]
 800caca:	f853 2b04 	ldr.w	r2, [r3], #4
 800cace:	6881      	ldr	r1, [r0, #8]
 800cad0:	9301      	str	r3, [sp, #4]
 800cad2:	f000 fa53 	bl	800cf7c <_vfiprintf_r>
 800cad6:	b003      	add	sp, #12
 800cad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cadc:	b004      	add	sp, #16
 800cade:	4770      	bx	lr
 800cae0:	24000170 	.word	0x24000170

0800cae4 <putchar>:
 800cae4:	4b02      	ldr	r3, [pc, #8]	@ (800caf0 <putchar+0xc>)
 800cae6:	4601      	mov	r1, r0
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	6882      	ldr	r2, [r0, #8]
 800caec:	f000 bdf8 	b.w	800d6e0 <_putc_r>
 800caf0:	24000170 	.word	0x24000170

0800caf4 <_puts_r>:
 800caf4:	6a03      	ldr	r3, [r0, #32]
 800caf6:	b570      	push	{r4, r5, r6, lr}
 800caf8:	6884      	ldr	r4, [r0, #8]
 800cafa:	4605      	mov	r5, r0
 800cafc:	460e      	mov	r6, r1
 800cafe:	b90b      	cbnz	r3, 800cb04 <_puts_r+0x10>
 800cb00:	f7ff ffa8 	bl	800ca54 <__sinit>
 800cb04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb06:	07db      	lsls	r3, r3, #31
 800cb08:	d405      	bmi.n	800cb16 <_puts_r+0x22>
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	0598      	lsls	r0, r3, #22
 800cb0e:	d402      	bmi.n	800cb16 <_puts_r+0x22>
 800cb10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb12:	f000 f9ae 	bl	800ce72 <__retarget_lock_acquire_recursive>
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	0719      	lsls	r1, r3, #28
 800cb1a:	d502      	bpl.n	800cb22 <_puts_r+0x2e>
 800cb1c:	6923      	ldr	r3, [r4, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d135      	bne.n	800cb8e <_puts_r+0x9a>
 800cb22:	4621      	mov	r1, r4
 800cb24:	4628      	mov	r0, r5
 800cb26:	f000 f8c5 	bl	800ccb4 <__swsetup_r>
 800cb2a:	b380      	cbz	r0, 800cb8e <_puts_r+0x9a>
 800cb2c:	f04f 35ff 	mov.w	r5, #4294967295
 800cb30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb32:	07da      	lsls	r2, r3, #31
 800cb34:	d405      	bmi.n	800cb42 <_puts_r+0x4e>
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	059b      	lsls	r3, r3, #22
 800cb3a:	d402      	bmi.n	800cb42 <_puts_r+0x4e>
 800cb3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb3e:	f000 f999 	bl	800ce74 <__retarget_lock_release_recursive>
 800cb42:	4628      	mov	r0, r5
 800cb44:	bd70      	pop	{r4, r5, r6, pc}
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	da04      	bge.n	800cb54 <_puts_r+0x60>
 800cb4a:	69a2      	ldr	r2, [r4, #24]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	dc17      	bgt.n	800cb80 <_puts_r+0x8c>
 800cb50:	290a      	cmp	r1, #10
 800cb52:	d015      	beq.n	800cb80 <_puts_r+0x8c>
 800cb54:	6823      	ldr	r3, [r4, #0]
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	6022      	str	r2, [r4, #0]
 800cb5a:	7019      	strb	r1, [r3, #0]
 800cb5c:	68a3      	ldr	r3, [r4, #8]
 800cb5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb62:	3b01      	subs	r3, #1
 800cb64:	60a3      	str	r3, [r4, #8]
 800cb66:	2900      	cmp	r1, #0
 800cb68:	d1ed      	bne.n	800cb46 <_puts_r+0x52>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	da11      	bge.n	800cb92 <_puts_r+0x9e>
 800cb6e:	4622      	mov	r2, r4
 800cb70:	210a      	movs	r1, #10
 800cb72:	4628      	mov	r0, r5
 800cb74:	f000 f85f 	bl	800cc36 <__swbuf_r>
 800cb78:	3001      	adds	r0, #1
 800cb7a:	d0d7      	beq.n	800cb2c <_puts_r+0x38>
 800cb7c:	250a      	movs	r5, #10
 800cb7e:	e7d7      	b.n	800cb30 <_puts_r+0x3c>
 800cb80:	4622      	mov	r2, r4
 800cb82:	4628      	mov	r0, r5
 800cb84:	f000 f857 	bl	800cc36 <__swbuf_r>
 800cb88:	3001      	adds	r0, #1
 800cb8a:	d1e7      	bne.n	800cb5c <_puts_r+0x68>
 800cb8c:	e7ce      	b.n	800cb2c <_puts_r+0x38>
 800cb8e:	3e01      	subs	r6, #1
 800cb90:	e7e4      	b.n	800cb5c <_puts_r+0x68>
 800cb92:	6823      	ldr	r3, [r4, #0]
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	6022      	str	r2, [r4, #0]
 800cb98:	220a      	movs	r2, #10
 800cb9a:	701a      	strb	r2, [r3, #0]
 800cb9c:	e7ee      	b.n	800cb7c <_puts_r+0x88>
	...

0800cba0 <puts>:
 800cba0:	4b02      	ldr	r3, [pc, #8]	@ (800cbac <puts+0xc>)
 800cba2:	4601      	mov	r1, r0
 800cba4:	6818      	ldr	r0, [r3, #0]
 800cba6:	f7ff bfa5 	b.w	800caf4 <_puts_r>
 800cbaa:	bf00      	nop
 800cbac:	24000170 	.word	0x24000170

0800cbb0 <__sread>:
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb8:	f000 f8fc 	bl	800cdb4 <_read_r>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	bfab      	itete	ge
 800cbc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbc2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbc4:	181b      	addge	r3, r3, r0
 800cbc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbca:	bfac      	ite	ge
 800cbcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbce:	81a3      	strhlt	r3, [r4, #12]
 800cbd0:	bd10      	pop	{r4, pc}

0800cbd2 <__swrite>:
 800cbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd6:	461f      	mov	r7, r3
 800cbd8:	898b      	ldrh	r3, [r1, #12]
 800cbda:	05db      	lsls	r3, r3, #23
 800cbdc:	4605      	mov	r5, r0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	d505      	bpl.n	800cbf0 <__swrite+0x1e>
 800cbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe8:	2302      	movs	r3, #2
 800cbea:	2200      	movs	r2, #0
 800cbec:	f000 f8d0 	bl	800cd90 <_lseek_r>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	4628      	mov	r0, r5
 800cc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc06:	f000 b8f7 	b.w	800cdf8 <_write_r>

0800cc0a <__sseek>:
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc12:	f000 f8bd 	bl	800cd90 <_lseek_r>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	bf15      	itete	ne
 800cc1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc26:	81a3      	strheq	r3, [r4, #12]
 800cc28:	bf18      	it	ne
 800cc2a:	81a3      	strhne	r3, [r4, #12]
 800cc2c:	bd10      	pop	{r4, pc}

0800cc2e <__sclose>:
 800cc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc32:	f000 b89d 	b.w	800cd70 <_close_r>

0800cc36 <__swbuf_r>:
 800cc36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc38:	460e      	mov	r6, r1
 800cc3a:	4614      	mov	r4, r2
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	b118      	cbz	r0, 800cc48 <__swbuf_r+0x12>
 800cc40:	6a03      	ldr	r3, [r0, #32]
 800cc42:	b90b      	cbnz	r3, 800cc48 <__swbuf_r+0x12>
 800cc44:	f7ff ff06 	bl	800ca54 <__sinit>
 800cc48:	69a3      	ldr	r3, [r4, #24]
 800cc4a:	60a3      	str	r3, [r4, #8]
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	071a      	lsls	r2, r3, #28
 800cc50:	d501      	bpl.n	800cc56 <__swbuf_r+0x20>
 800cc52:	6923      	ldr	r3, [r4, #16]
 800cc54:	b943      	cbnz	r3, 800cc68 <__swbuf_r+0x32>
 800cc56:	4621      	mov	r1, r4
 800cc58:	4628      	mov	r0, r5
 800cc5a:	f000 f82b 	bl	800ccb4 <__swsetup_r>
 800cc5e:	b118      	cbz	r0, 800cc68 <__swbuf_r+0x32>
 800cc60:	f04f 37ff 	mov.w	r7, #4294967295
 800cc64:	4638      	mov	r0, r7
 800cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	6922      	ldr	r2, [r4, #16]
 800cc6c:	1a98      	subs	r0, r3, r2
 800cc6e:	6963      	ldr	r3, [r4, #20]
 800cc70:	b2f6      	uxtb	r6, r6
 800cc72:	4283      	cmp	r3, r0
 800cc74:	4637      	mov	r7, r6
 800cc76:	dc05      	bgt.n	800cc84 <__swbuf_r+0x4e>
 800cc78:	4621      	mov	r1, r4
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	f000 fca6 	bl	800d5cc <_fflush_r>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d1ed      	bne.n	800cc60 <__swbuf_r+0x2a>
 800cc84:	68a3      	ldr	r3, [r4, #8]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	60a3      	str	r3, [r4, #8]
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	701e      	strb	r6, [r3, #0]
 800cc92:	6962      	ldr	r2, [r4, #20]
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d004      	beq.n	800cca4 <__swbuf_r+0x6e>
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	07db      	lsls	r3, r3, #31
 800cc9e:	d5e1      	bpl.n	800cc64 <__swbuf_r+0x2e>
 800cca0:	2e0a      	cmp	r6, #10
 800cca2:	d1df      	bne.n	800cc64 <__swbuf_r+0x2e>
 800cca4:	4621      	mov	r1, r4
 800cca6:	4628      	mov	r0, r5
 800cca8:	f000 fc90 	bl	800d5cc <_fflush_r>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d0d9      	beq.n	800cc64 <__swbuf_r+0x2e>
 800ccb0:	e7d6      	b.n	800cc60 <__swbuf_r+0x2a>
	...

0800ccb4 <__swsetup_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4b29      	ldr	r3, [pc, #164]	@ (800cd5c <__swsetup_r+0xa8>)
 800ccb8:	4605      	mov	r5, r0
 800ccba:	6818      	ldr	r0, [r3, #0]
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	b118      	cbz	r0, 800ccc8 <__swsetup_r+0x14>
 800ccc0:	6a03      	ldr	r3, [r0, #32]
 800ccc2:	b90b      	cbnz	r3, 800ccc8 <__swsetup_r+0x14>
 800ccc4:	f7ff fec6 	bl	800ca54 <__sinit>
 800ccc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cccc:	0719      	lsls	r1, r3, #28
 800ccce:	d422      	bmi.n	800cd16 <__swsetup_r+0x62>
 800ccd0:	06da      	lsls	r2, r3, #27
 800ccd2:	d407      	bmi.n	800cce4 <__swsetup_r+0x30>
 800ccd4:	2209      	movs	r2, #9
 800ccd6:	602a      	str	r2, [r5, #0]
 800ccd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccdc:	81a3      	strh	r3, [r4, #12]
 800ccde:	f04f 30ff 	mov.w	r0, #4294967295
 800cce2:	e033      	b.n	800cd4c <__swsetup_r+0x98>
 800cce4:	0758      	lsls	r0, r3, #29
 800cce6:	d512      	bpl.n	800cd0e <__swsetup_r+0x5a>
 800cce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccea:	b141      	cbz	r1, 800ccfe <__swsetup_r+0x4a>
 800ccec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccf0:	4299      	cmp	r1, r3
 800ccf2:	d002      	beq.n	800ccfa <__swsetup_r+0x46>
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f000 f8cd 	bl	800ce94 <_free_r>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd04:	81a3      	strh	r3, [r4, #12]
 800cd06:	2300      	movs	r3, #0
 800cd08:	6063      	str	r3, [r4, #4]
 800cd0a:	6923      	ldr	r3, [r4, #16]
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f043 0308 	orr.w	r3, r3, #8
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	6923      	ldr	r3, [r4, #16]
 800cd18:	b94b      	cbnz	r3, 800cd2e <__swsetup_r+0x7a>
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd24:	d003      	beq.n	800cd2e <__swsetup_r+0x7a>
 800cd26:	4621      	mov	r1, r4
 800cd28:	4628      	mov	r0, r5
 800cd2a:	f000 fc9d 	bl	800d668 <__smakebuf_r>
 800cd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd32:	f013 0201 	ands.w	r2, r3, #1
 800cd36:	d00a      	beq.n	800cd4e <__swsetup_r+0x9a>
 800cd38:	2200      	movs	r2, #0
 800cd3a:	60a2      	str	r2, [r4, #8]
 800cd3c:	6962      	ldr	r2, [r4, #20]
 800cd3e:	4252      	negs	r2, r2
 800cd40:	61a2      	str	r2, [r4, #24]
 800cd42:	6922      	ldr	r2, [r4, #16]
 800cd44:	b942      	cbnz	r2, 800cd58 <__swsetup_r+0xa4>
 800cd46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd4a:	d1c5      	bne.n	800ccd8 <__swsetup_r+0x24>
 800cd4c:	bd38      	pop	{r3, r4, r5, pc}
 800cd4e:	0799      	lsls	r1, r3, #30
 800cd50:	bf58      	it	pl
 800cd52:	6962      	ldrpl	r2, [r4, #20]
 800cd54:	60a2      	str	r2, [r4, #8]
 800cd56:	e7f4      	b.n	800cd42 <__swsetup_r+0x8e>
 800cd58:	2000      	movs	r0, #0
 800cd5a:	e7f7      	b.n	800cd4c <__swsetup_r+0x98>
 800cd5c:	24000170 	.word	0x24000170

0800cd60 <memset>:
 800cd60:	4402      	add	r2, r0
 800cd62:	4603      	mov	r3, r0
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d100      	bne.n	800cd6a <memset+0xa>
 800cd68:	4770      	bx	lr
 800cd6a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd6e:	e7f9      	b.n	800cd64 <memset+0x4>

0800cd70 <_close_r>:
 800cd70:	b538      	push	{r3, r4, r5, lr}
 800cd72:	4d06      	ldr	r5, [pc, #24]	@ (800cd8c <_close_r+0x1c>)
 800cd74:	2300      	movs	r3, #0
 800cd76:	4604      	mov	r4, r0
 800cd78:	4608      	mov	r0, r1
 800cd7a:	602b      	str	r3, [r5, #0]
 800cd7c:	f7f5 f9ee 	bl	800215c <_close>
 800cd80:	1c43      	adds	r3, r0, #1
 800cd82:	d102      	bne.n	800cd8a <_close_r+0x1a>
 800cd84:	682b      	ldr	r3, [r5, #0]
 800cd86:	b103      	cbz	r3, 800cd8a <_close_r+0x1a>
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	bd38      	pop	{r3, r4, r5, pc}
 800cd8c:	24001ba4 	.word	0x24001ba4

0800cd90 <_lseek_r>:
 800cd90:	b538      	push	{r3, r4, r5, lr}
 800cd92:	4d07      	ldr	r5, [pc, #28]	@ (800cdb0 <_lseek_r+0x20>)
 800cd94:	4604      	mov	r4, r0
 800cd96:	4608      	mov	r0, r1
 800cd98:	4611      	mov	r1, r2
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	602a      	str	r2, [r5, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f7f5 f9e6 	bl	8002170 <_lseek>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	d102      	bne.n	800cdae <_lseek_r+0x1e>
 800cda8:	682b      	ldr	r3, [r5, #0]
 800cdaa:	b103      	cbz	r3, 800cdae <_lseek_r+0x1e>
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	bd38      	pop	{r3, r4, r5, pc}
 800cdb0:	24001ba4 	.word	0x24001ba4

0800cdb4 <_read_r>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	4d07      	ldr	r5, [pc, #28]	@ (800cdd4 <_read_r+0x20>)
 800cdb8:	4604      	mov	r4, r0
 800cdba:	4608      	mov	r0, r1
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	602a      	str	r2, [r5, #0]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	f7f5 f9a4 	bl	8002110 <_read>
 800cdc8:	1c43      	adds	r3, r0, #1
 800cdca:	d102      	bne.n	800cdd2 <_read_r+0x1e>
 800cdcc:	682b      	ldr	r3, [r5, #0]
 800cdce:	b103      	cbz	r3, 800cdd2 <_read_r+0x1e>
 800cdd0:	6023      	str	r3, [r4, #0]
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
 800cdd4:	24001ba4 	.word	0x24001ba4

0800cdd8 <_sbrk_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	4d06      	ldr	r5, [pc, #24]	@ (800cdf4 <_sbrk_r+0x1c>)
 800cddc:	2300      	movs	r3, #0
 800cdde:	4604      	mov	r4, r0
 800cde0:	4608      	mov	r0, r1
 800cde2:	602b      	str	r3, [r5, #0]
 800cde4:	f7f5 f9c6 	bl	8002174 <_sbrk>
 800cde8:	1c43      	adds	r3, r0, #1
 800cdea:	d102      	bne.n	800cdf2 <_sbrk_r+0x1a>
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	b103      	cbz	r3, 800cdf2 <_sbrk_r+0x1a>
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	24001ba4 	.word	0x24001ba4

0800cdf8 <_write_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	@ (800ce18 <_write_r+0x20>)
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	4608      	mov	r0, r1
 800ce00:	4611      	mov	r1, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	602a      	str	r2, [r5, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f7f5 f992 	bl	8002130 <_write>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_write_r+0x1e>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_write_r+0x1e>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	24001ba4 	.word	0x24001ba4

0800ce1c <__errno>:
 800ce1c:	4b01      	ldr	r3, [pc, #4]	@ (800ce24 <__errno+0x8>)
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	24000170 	.word	0x24000170

0800ce28 <__libc_init_array>:
 800ce28:	b570      	push	{r4, r5, r6, lr}
 800ce2a:	4d0d      	ldr	r5, [pc, #52]	@ (800ce60 <__libc_init_array+0x38>)
 800ce2c:	4c0d      	ldr	r4, [pc, #52]	@ (800ce64 <__libc_init_array+0x3c>)
 800ce2e:	1b64      	subs	r4, r4, r5
 800ce30:	10a4      	asrs	r4, r4, #2
 800ce32:	2600      	movs	r6, #0
 800ce34:	42a6      	cmp	r6, r4
 800ce36:	d109      	bne.n	800ce4c <__libc_init_array+0x24>
 800ce38:	4d0b      	ldr	r5, [pc, #44]	@ (800ce68 <__libc_init_array+0x40>)
 800ce3a:	4c0c      	ldr	r4, [pc, #48]	@ (800ce6c <__libc_init_array+0x44>)
 800ce3c:	f000 fca6 	bl	800d78c <_init>
 800ce40:	1b64      	subs	r4, r4, r5
 800ce42:	10a4      	asrs	r4, r4, #2
 800ce44:	2600      	movs	r6, #0
 800ce46:	42a6      	cmp	r6, r4
 800ce48:	d105      	bne.n	800ce56 <__libc_init_array+0x2e>
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce50:	4798      	blx	r3
 800ce52:	3601      	adds	r6, #1
 800ce54:	e7ee      	b.n	800ce34 <__libc_init_array+0xc>
 800ce56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce5a:	4798      	blx	r3
 800ce5c:	3601      	adds	r6, #1
 800ce5e:	e7f2      	b.n	800ce46 <__libc_init_array+0x1e>
 800ce60:	0800e464 	.word	0x0800e464
 800ce64:	0800e464 	.word	0x0800e464
 800ce68:	0800e464 	.word	0x0800e464
 800ce6c:	0800e468 	.word	0x0800e468

0800ce70 <__retarget_lock_init_recursive>:
 800ce70:	4770      	bx	lr

0800ce72 <__retarget_lock_acquire_recursive>:
 800ce72:	4770      	bx	lr

0800ce74 <__retarget_lock_release_recursive>:
 800ce74:	4770      	bx	lr

0800ce76 <memcpy>:
 800ce76:	440a      	add	r2, r1
 800ce78:	4291      	cmp	r1, r2
 800ce7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce7e:	d100      	bne.n	800ce82 <memcpy+0xc>
 800ce80:	4770      	bx	lr
 800ce82:	b510      	push	{r4, lr}
 800ce84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce8c:	4291      	cmp	r1, r2
 800ce8e:	d1f9      	bne.n	800ce84 <memcpy+0xe>
 800ce90:	bd10      	pop	{r4, pc}
	...

0800ce94 <_free_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4605      	mov	r5, r0
 800ce98:	2900      	cmp	r1, #0
 800ce9a:	d041      	beq.n	800cf20 <_free_r+0x8c>
 800ce9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cea0:	1f0c      	subs	r4, r1, #4
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	bfb8      	it	lt
 800cea6:	18e4      	addlt	r4, r4, r3
 800cea8:	f7ff fd3c 	bl	800c924 <__malloc_lock>
 800ceac:	4a1d      	ldr	r2, [pc, #116]	@ (800cf24 <_free_r+0x90>)
 800ceae:	6813      	ldr	r3, [r2, #0]
 800ceb0:	b933      	cbnz	r3, 800cec0 <_free_r+0x2c>
 800ceb2:	6063      	str	r3, [r4, #4]
 800ceb4:	6014      	str	r4, [r2, #0]
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cebc:	f7ff bd38 	b.w	800c930 <__malloc_unlock>
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d908      	bls.n	800ced6 <_free_r+0x42>
 800cec4:	6820      	ldr	r0, [r4, #0]
 800cec6:	1821      	adds	r1, r4, r0
 800cec8:	428b      	cmp	r3, r1
 800ceca:	bf01      	itttt	eq
 800cecc:	6819      	ldreq	r1, [r3, #0]
 800cece:	685b      	ldreq	r3, [r3, #4]
 800ced0:	1809      	addeq	r1, r1, r0
 800ced2:	6021      	streq	r1, [r4, #0]
 800ced4:	e7ed      	b.n	800ceb2 <_free_r+0x1e>
 800ced6:	461a      	mov	r2, r3
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	b10b      	cbz	r3, 800cee0 <_free_r+0x4c>
 800cedc:	42a3      	cmp	r3, r4
 800cede:	d9fa      	bls.n	800ced6 <_free_r+0x42>
 800cee0:	6811      	ldr	r1, [r2, #0]
 800cee2:	1850      	adds	r0, r2, r1
 800cee4:	42a0      	cmp	r0, r4
 800cee6:	d10b      	bne.n	800cf00 <_free_r+0x6c>
 800cee8:	6820      	ldr	r0, [r4, #0]
 800ceea:	4401      	add	r1, r0
 800ceec:	1850      	adds	r0, r2, r1
 800ceee:	4283      	cmp	r3, r0
 800cef0:	6011      	str	r1, [r2, #0]
 800cef2:	d1e0      	bne.n	800ceb6 <_free_r+0x22>
 800cef4:	6818      	ldr	r0, [r3, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	6053      	str	r3, [r2, #4]
 800cefa:	4408      	add	r0, r1
 800cefc:	6010      	str	r0, [r2, #0]
 800cefe:	e7da      	b.n	800ceb6 <_free_r+0x22>
 800cf00:	d902      	bls.n	800cf08 <_free_r+0x74>
 800cf02:	230c      	movs	r3, #12
 800cf04:	602b      	str	r3, [r5, #0]
 800cf06:	e7d6      	b.n	800ceb6 <_free_r+0x22>
 800cf08:	6820      	ldr	r0, [r4, #0]
 800cf0a:	1821      	adds	r1, r4, r0
 800cf0c:	428b      	cmp	r3, r1
 800cf0e:	bf04      	itt	eq
 800cf10:	6819      	ldreq	r1, [r3, #0]
 800cf12:	685b      	ldreq	r3, [r3, #4]
 800cf14:	6063      	str	r3, [r4, #4]
 800cf16:	bf04      	itt	eq
 800cf18:	1809      	addeq	r1, r1, r0
 800cf1a:	6021      	streq	r1, [r4, #0]
 800cf1c:	6054      	str	r4, [r2, #4]
 800cf1e:	e7ca      	b.n	800ceb6 <_free_r+0x22>
 800cf20:	bd38      	pop	{r3, r4, r5, pc}
 800cf22:	bf00      	nop
 800cf24:	24001a64 	.word	0x24001a64

0800cf28 <__sfputc_r>:
 800cf28:	6893      	ldr	r3, [r2, #8]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	b410      	push	{r4}
 800cf30:	6093      	str	r3, [r2, #8]
 800cf32:	da08      	bge.n	800cf46 <__sfputc_r+0x1e>
 800cf34:	6994      	ldr	r4, [r2, #24]
 800cf36:	42a3      	cmp	r3, r4
 800cf38:	db01      	blt.n	800cf3e <__sfputc_r+0x16>
 800cf3a:	290a      	cmp	r1, #10
 800cf3c:	d103      	bne.n	800cf46 <__sfputc_r+0x1e>
 800cf3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf42:	f7ff be78 	b.w	800cc36 <__swbuf_r>
 800cf46:	6813      	ldr	r3, [r2, #0]
 800cf48:	1c58      	adds	r0, r3, #1
 800cf4a:	6010      	str	r0, [r2, #0]
 800cf4c:	7019      	strb	r1, [r3, #0]
 800cf4e:	4608      	mov	r0, r1
 800cf50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <__sfputs_r>:
 800cf56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf58:	4606      	mov	r6, r0
 800cf5a:	460f      	mov	r7, r1
 800cf5c:	4614      	mov	r4, r2
 800cf5e:	18d5      	adds	r5, r2, r3
 800cf60:	42ac      	cmp	r4, r5
 800cf62:	d101      	bne.n	800cf68 <__sfputs_r+0x12>
 800cf64:	2000      	movs	r0, #0
 800cf66:	e007      	b.n	800cf78 <__sfputs_r+0x22>
 800cf68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf6c:	463a      	mov	r2, r7
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f7ff ffda 	bl	800cf28 <__sfputc_r>
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	d1f3      	bne.n	800cf60 <__sfputs_r+0xa>
 800cf78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf7c <_vfiprintf_r>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	460d      	mov	r5, r1
 800cf82:	b09d      	sub	sp, #116	@ 0x74
 800cf84:	4614      	mov	r4, r2
 800cf86:	4698      	mov	r8, r3
 800cf88:	4606      	mov	r6, r0
 800cf8a:	b118      	cbz	r0, 800cf94 <_vfiprintf_r+0x18>
 800cf8c:	6a03      	ldr	r3, [r0, #32]
 800cf8e:	b90b      	cbnz	r3, 800cf94 <_vfiprintf_r+0x18>
 800cf90:	f7ff fd60 	bl	800ca54 <__sinit>
 800cf94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf96:	07d9      	lsls	r1, r3, #31
 800cf98:	d405      	bmi.n	800cfa6 <_vfiprintf_r+0x2a>
 800cf9a:	89ab      	ldrh	r3, [r5, #12]
 800cf9c:	059a      	lsls	r2, r3, #22
 800cf9e:	d402      	bmi.n	800cfa6 <_vfiprintf_r+0x2a>
 800cfa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfa2:	f7ff ff66 	bl	800ce72 <__retarget_lock_acquire_recursive>
 800cfa6:	89ab      	ldrh	r3, [r5, #12]
 800cfa8:	071b      	lsls	r3, r3, #28
 800cfaa:	d501      	bpl.n	800cfb0 <_vfiprintf_r+0x34>
 800cfac:	692b      	ldr	r3, [r5, #16]
 800cfae:	b99b      	cbnz	r3, 800cfd8 <_vfiprintf_r+0x5c>
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f7ff fe7e 	bl	800ccb4 <__swsetup_r>
 800cfb8:	b170      	cbz	r0, 800cfd8 <_vfiprintf_r+0x5c>
 800cfba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfbc:	07dc      	lsls	r4, r3, #31
 800cfbe:	d504      	bpl.n	800cfca <_vfiprintf_r+0x4e>
 800cfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc4:	b01d      	add	sp, #116	@ 0x74
 800cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfca:	89ab      	ldrh	r3, [r5, #12]
 800cfcc:	0598      	lsls	r0, r3, #22
 800cfce:	d4f7      	bmi.n	800cfc0 <_vfiprintf_r+0x44>
 800cfd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfd2:	f7ff ff4f 	bl	800ce74 <__retarget_lock_release_recursive>
 800cfd6:	e7f3      	b.n	800cfc0 <_vfiprintf_r+0x44>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfdc:	2320      	movs	r3, #32
 800cfde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe6:	2330      	movs	r3, #48	@ 0x30
 800cfe8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d198 <_vfiprintf_r+0x21c>
 800cfec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cff0:	f04f 0901 	mov.w	r9, #1
 800cff4:	4623      	mov	r3, r4
 800cff6:	469a      	mov	sl, r3
 800cff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cffc:	b10a      	cbz	r2, 800d002 <_vfiprintf_r+0x86>
 800cffe:	2a25      	cmp	r2, #37	@ 0x25
 800d000:	d1f9      	bne.n	800cff6 <_vfiprintf_r+0x7a>
 800d002:	ebba 0b04 	subs.w	fp, sl, r4
 800d006:	d00b      	beq.n	800d020 <_vfiprintf_r+0xa4>
 800d008:	465b      	mov	r3, fp
 800d00a:	4622      	mov	r2, r4
 800d00c:	4629      	mov	r1, r5
 800d00e:	4630      	mov	r0, r6
 800d010:	f7ff ffa1 	bl	800cf56 <__sfputs_r>
 800d014:	3001      	adds	r0, #1
 800d016:	f000 80a7 	beq.w	800d168 <_vfiprintf_r+0x1ec>
 800d01a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d01c:	445a      	add	r2, fp
 800d01e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d020:	f89a 3000 	ldrb.w	r3, [sl]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 809f 	beq.w	800d168 <_vfiprintf_r+0x1ec>
 800d02a:	2300      	movs	r3, #0
 800d02c:	f04f 32ff 	mov.w	r2, #4294967295
 800d030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d034:	f10a 0a01 	add.w	sl, sl, #1
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	9307      	str	r3, [sp, #28]
 800d03c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d040:	931a      	str	r3, [sp, #104]	@ 0x68
 800d042:	4654      	mov	r4, sl
 800d044:	2205      	movs	r2, #5
 800d046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d04a:	4853      	ldr	r0, [pc, #332]	@ (800d198 <_vfiprintf_r+0x21c>)
 800d04c:	f7f3 f948 	bl	80002e0 <memchr>
 800d050:	9a04      	ldr	r2, [sp, #16]
 800d052:	b9d8      	cbnz	r0, 800d08c <_vfiprintf_r+0x110>
 800d054:	06d1      	lsls	r1, r2, #27
 800d056:	bf44      	itt	mi
 800d058:	2320      	movmi	r3, #32
 800d05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d05e:	0713      	lsls	r3, r2, #28
 800d060:	bf44      	itt	mi
 800d062:	232b      	movmi	r3, #43	@ 0x2b
 800d064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d068:	f89a 3000 	ldrb.w	r3, [sl]
 800d06c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d06e:	d015      	beq.n	800d09c <_vfiprintf_r+0x120>
 800d070:	9a07      	ldr	r2, [sp, #28]
 800d072:	4654      	mov	r4, sl
 800d074:	2000      	movs	r0, #0
 800d076:	f04f 0c0a 	mov.w	ip, #10
 800d07a:	4621      	mov	r1, r4
 800d07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d080:	3b30      	subs	r3, #48	@ 0x30
 800d082:	2b09      	cmp	r3, #9
 800d084:	d94b      	bls.n	800d11e <_vfiprintf_r+0x1a2>
 800d086:	b1b0      	cbz	r0, 800d0b6 <_vfiprintf_r+0x13a>
 800d088:	9207      	str	r2, [sp, #28]
 800d08a:	e014      	b.n	800d0b6 <_vfiprintf_r+0x13a>
 800d08c:	eba0 0308 	sub.w	r3, r0, r8
 800d090:	fa09 f303 	lsl.w	r3, r9, r3
 800d094:	4313      	orrs	r3, r2
 800d096:	9304      	str	r3, [sp, #16]
 800d098:	46a2      	mov	sl, r4
 800d09a:	e7d2      	b.n	800d042 <_vfiprintf_r+0xc6>
 800d09c:	9b03      	ldr	r3, [sp, #12]
 800d09e:	1d19      	adds	r1, r3, #4
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	9103      	str	r1, [sp, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	bfbb      	ittet	lt
 800d0a8:	425b      	neglt	r3, r3
 800d0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ae:	9307      	strge	r3, [sp, #28]
 800d0b0:	9307      	strlt	r3, [sp, #28]
 800d0b2:	bfb8      	it	lt
 800d0b4:	9204      	strlt	r2, [sp, #16]
 800d0b6:	7823      	ldrb	r3, [r4, #0]
 800d0b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0ba:	d10a      	bne.n	800d0d2 <_vfiprintf_r+0x156>
 800d0bc:	7863      	ldrb	r3, [r4, #1]
 800d0be:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0c0:	d132      	bne.n	800d128 <_vfiprintf_r+0x1ac>
 800d0c2:	9b03      	ldr	r3, [sp, #12]
 800d0c4:	1d1a      	adds	r2, r3, #4
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	9203      	str	r2, [sp, #12]
 800d0ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0ce:	3402      	adds	r4, #2
 800d0d0:	9305      	str	r3, [sp, #20]
 800d0d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1a8 <_vfiprintf_r+0x22c>
 800d0d6:	7821      	ldrb	r1, [r4, #0]
 800d0d8:	2203      	movs	r2, #3
 800d0da:	4650      	mov	r0, sl
 800d0dc:	f7f3 f900 	bl	80002e0 <memchr>
 800d0e0:	b138      	cbz	r0, 800d0f2 <_vfiprintf_r+0x176>
 800d0e2:	9b04      	ldr	r3, [sp, #16]
 800d0e4:	eba0 000a 	sub.w	r0, r0, sl
 800d0e8:	2240      	movs	r2, #64	@ 0x40
 800d0ea:	4082      	lsls	r2, r0
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	3401      	adds	r4, #1
 800d0f0:	9304      	str	r3, [sp, #16]
 800d0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f6:	4829      	ldr	r0, [pc, #164]	@ (800d19c <_vfiprintf_r+0x220>)
 800d0f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0fc:	2206      	movs	r2, #6
 800d0fe:	f7f3 f8ef 	bl	80002e0 <memchr>
 800d102:	2800      	cmp	r0, #0
 800d104:	d03f      	beq.n	800d186 <_vfiprintf_r+0x20a>
 800d106:	4b26      	ldr	r3, [pc, #152]	@ (800d1a0 <_vfiprintf_r+0x224>)
 800d108:	bb1b      	cbnz	r3, 800d152 <_vfiprintf_r+0x1d6>
 800d10a:	9b03      	ldr	r3, [sp, #12]
 800d10c:	3307      	adds	r3, #7
 800d10e:	f023 0307 	bic.w	r3, r3, #7
 800d112:	3308      	adds	r3, #8
 800d114:	9303      	str	r3, [sp, #12]
 800d116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d118:	443b      	add	r3, r7
 800d11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11c:	e76a      	b.n	800cff4 <_vfiprintf_r+0x78>
 800d11e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d122:	460c      	mov	r4, r1
 800d124:	2001      	movs	r0, #1
 800d126:	e7a8      	b.n	800d07a <_vfiprintf_r+0xfe>
 800d128:	2300      	movs	r3, #0
 800d12a:	3401      	adds	r4, #1
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	4619      	mov	r1, r3
 800d130:	f04f 0c0a 	mov.w	ip, #10
 800d134:	4620      	mov	r0, r4
 800d136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d13a:	3a30      	subs	r2, #48	@ 0x30
 800d13c:	2a09      	cmp	r2, #9
 800d13e:	d903      	bls.n	800d148 <_vfiprintf_r+0x1cc>
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0c6      	beq.n	800d0d2 <_vfiprintf_r+0x156>
 800d144:	9105      	str	r1, [sp, #20]
 800d146:	e7c4      	b.n	800d0d2 <_vfiprintf_r+0x156>
 800d148:	fb0c 2101 	mla	r1, ip, r1, r2
 800d14c:	4604      	mov	r4, r0
 800d14e:	2301      	movs	r3, #1
 800d150:	e7f0      	b.n	800d134 <_vfiprintf_r+0x1b8>
 800d152:	ab03      	add	r3, sp, #12
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	462a      	mov	r2, r5
 800d158:	4b12      	ldr	r3, [pc, #72]	@ (800d1a4 <_vfiprintf_r+0x228>)
 800d15a:	a904      	add	r1, sp, #16
 800d15c:	4630      	mov	r0, r6
 800d15e:	f3af 8000 	nop.w
 800d162:	4607      	mov	r7, r0
 800d164:	1c78      	adds	r0, r7, #1
 800d166:	d1d6      	bne.n	800d116 <_vfiprintf_r+0x19a>
 800d168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d16a:	07d9      	lsls	r1, r3, #31
 800d16c:	d405      	bmi.n	800d17a <_vfiprintf_r+0x1fe>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	059a      	lsls	r2, r3, #22
 800d172:	d402      	bmi.n	800d17a <_vfiprintf_r+0x1fe>
 800d174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d176:	f7ff fe7d 	bl	800ce74 <__retarget_lock_release_recursive>
 800d17a:	89ab      	ldrh	r3, [r5, #12]
 800d17c:	065b      	lsls	r3, r3, #25
 800d17e:	f53f af1f 	bmi.w	800cfc0 <_vfiprintf_r+0x44>
 800d182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d184:	e71e      	b.n	800cfc4 <_vfiprintf_r+0x48>
 800d186:	ab03      	add	r3, sp, #12
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	462a      	mov	r2, r5
 800d18c:	4b05      	ldr	r3, [pc, #20]	@ (800d1a4 <_vfiprintf_r+0x228>)
 800d18e:	a904      	add	r1, sp, #16
 800d190:	4630      	mov	r0, r6
 800d192:	f000 f879 	bl	800d288 <_printf_i>
 800d196:	e7e4      	b.n	800d162 <_vfiprintf_r+0x1e6>
 800d198:	0800e428 	.word	0x0800e428
 800d19c:	0800e432 	.word	0x0800e432
 800d1a0:	00000000 	.word	0x00000000
 800d1a4:	0800cf57 	.word	0x0800cf57
 800d1a8:	0800e42e 	.word	0x0800e42e

0800d1ac <_printf_common>:
 800d1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b0:	4616      	mov	r6, r2
 800d1b2:	4698      	mov	r8, r3
 800d1b4:	688a      	ldr	r2, [r1, #8]
 800d1b6:	690b      	ldr	r3, [r1, #16]
 800d1b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	bfb8      	it	lt
 800d1c0:	4613      	movlt	r3, r2
 800d1c2:	6033      	str	r3, [r6, #0]
 800d1c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	b10a      	cbz	r2, 800d1d2 <_printf_common+0x26>
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	6033      	str	r3, [r6, #0]
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	0699      	lsls	r1, r3, #26
 800d1d6:	bf42      	ittt	mi
 800d1d8:	6833      	ldrmi	r3, [r6, #0]
 800d1da:	3302      	addmi	r3, #2
 800d1dc:	6033      	strmi	r3, [r6, #0]
 800d1de:	6825      	ldr	r5, [r4, #0]
 800d1e0:	f015 0506 	ands.w	r5, r5, #6
 800d1e4:	d106      	bne.n	800d1f4 <_printf_common+0x48>
 800d1e6:	f104 0a19 	add.w	sl, r4, #25
 800d1ea:	68e3      	ldr	r3, [r4, #12]
 800d1ec:	6832      	ldr	r2, [r6, #0]
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	42ab      	cmp	r3, r5
 800d1f2:	dc26      	bgt.n	800d242 <_printf_common+0x96>
 800d1f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1f8:	6822      	ldr	r2, [r4, #0]
 800d1fa:	3b00      	subs	r3, #0
 800d1fc:	bf18      	it	ne
 800d1fe:	2301      	movne	r3, #1
 800d200:	0692      	lsls	r2, r2, #26
 800d202:	d42b      	bmi.n	800d25c <_printf_common+0xb0>
 800d204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d208:	4641      	mov	r1, r8
 800d20a:	4638      	mov	r0, r7
 800d20c:	47c8      	blx	r9
 800d20e:	3001      	adds	r0, #1
 800d210:	d01e      	beq.n	800d250 <_printf_common+0xa4>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	6922      	ldr	r2, [r4, #16]
 800d216:	f003 0306 	and.w	r3, r3, #6
 800d21a:	2b04      	cmp	r3, #4
 800d21c:	bf02      	ittt	eq
 800d21e:	68e5      	ldreq	r5, [r4, #12]
 800d220:	6833      	ldreq	r3, [r6, #0]
 800d222:	1aed      	subeq	r5, r5, r3
 800d224:	68a3      	ldr	r3, [r4, #8]
 800d226:	bf0c      	ite	eq
 800d228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d22c:	2500      	movne	r5, #0
 800d22e:	4293      	cmp	r3, r2
 800d230:	bfc4      	itt	gt
 800d232:	1a9b      	subgt	r3, r3, r2
 800d234:	18ed      	addgt	r5, r5, r3
 800d236:	2600      	movs	r6, #0
 800d238:	341a      	adds	r4, #26
 800d23a:	42b5      	cmp	r5, r6
 800d23c:	d11a      	bne.n	800d274 <_printf_common+0xc8>
 800d23e:	2000      	movs	r0, #0
 800d240:	e008      	b.n	800d254 <_printf_common+0xa8>
 800d242:	2301      	movs	r3, #1
 800d244:	4652      	mov	r2, sl
 800d246:	4641      	mov	r1, r8
 800d248:	4638      	mov	r0, r7
 800d24a:	47c8      	blx	r9
 800d24c:	3001      	adds	r0, #1
 800d24e:	d103      	bne.n	800d258 <_printf_common+0xac>
 800d250:	f04f 30ff 	mov.w	r0, #4294967295
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d258:	3501      	adds	r5, #1
 800d25a:	e7c6      	b.n	800d1ea <_printf_common+0x3e>
 800d25c:	18e1      	adds	r1, r4, r3
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	2030      	movs	r0, #48	@ 0x30
 800d262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d266:	4422      	add	r2, r4
 800d268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d26c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d270:	3302      	adds	r3, #2
 800d272:	e7c7      	b.n	800d204 <_printf_common+0x58>
 800d274:	2301      	movs	r3, #1
 800d276:	4622      	mov	r2, r4
 800d278:	4641      	mov	r1, r8
 800d27a:	4638      	mov	r0, r7
 800d27c:	47c8      	blx	r9
 800d27e:	3001      	adds	r0, #1
 800d280:	d0e6      	beq.n	800d250 <_printf_common+0xa4>
 800d282:	3601      	adds	r6, #1
 800d284:	e7d9      	b.n	800d23a <_printf_common+0x8e>
	...

0800d288 <_printf_i>:
 800d288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	7e0f      	ldrb	r7, [r1, #24]
 800d28e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d290:	2f78      	cmp	r7, #120	@ 0x78
 800d292:	4691      	mov	r9, r2
 800d294:	4680      	mov	r8, r0
 800d296:	460c      	mov	r4, r1
 800d298:	469a      	mov	sl, r3
 800d29a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d29e:	d807      	bhi.n	800d2b0 <_printf_i+0x28>
 800d2a0:	2f62      	cmp	r7, #98	@ 0x62
 800d2a2:	d80a      	bhi.n	800d2ba <_printf_i+0x32>
 800d2a4:	2f00      	cmp	r7, #0
 800d2a6:	f000 80d1 	beq.w	800d44c <_printf_i+0x1c4>
 800d2aa:	2f58      	cmp	r7, #88	@ 0x58
 800d2ac:	f000 80b8 	beq.w	800d420 <_printf_i+0x198>
 800d2b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2b8:	e03a      	b.n	800d330 <_printf_i+0xa8>
 800d2ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2be:	2b15      	cmp	r3, #21
 800d2c0:	d8f6      	bhi.n	800d2b0 <_printf_i+0x28>
 800d2c2:	a101      	add	r1, pc, #4	@ (adr r1, 800d2c8 <_printf_i+0x40>)
 800d2c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2c8:	0800d321 	.word	0x0800d321
 800d2cc:	0800d335 	.word	0x0800d335
 800d2d0:	0800d2b1 	.word	0x0800d2b1
 800d2d4:	0800d2b1 	.word	0x0800d2b1
 800d2d8:	0800d2b1 	.word	0x0800d2b1
 800d2dc:	0800d2b1 	.word	0x0800d2b1
 800d2e0:	0800d335 	.word	0x0800d335
 800d2e4:	0800d2b1 	.word	0x0800d2b1
 800d2e8:	0800d2b1 	.word	0x0800d2b1
 800d2ec:	0800d2b1 	.word	0x0800d2b1
 800d2f0:	0800d2b1 	.word	0x0800d2b1
 800d2f4:	0800d433 	.word	0x0800d433
 800d2f8:	0800d35f 	.word	0x0800d35f
 800d2fc:	0800d3ed 	.word	0x0800d3ed
 800d300:	0800d2b1 	.word	0x0800d2b1
 800d304:	0800d2b1 	.word	0x0800d2b1
 800d308:	0800d455 	.word	0x0800d455
 800d30c:	0800d2b1 	.word	0x0800d2b1
 800d310:	0800d35f 	.word	0x0800d35f
 800d314:	0800d2b1 	.word	0x0800d2b1
 800d318:	0800d2b1 	.word	0x0800d2b1
 800d31c:	0800d3f5 	.word	0x0800d3f5
 800d320:	6833      	ldr	r3, [r6, #0]
 800d322:	1d1a      	adds	r2, r3, #4
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6032      	str	r2, [r6, #0]
 800d328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d32c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d330:	2301      	movs	r3, #1
 800d332:	e09c      	b.n	800d46e <_printf_i+0x1e6>
 800d334:	6833      	ldr	r3, [r6, #0]
 800d336:	6820      	ldr	r0, [r4, #0]
 800d338:	1d19      	adds	r1, r3, #4
 800d33a:	6031      	str	r1, [r6, #0]
 800d33c:	0606      	lsls	r6, r0, #24
 800d33e:	d501      	bpl.n	800d344 <_printf_i+0xbc>
 800d340:	681d      	ldr	r5, [r3, #0]
 800d342:	e003      	b.n	800d34c <_printf_i+0xc4>
 800d344:	0645      	lsls	r5, r0, #25
 800d346:	d5fb      	bpl.n	800d340 <_printf_i+0xb8>
 800d348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d34c:	2d00      	cmp	r5, #0
 800d34e:	da03      	bge.n	800d358 <_printf_i+0xd0>
 800d350:	232d      	movs	r3, #45	@ 0x2d
 800d352:	426d      	negs	r5, r5
 800d354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d358:	4858      	ldr	r0, [pc, #352]	@ (800d4bc <_printf_i+0x234>)
 800d35a:	230a      	movs	r3, #10
 800d35c:	e011      	b.n	800d382 <_printf_i+0xfa>
 800d35e:	6821      	ldr	r1, [r4, #0]
 800d360:	6833      	ldr	r3, [r6, #0]
 800d362:	0608      	lsls	r0, r1, #24
 800d364:	f853 5b04 	ldr.w	r5, [r3], #4
 800d368:	d402      	bmi.n	800d370 <_printf_i+0xe8>
 800d36a:	0649      	lsls	r1, r1, #25
 800d36c:	bf48      	it	mi
 800d36e:	b2ad      	uxthmi	r5, r5
 800d370:	2f6f      	cmp	r7, #111	@ 0x6f
 800d372:	4852      	ldr	r0, [pc, #328]	@ (800d4bc <_printf_i+0x234>)
 800d374:	6033      	str	r3, [r6, #0]
 800d376:	bf14      	ite	ne
 800d378:	230a      	movne	r3, #10
 800d37a:	2308      	moveq	r3, #8
 800d37c:	2100      	movs	r1, #0
 800d37e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d382:	6866      	ldr	r6, [r4, #4]
 800d384:	60a6      	str	r6, [r4, #8]
 800d386:	2e00      	cmp	r6, #0
 800d388:	db05      	blt.n	800d396 <_printf_i+0x10e>
 800d38a:	6821      	ldr	r1, [r4, #0]
 800d38c:	432e      	orrs	r6, r5
 800d38e:	f021 0104 	bic.w	r1, r1, #4
 800d392:	6021      	str	r1, [r4, #0]
 800d394:	d04b      	beq.n	800d42e <_printf_i+0x1a6>
 800d396:	4616      	mov	r6, r2
 800d398:	fbb5 f1f3 	udiv	r1, r5, r3
 800d39c:	fb03 5711 	mls	r7, r3, r1, r5
 800d3a0:	5dc7      	ldrb	r7, [r0, r7]
 800d3a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3a6:	462f      	mov	r7, r5
 800d3a8:	42bb      	cmp	r3, r7
 800d3aa:	460d      	mov	r5, r1
 800d3ac:	d9f4      	bls.n	800d398 <_printf_i+0x110>
 800d3ae:	2b08      	cmp	r3, #8
 800d3b0:	d10b      	bne.n	800d3ca <_printf_i+0x142>
 800d3b2:	6823      	ldr	r3, [r4, #0]
 800d3b4:	07df      	lsls	r7, r3, #31
 800d3b6:	d508      	bpl.n	800d3ca <_printf_i+0x142>
 800d3b8:	6923      	ldr	r3, [r4, #16]
 800d3ba:	6861      	ldr	r1, [r4, #4]
 800d3bc:	4299      	cmp	r1, r3
 800d3be:	bfde      	ittt	le
 800d3c0:	2330      	movle	r3, #48	@ 0x30
 800d3c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3ca:	1b92      	subs	r2, r2, r6
 800d3cc:	6122      	str	r2, [r4, #16]
 800d3ce:	f8cd a000 	str.w	sl, [sp]
 800d3d2:	464b      	mov	r3, r9
 800d3d4:	aa03      	add	r2, sp, #12
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	4640      	mov	r0, r8
 800d3da:	f7ff fee7 	bl	800d1ac <_printf_common>
 800d3de:	3001      	adds	r0, #1
 800d3e0:	d14a      	bne.n	800d478 <_printf_i+0x1f0>
 800d3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e6:	b004      	add	sp, #16
 800d3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ec:	6823      	ldr	r3, [r4, #0]
 800d3ee:	f043 0320 	orr.w	r3, r3, #32
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	4832      	ldr	r0, [pc, #200]	@ (800d4c0 <_printf_i+0x238>)
 800d3f6:	2778      	movs	r7, #120	@ 0x78
 800d3f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	6831      	ldr	r1, [r6, #0]
 800d400:	061f      	lsls	r7, r3, #24
 800d402:	f851 5b04 	ldr.w	r5, [r1], #4
 800d406:	d402      	bmi.n	800d40e <_printf_i+0x186>
 800d408:	065f      	lsls	r7, r3, #25
 800d40a:	bf48      	it	mi
 800d40c:	b2ad      	uxthmi	r5, r5
 800d40e:	6031      	str	r1, [r6, #0]
 800d410:	07d9      	lsls	r1, r3, #31
 800d412:	bf44      	itt	mi
 800d414:	f043 0320 	orrmi.w	r3, r3, #32
 800d418:	6023      	strmi	r3, [r4, #0]
 800d41a:	b11d      	cbz	r5, 800d424 <_printf_i+0x19c>
 800d41c:	2310      	movs	r3, #16
 800d41e:	e7ad      	b.n	800d37c <_printf_i+0xf4>
 800d420:	4826      	ldr	r0, [pc, #152]	@ (800d4bc <_printf_i+0x234>)
 800d422:	e7e9      	b.n	800d3f8 <_printf_i+0x170>
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	f023 0320 	bic.w	r3, r3, #32
 800d42a:	6023      	str	r3, [r4, #0]
 800d42c:	e7f6      	b.n	800d41c <_printf_i+0x194>
 800d42e:	4616      	mov	r6, r2
 800d430:	e7bd      	b.n	800d3ae <_printf_i+0x126>
 800d432:	6833      	ldr	r3, [r6, #0]
 800d434:	6825      	ldr	r5, [r4, #0]
 800d436:	6961      	ldr	r1, [r4, #20]
 800d438:	1d18      	adds	r0, r3, #4
 800d43a:	6030      	str	r0, [r6, #0]
 800d43c:	062e      	lsls	r6, r5, #24
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	d501      	bpl.n	800d446 <_printf_i+0x1be>
 800d442:	6019      	str	r1, [r3, #0]
 800d444:	e002      	b.n	800d44c <_printf_i+0x1c4>
 800d446:	0668      	lsls	r0, r5, #25
 800d448:	d5fb      	bpl.n	800d442 <_printf_i+0x1ba>
 800d44a:	8019      	strh	r1, [r3, #0]
 800d44c:	2300      	movs	r3, #0
 800d44e:	6123      	str	r3, [r4, #16]
 800d450:	4616      	mov	r6, r2
 800d452:	e7bc      	b.n	800d3ce <_printf_i+0x146>
 800d454:	6833      	ldr	r3, [r6, #0]
 800d456:	1d1a      	adds	r2, r3, #4
 800d458:	6032      	str	r2, [r6, #0]
 800d45a:	681e      	ldr	r6, [r3, #0]
 800d45c:	6862      	ldr	r2, [r4, #4]
 800d45e:	2100      	movs	r1, #0
 800d460:	4630      	mov	r0, r6
 800d462:	f7f2 ff3d 	bl	80002e0 <memchr>
 800d466:	b108      	cbz	r0, 800d46c <_printf_i+0x1e4>
 800d468:	1b80      	subs	r0, r0, r6
 800d46a:	6060      	str	r0, [r4, #4]
 800d46c:	6863      	ldr	r3, [r4, #4]
 800d46e:	6123      	str	r3, [r4, #16]
 800d470:	2300      	movs	r3, #0
 800d472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d476:	e7aa      	b.n	800d3ce <_printf_i+0x146>
 800d478:	6923      	ldr	r3, [r4, #16]
 800d47a:	4632      	mov	r2, r6
 800d47c:	4649      	mov	r1, r9
 800d47e:	4640      	mov	r0, r8
 800d480:	47d0      	blx	sl
 800d482:	3001      	adds	r0, #1
 800d484:	d0ad      	beq.n	800d3e2 <_printf_i+0x15a>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	079b      	lsls	r3, r3, #30
 800d48a:	d413      	bmi.n	800d4b4 <_printf_i+0x22c>
 800d48c:	68e0      	ldr	r0, [r4, #12]
 800d48e:	9b03      	ldr	r3, [sp, #12]
 800d490:	4298      	cmp	r0, r3
 800d492:	bfb8      	it	lt
 800d494:	4618      	movlt	r0, r3
 800d496:	e7a6      	b.n	800d3e6 <_printf_i+0x15e>
 800d498:	2301      	movs	r3, #1
 800d49a:	4632      	mov	r2, r6
 800d49c:	4649      	mov	r1, r9
 800d49e:	4640      	mov	r0, r8
 800d4a0:	47d0      	blx	sl
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	d09d      	beq.n	800d3e2 <_printf_i+0x15a>
 800d4a6:	3501      	adds	r5, #1
 800d4a8:	68e3      	ldr	r3, [r4, #12]
 800d4aa:	9903      	ldr	r1, [sp, #12]
 800d4ac:	1a5b      	subs	r3, r3, r1
 800d4ae:	42ab      	cmp	r3, r5
 800d4b0:	dcf2      	bgt.n	800d498 <_printf_i+0x210>
 800d4b2:	e7eb      	b.n	800d48c <_printf_i+0x204>
 800d4b4:	2500      	movs	r5, #0
 800d4b6:	f104 0619 	add.w	r6, r4, #25
 800d4ba:	e7f5      	b.n	800d4a8 <_printf_i+0x220>
 800d4bc:	0800e439 	.word	0x0800e439
 800d4c0:	0800e44a 	.word	0x0800e44a

0800d4c4 <__sflush_r>:
 800d4c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4cc:	0716      	lsls	r6, r2, #28
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	d454      	bmi.n	800d57e <__sflush_r+0xba>
 800d4d4:	684b      	ldr	r3, [r1, #4]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	dc02      	bgt.n	800d4e0 <__sflush_r+0x1c>
 800d4da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	dd48      	ble.n	800d572 <__sflush_r+0xae>
 800d4e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4e2:	2e00      	cmp	r6, #0
 800d4e4:	d045      	beq.n	800d572 <__sflush_r+0xae>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4ec:	682f      	ldr	r7, [r5, #0]
 800d4ee:	6a21      	ldr	r1, [r4, #32]
 800d4f0:	602b      	str	r3, [r5, #0]
 800d4f2:	d030      	beq.n	800d556 <__sflush_r+0x92>
 800d4f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4f6:	89a3      	ldrh	r3, [r4, #12]
 800d4f8:	0759      	lsls	r1, r3, #29
 800d4fa:	d505      	bpl.n	800d508 <__sflush_r+0x44>
 800d4fc:	6863      	ldr	r3, [r4, #4]
 800d4fe:	1ad2      	subs	r2, r2, r3
 800d500:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d502:	b10b      	cbz	r3, 800d508 <__sflush_r+0x44>
 800d504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d506:	1ad2      	subs	r2, r2, r3
 800d508:	2300      	movs	r3, #0
 800d50a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d50c:	6a21      	ldr	r1, [r4, #32]
 800d50e:	4628      	mov	r0, r5
 800d510:	47b0      	blx	r6
 800d512:	1c43      	adds	r3, r0, #1
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	d106      	bne.n	800d526 <__sflush_r+0x62>
 800d518:	6829      	ldr	r1, [r5, #0]
 800d51a:	291d      	cmp	r1, #29
 800d51c:	d82b      	bhi.n	800d576 <__sflush_r+0xb2>
 800d51e:	4a2a      	ldr	r2, [pc, #168]	@ (800d5c8 <__sflush_r+0x104>)
 800d520:	40ca      	lsrs	r2, r1
 800d522:	07d6      	lsls	r6, r2, #31
 800d524:	d527      	bpl.n	800d576 <__sflush_r+0xb2>
 800d526:	2200      	movs	r2, #0
 800d528:	6062      	str	r2, [r4, #4]
 800d52a:	04d9      	lsls	r1, r3, #19
 800d52c:	6922      	ldr	r2, [r4, #16]
 800d52e:	6022      	str	r2, [r4, #0]
 800d530:	d504      	bpl.n	800d53c <__sflush_r+0x78>
 800d532:	1c42      	adds	r2, r0, #1
 800d534:	d101      	bne.n	800d53a <__sflush_r+0x76>
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	b903      	cbnz	r3, 800d53c <__sflush_r+0x78>
 800d53a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d53c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d53e:	602f      	str	r7, [r5, #0]
 800d540:	b1b9      	cbz	r1, 800d572 <__sflush_r+0xae>
 800d542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d546:	4299      	cmp	r1, r3
 800d548:	d002      	beq.n	800d550 <__sflush_r+0x8c>
 800d54a:	4628      	mov	r0, r5
 800d54c:	f7ff fca2 	bl	800ce94 <_free_r>
 800d550:	2300      	movs	r3, #0
 800d552:	6363      	str	r3, [r4, #52]	@ 0x34
 800d554:	e00d      	b.n	800d572 <__sflush_r+0xae>
 800d556:	2301      	movs	r3, #1
 800d558:	4628      	mov	r0, r5
 800d55a:	47b0      	blx	r6
 800d55c:	4602      	mov	r2, r0
 800d55e:	1c50      	adds	r0, r2, #1
 800d560:	d1c9      	bne.n	800d4f6 <__sflush_r+0x32>
 800d562:	682b      	ldr	r3, [r5, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0c6      	beq.n	800d4f6 <__sflush_r+0x32>
 800d568:	2b1d      	cmp	r3, #29
 800d56a:	d001      	beq.n	800d570 <__sflush_r+0xac>
 800d56c:	2b16      	cmp	r3, #22
 800d56e:	d11e      	bne.n	800d5ae <__sflush_r+0xea>
 800d570:	602f      	str	r7, [r5, #0]
 800d572:	2000      	movs	r0, #0
 800d574:	e022      	b.n	800d5bc <__sflush_r+0xf8>
 800d576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d57a:	b21b      	sxth	r3, r3
 800d57c:	e01b      	b.n	800d5b6 <__sflush_r+0xf2>
 800d57e:	690f      	ldr	r7, [r1, #16]
 800d580:	2f00      	cmp	r7, #0
 800d582:	d0f6      	beq.n	800d572 <__sflush_r+0xae>
 800d584:	0793      	lsls	r3, r2, #30
 800d586:	680e      	ldr	r6, [r1, #0]
 800d588:	bf08      	it	eq
 800d58a:	694b      	ldreq	r3, [r1, #20]
 800d58c:	600f      	str	r7, [r1, #0]
 800d58e:	bf18      	it	ne
 800d590:	2300      	movne	r3, #0
 800d592:	eba6 0807 	sub.w	r8, r6, r7
 800d596:	608b      	str	r3, [r1, #8]
 800d598:	f1b8 0f00 	cmp.w	r8, #0
 800d59c:	dde9      	ble.n	800d572 <__sflush_r+0xae>
 800d59e:	6a21      	ldr	r1, [r4, #32]
 800d5a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d5a2:	4643      	mov	r3, r8
 800d5a4:	463a      	mov	r2, r7
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	47b0      	blx	r6
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	dc08      	bgt.n	800d5c0 <__sflush_r+0xfc>
 800d5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5b6:	81a3      	strh	r3, [r4, #12]
 800d5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c0:	4407      	add	r7, r0
 800d5c2:	eba8 0800 	sub.w	r8, r8, r0
 800d5c6:	e7e7      	b.n	800d598 <__sflush_r+0xd4>
 800d5c8:	20400001 	.word	0x20400001

0800d5cc <_fflush_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	690b      	ldr	r3, [r1, #16]
 800d5d0:	4605      	mov	r5, r0
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	b913      	cbnz	r3, 800d5dc <_fflush_r+0x10>
 800d5d6:	2500      	movs	r5, #0
 800d5d8:	4628      	mov	r0, r5
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	b118      	cbz	r0, 800d5e6 <_fflush_r+0x1a>
 800d5de:	6a03      	ldr	r3, [r0, #32]
 800d5e0:	b90b      	cbnz	r3, 800d5e6 <_fflush_r+0x1a>
 800d5e2:	f7ff fa37 	bl	800ca54 <__sinit>
 800d5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d0f3      	beq.n	800d5d6 <_fflush_r+0xa>
 800d5ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5f0:	07d0      	lsls	r0, r2, #31
 800d5f2:	d404      	bmi.n	800d5fe <_fflush_r+0x32>
 800d5f4:	0599      	lsls	r1, r3, #22
 800d5f6:	d402      	bmi.n	800d5fe <_fflush_r+0x32>
 800d5f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5fa:	f7ff fc3a 	bl	800ce72 <__retarget_lock_acquire_recursive>
 800d5fe:	4628      	mov	r0, r5
 800d600:	4621      	mov	r1, r4
 800d602:	f7ff ff5f 	bl	800d4c4 <__sflush_r>
 800d606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d608:	07da      	lsls	r2, r3, #31
 800d60a:	4605      	mov	r5, r0
 800d60c:	d4e4      	bmi.n	800d5d8 <_fflush_r+0xc>
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	059b      	lsls	r3, r3, #22
 800d612:	d4e1      	bmi.n	800d5d8 <_fflush_r+0xc>
 800d614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d616:	f7ff fc2d 	bl	800ce74 <__retarget_lock_release_recursive>
 800d61a:	e7dd      	b.n	800d5d8 <_fflush_r+0xc>

0800d61c <__swhatbuf_r>:
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	460c      	mov	r4, r1
 800d620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d624:	2900      	cmp	r1, #0
 800d626:	b096      	sub	sp, #88	@ 0x58
 800d628:	4615      	mov	r5, r2
 800d62a:	461e      	mov	r6, r3
 800d62c:	da0d      	bge.n	800d64a <__swhatbuf_r+0x2e>
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d634:	f04f 0100 	mov.w	r1, #0
 800d638:	bf14      	ite	ne
 800d63a:	2340      	movne	r3, #64	@ 0x40
 800d63c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d640:	2000      	movs	r0, #0
 800d642:	6031      	str	r1, [r6, #0]
 800d644:	602b      	str	r3, [r5, #0]
 800d646:	b016      	add	sp, #88	@ 0x58
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	466a      	mov	r2, sp
 800d64c:	f000 f87c 	bl	800d748 <_fstat_r>
 800d650:	2800      	cmp	r0, #0
 800d652:	dbec      	blt.n	800d62e <__swhatbuf_r+0x12>
 800d654:	9901      	ldr	r1, [sp, #4]
 800d656:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d65a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d65e:	4259      	negs	r1, r3
 800d660:	4159      	adcs	r1, r3
 800d662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d666:	e7eb      	b.n	800d640 <__swhatbuf_r+0x24>

0800d668 <__smakebuf_r>:
 800d668:	898b      	ldrh	r3, [r1, #12]
 800d66a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d66c:	079d      	lsls	r5, r3, #30
 800d66e:	4606      	mov	r6, r0
 800d670:	460c      	mov	r4, r1
 800d672:	d507      	bpl.n	800d684 <__smakebuf_r+0x1c>
 800d674:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	6123      	str	r3, [r4, #16]
 800d67c:	2301      	movs	r3, #1
 800d67e:	6163      	str	r3, [r4, #20]
 800d680:	b003      	add	sp, #12
 800d682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d684:	ab01      	add	r3, sp, #4
 800d686:	466a      	mov	r2, sp
 800d688:	f7ff ffc8 	bl	800d61c <__swhatbuf_r>
 800d68c:	9f00      	ldr	r7, [sp, #0]
 800d68e:	4605      	mov	r5, r0
 800d690:	4639      	mov	r1, r7
 800d692:	4630      	mov	r0, r6
 800d694:	f7ff f8c6 	bl	800c824 <_malloc_r>
 800d698:	b948      	cbnz	r0, 800d6ae <__smakebuf_r+0x46>
 800d69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69e:	059a      	lsls	r2, r3, #22
 800d6a0:	d4ee      	bmi.n	800d680 <__smakebuf_r+0x18>
 800d6a2:	f023 0303 	bic.w	r3, r3, #3
 800d6a6:	f043 0302 	orr.w	r3, r3, #2
 800d6aa:	81a3      	strh	r3, [r4, #12]
 800d6ac:	e7e2      	b.n	800d674 <__smakebuf_r+0xc>
 800d6ae:	89a3      	ldrh	r3, [r4, #12]
 800d6b0:	6020      	str	r0, [r4, #0]
 800d6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6b6:	81a3      	strh	r3, [r4, #12]
 800d6b8:	9b01      	ldr	r3, [sp, #4]
 800d6ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6be:	b15b      	cbz	r3, 800d6d8 <__smakebuf_r+0x70>
 800d6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 f851 	bl	800d76c <_isatty_r>
 800d6ca:	b128      	cbz	r0, 800d6d8 <__smakebuf_r+0x70>
 800d6cc:	89a3      	ldrh	r3, [r4, #12]
 800d6ce:	f023 0303 	bic.w	r3, r3, #3
 800d6d2:	f043 0301 	orr.w	r3, r3, #1
 800d6d6:	81a3      	strh	r3, [r4, #12]
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	431d      	orrs	r5, r3
 800d6dc:	81a5      	strh	r5, [r4, #12]
 800d6de:	e7cf      	b.n	800d680 <__smakebuf_r+0x18>

0800d6e0 <_putc_r>:
 800d6e0:	b570      	push	{r4, r5, r6, lr}
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	4614      	mov	r4, r2
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	b118      	cbz	r0, 800d6f2 <_putc_r+0x12>
 800d6ea:	6a03      	ldr	r3, [r0, #32]
 800d6ec:	b90b      	cbnz	r3, 800d6f2 <_putc_r+0x12>
 800d6ee:	f7ff f9b1 	bl	800ca54 <__sinit>
 800d6f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6f4:	07d8      	lsls	r0, r3, #31
 800d6f6:	d405      	bmi.n	800d704 <_putc_r+0x24>
 800d6f8:	89a3      	ldrh	r3, [r4, #12]
 800d6fa:	0599      	lsls	r1, r3, #22
 800d6fc:	d402      	bmi.n	800d704 <_putc_r+0x24>
 800d6fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d700:	f7ff fbb7 	bl	800ce72 <__retarget_lock_acquire_recursive>
 800d704:	68a3      	ldr	r3, [r4, #8]
 800d706:	3b01      	subs	r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	60a3      	str	r3, [r4, #8]
 800d70c:	da05      	bge.n	800d71a <_putc_r+0x3a>
 800d70e:	69a2      	ldr	r2, [r4, #24]
 800d710:	4293      	cmp	r3, r2
 800d712:	db12      	blt.n	800d73a <_putc_r+0x5a>
 800d714:	b2eb      	uxtb	r3, r5
 800d716:	2b0a      	cmp	r3, #10
 800d718:	d00f      	beq.n	800d73a <_putc_r+0x5a>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	6022      	str	r2, [r4, #0]
 800d720:	701d      	strb	r5, [r3, #0]
 800d722:	b2ed      	uxtb	r5, r5
 800d724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d726:	07da      	lsls	r2, r3, #31
 800d728:	d405      	bmi.n	800d736 <_putc_r+0x56>
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	059b      	lsls	r3, r3, #22
 800d72e:	d402      	bmi.n	800d736 <_putc_r+0x56>
 800d730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d732:	f7ff fb9f 	bl	800ce74 <__retarget_lock_release_recursive>
 800d736:	4628      	mov	r0, r5
 800d738:	bd70      	pop	{r4, r5, r6, pc}
 800d73a:	4629      	mov	r1, r5
 800d73c:	4622      	mov	r2, r4
 800d73e:	4630      	mov	r0, r6
 800d740:	f7ff fa79 	bl	800cc36 <__swbuf_r>
 800d744:	4605      	mov	r5, r0
 800d746:	e7ed      	b.n	800d724 <_putc_r+0x44>

0800d748 <_fstat_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d07      	ldr	r5, [pc, #28]	@ (800d768 <_fstat_r+0x20>)
 800d74c:	2300      	movs	r3, #0
 800d74e:	4604      	mov	r4, r0
 800d750:	4608      	mov	r0, r1
 800d752:	4611      	mov	r1, r2
 800d754:	602b      	str	r3, [r5, #0]
 800d756:	f7f4 fd04 	bl	8002162 <_fstat>
 800d75a:	1c43      	adds	r3, r0, #1
 800d75c:	d102      	bne.n	800d764 <_fstat_r+0x1c>
 800d75e:	682b      	ldr	r3, [r5, #0]
 800d760:	b103      	cbz	r3, 800d764 <_fstat_r+0x1c>
 800d762:	6023      	str	r3, [r4, #0]
 800d764:	bd38      	pop	{r3, r4, r5, pc}
 800d766:	bf00      	nop
 800d768:	24001ba4 	.word	0x24001ba4

0800d76c <_isatty_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d06      	ldr	r5, [pc, #24]	@ (800d788 <_isatty_r+0x1c>)
 800d770:	2300      	movs	r3, #0
 800d772:	4604      	mov	r4, r0
 800d774:	4608      	mov	r0, r1
 800d776:	602b      	str	r3, [r5, #0]
 800d778:	f7f4 fcf8 	bl	800216c <_isatty>
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	d102      	bne.n	800d786 <_isatty_r+0x1a>
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	b103      	cbz	r3, 800d786 <_isatty_r+0x1a>
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	24001ba4 	.word	0x24001ba4

0800d78c <_init>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	bf00      	nop
 800d790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d792:	bc08      	pop	{r3}
 800d794:	469e      	mov	lr, r3
 800d796:	4770      	bx	lr

0800d798 <_fini>:
 800d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79a:	bf00      	nop
 800d79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79e:	bc08      	pop	{r3}
 800d7a0:	469e      	mov	lr, r3
 800d7a2:	4770      	bx	lr
